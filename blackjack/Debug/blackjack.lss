
blackjack.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000034c  00800100  00002ab2  00002b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000320  0080044c  0080044c  00002e92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036ee  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099c  00000000  00000000  00006716  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001685  00000000  00000000  000070b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00008738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b8  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000a940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_13>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	14 e0       	ldi	r17, 0x04	; 4
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e2 eb       	ldi	r30, 0xB2	; 178
     17e:	fa e2       	ldi	r31, 0x2A	; 42
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ac 34       	cpi	r26, 0x4C	; 76
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	27 e0       	ldi	r18, 0x07	; 7
     18e:	ac e4       	ldi	r26, 0x4C	; 76
     190:	b4 e0       	ldi	r27, 0x04	; 4
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 36       	cpi	r26, 0x6C	; 108
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <main>
     1a0:	0c 94 57 15 	jmp	0x2aae	; 0x2aae <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <__vector_13>:
double USS_distance(); // get distance
int USS_move(); // get move from the sensor

// interrupt subroutine
ISR(TIMER1_OVF_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	8f 93       	push	r24
     1b4:	9f 93       	push	r25
	cli();
     1b6:	f8 94       	cli
	timerOverflow++;	//Increment Timer Overflow count
     1b8:	80 91 4c 04 	lds	r24, 0x044C	; 0x80044c <__data_end>
     1bc:	90 91 4d 04 	lds	r25, 0x044D	; 0x80044d <__data_end+0x1>
     1c0:	01 96       	adiw	r24, 0x01	; 1
     1c2:	90 93 4d 04 	sts	0x044D, r25	; 0x80044d <__data_end+0x1>
     1c6:	80 93 4c 04 	sts	0x044C, r24	; 0x80044c <__data_end>
	sei();
     1ca:	78 94       	sei
}
     1cc:	9f 91       	pop	r25
     1ce:	8f 91       	pop	r24
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <rankConvert>:
	sendChar(NL);
	SCREENFILL -= 10;
}
// Converts numeric card to it's respective char representation
char rankConvert(int rank) {
	switch (rank) {
     1da:	8b 30       	cpi	r24, 0x0B	; 11
     1dc:	91 05       	cpc	r25, r1
     1de:	99 f0       	breq	.+38     	; 0x206 <rankConvert+0x2c>
     1e0:	3c f4       	brge	.+14     	; 0x1f0 <rankConvert+0x16>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 05       	cpc	r25, r1
     1e6:	59 f0       	breq	.+22     	; 0x1fe <rankConvert+0x24>
     1e8:	8a 30       	cpi	r24, 0x0A	; 10
     1ea:	91 05       	cpc	r25, r1
     1ec:	71 f0       	breq	.+28     	; 0x20a <rankConvert+0x30>
     1ee:	0f c0       	rjmp	.+30     	; 0x20e <rankConvert+0x34>
     1f0:	8c 30       	cpi	r24, 0x0C	; 12
     1f2:	91 05       	cpc	r25, r1
     1f4:	31 f0       	breq	.+12     	; 0x202 <rankConvert+0x28>
     1f6:	8d 30       	cpi	r24, 0x0D	; 13
     1f8:	91 05       	cpc	r25, r1
     1fa:	59 f0       	breq	.+22     	; 0x212 <rankConvert+0x38>
     1fc:	08 c0       	rjmp	.+16     	; 0x20e <rankConvert+0x34>
		case  1: return 'A';
     1fe:	81 e4       	ldi	r24, 0x41	; 65
     200:	08 95       	ret
		case 13: return 'K';
		case 12: return 'Q';
     202:	81 e5       	ldi	r24, 0x51	; 81
     204:	08 95       	ret
		case 11: return 'J';
     206:	8a e4       	ldi	r24, 0x4A	; 74
     208:	08 95       	ret
		case 10: return 'T';
     20a:	84 e5       	ldi	r24, 0x54	; 84
     20c:	08 95       	ret
		default: return (rank + ASCII_NUM);
     20e:	80 5d       	subi	r24, 0xD0	; 208
     210:	08 95       	ret
}
// Converts numeric card to it's respective char representation
char rankConvert(int rank) {
	switch (rank) {
		case  1: return 'A';
		case 13: return 'K';
     212:	8b e4       	ldi	r24, 0x4B	; 75
		case 12: return 'Q';
		case 11: return 'J';
		case 10: return 'T';
		default: return (rank + ASCII_NUM);
	}
}
     214:	08 95       	ret

00000216 <emptyHand>:
	sendChar(NL);
	return;
}

void emptyHand(hand *p) {
    for (int i = 0; i < MAXHAND; i++) {
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	15 c0       	rjmp	.+42     	; 0x246 <emptyHand+0x30>
		p->rank[i] = 0;
     21c:	f9 01       	movw	r30, r18
     21e:	ee 0f       	add	r30, r30
     220:	ff 1f       	adc	r31, r31
     222:	e8 0f       	add	r30, r24
     224:	f9 1f       	adc	r31, r25
     226:	11 82       	std	Z+1, r1	; 0x01
     228:	10 82       	st	Z, r1
		p->suit[i] = 0;
     22a:	fc 01       	movw	r30, r24
     22c:	e2 0f       	add	r30, r18
     22e:	f3 1f       	adc	r31, r19
     230:	10 8e       	std	Z+24, r1	; 0x18
		p->isFaceDown[i] = 0;
     232:	f9 01       	movw	r30, r18
     234:	72 96       	adiw	r30, 0x12	; 18
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	e8 0f       	add	r30, r24
     23c:	f9 1f       	adc	r31, r25
     23e:	11 82       	std	Z+1, r1	; 0x01
     240:	10 82       	st	Z, r1
	sendChar(NL);
	return;
}

void emptyHand(hand *p) {
    for (int i = 0; i < MAXHAND; i++) {
     242:	2f 5f       	subi	r18, 0xFF	; 255
     244:	3f 4f       	sbci	r19, 0xFF	; 255
     246:	2c 30       	cpi	r18, 0x0C	; 12
     248:	31 05       	cpc	r19, r1
     24a:	44 f3       	brlt	.-48     	; 0x21c <emptyHand+0x6>
		p->rank[i] = 0;
		p->suit[i] = 0;
		p->isFaceDown[i] = 0;
	}
	p->handsize = 0;
     24c:	fc 01       	movw	r30, r24
     24e:	15 ae       	std	Z+61, r1	; 0x3d
     250:	14 ae       	std	Z+60, r1	; 0x3c
	p->handvalue = 0;
     252:	17 ae       	std	Z+63, r1	; 0x3f
     254:	16 ae       	std	Z+62, r1	; 0x3e
	p->busted = 0;
     256:	e0 5c       	subi	r30, 0xC0	; 192
     258:	ff 4f       	sbci	r31, 0xFF	; 255
     25a:	11 82       	std	Z+1, r1	; 0x01
     25c:	10 82       	st	Z, r1
	p->soft = 0;
     25e:	32 96       	adiw	r30, 0x02	; 2
     260:	11 82       	std	Z+1, r1	; 0x01
     262:	10 82       	st	Z, r1
    p->empty = 1;
     264:	32 96       	adiw	r30, 0x02	; 2
     266:	21 e0       	ldi	r18, 0x01	; 1
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	31 83       	std	Z+1, r19	; 0x01
     26c:	20 83       	st	Z, r18
     26e:	08 95       	ret

00000270 <initDeck>:
	emptyHand(&p4b);
	shuffleDeck();
}

void initDeck() {
    indexG = 0;
     270:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <indexG+0x1>
     274:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <indexG>
	for (int i = 0; i < SINGLEDECK; i++) {
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	2f c0       	rjmp	.+94     	; 0x2dc <initDeck+0x6c>
		if		(i > (3 * MAXSUIT - 1)) { suitG[i] = 'h'; }
     27e:	27 32       	cpi	r18, 0x27	; 39
     280:	31 05       	cpc	r19, r1
     282:	34 f0       	brlt	.+12     	; 0x290 <initDeck+0x20>
     284:	88 e6       	ldi	r24, 0x68	; 104
     286:	f9 01       	movw	r30, r18
     288:	ea 5c       	subi	r30, 0xCA	; 202
     28a:	f8 4f       	sbci	r31, 0xF8	; 248
     28c:	80 83       	st	Z, r24
     28e:	17 c0       	rjmp	.+46     	; 0x2be <initDeck+0x4e>
		else if (i > (2 * MAXSUIT - 1)) { suitG[i] = 'd'; }
     290:	2a 31       	cpi	r18, 0x1A	; 26
     292:	31 05       	cpc	r19, r1
     294:	34 f0       	brlt	.+12     	; 0x2a2 <initDeck+0x32>
     296:	84 e6       	ldi	r24, 0x64	; 100
     298:	f9 01       	movw	r30, r18
     29a:	ea 5c       	subi	r30, 0xCA	; 202
     29c:	f8 4f       	sbci	r31, 0xF8	; 248
     29e:	80 83       	st	Z, r24
     2a0:	0e c0       	rjmp	.+28     	; 0x2be <initDeck+0x4e>
		else if (i > (MAXSUIT - 1))		{ suitG[i] = 'c'; }
     2a2:	2d 30       	cpi	r18, 0x0D	; 13
     2a4:	31 05       	cpc	r19, r1
     2a6:	34 f0       	brlt	.+12     	; 0x2b4 <initDeck+0x44>
     2a8:	83 e6       	ldi	r24, 0x63	; 99
     2aa:	f9 01       	movw	r30, r18
     2ac:	ea 5c       	subi	r30, 0xCA	; 202
     2ae:	f8 4f       	sbci	r31, 0xF8	; 248
     2b0:	80 83       	st	Z, r24
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <initDeck+0x4e>
		else							{ suitG[i] = 's'; }
     2b4:	83 e7       	ldi	r24, 0x73	; 115
     2b6:	f9 01       	movw	r30, r18
     2b8:	ea 5c       	subi	r30, 0xCA	; 202
     2ba:	f8 4f       	sbci	r31, 0xF8	; 248
     2bc:	80 83       	st	Z, r24
		rankG[i] = (i % MAXSUIT) + 1;
     2be:	c9 01       	movw	r24, r18
     2c0:	6d e0       	ldi	r22, 0x0D	; 13
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__divmodhi4>
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	f9 01       	movw	r30, r18
     2cc:	ee 0f       	add	r30, r30
     2ce:	ff 1f       	adc	r31, r31
     2d0:	ee 5b       	subi	r30, 0xBE	; 190
     2d2:	f9 4f       	sbci	r31, 0xF9	; 249
     2d4:	91 83       	std	Z+1, r25	; 0x01
     2d6:	80 83       	st	Z, r24
	shuffleDeck();
}

void initDeck() {
    indexG = 0;
	for (int i = 0; i < SINGLEDECK; i++) {
     2d8:	2f 5f       	subi	r18, 0xFF	; 255
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	24 33       	cpi	r18, 0x34	; 52
     2de:	31 05       	cpc	r19, r1
     2e0:	74 f2       	brlt	.-100    	; 0x27e <initDeck+0xe>
	// EXTREME TAPJACK: ACE OF SPADES
// 	for (int i = 0; i < SINGLEDECK; i++) {
// 		rankG[i] = 1;
// 		suitG[i] = 's';
// 	}
}
     2e2:	08 95       	ret

000002e4 <shuffleDeck>:

void shuffleDeck() {
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
    indexG = 0;
     2ec:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <indexG+0x1>
     2f0:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <indexG>
	for (int i = 0; i < SINGLEDECK; i++) {
     2f4:	c0 e0       	ldi	r28, 0x00	; 0
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	2a c0       	rjmp	.+84     	; 0x34e <shuffleDeck+0x6a>
		unsigned int j = rand() % SINGLEDECK;
     2fa:	0e 94 27 13 	call	0x264e	; 0x264e <rand>
     2fe:	64 e3       	ldi	r22, 0x34	; 52
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__divmodhi4>
		unsigned int tempR = rankG[j];
     306:	9c 01       	movw	r18, r24
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	2e 5b       	subi	r18, 0xBE	; 190
     30e:	39 4f       	sbci	r19, 0xF9	; 249
     310:	f9 01       	movw	r30, r18
     312:	60 81       	ld	r22, Z
     314:	71 81       	ldd	r23, Z+1	; 0x01
		unsigned char tempS = suitG[j];
     316:	8c 01       	movw	r16, r24
     318:	0a 5c       	subi	r16, 0xCA	; 202
     31a:	18 4f       	sbci	r17, 0xF8	; 248
     31c:	f8 01       	movw	r30, r16
     31e:	40 81       	ld	r20, Z
		rankG[j] = rankG[i];
     320:	de 01       	movw	r26, r28
     322:	aa 0f       	add	r26, r26
     324:	bb 1f       	adc	r27, r27
     326:	ae 5b       	subi	r26, 0xBE	; 190
     328:	b9 4f       	sbci	r27, 0xF9	; 249
     32a:	8d 91       	ld	r24, X+
     32c:	9c 91       	ld	r25, X
     32e:	11 97       	sbiw	r26, 0x01	; 1
     330:	f9 01       	movw	r30, r18
     332:	91 83       	std	Z+1, r25	; 0x01
     334:	80 83       	st	Z, r24
		suitG[j] = suitG[i];
     336:	ce 01       	movw	r24, r28
     338:	8a 5c       	subi	r24, 0xCA	; 202
     33a:	98 4f       	sbci	r25, 0xF8	; 248
     33c:	fc 01       	movw	r30, r24
     33e:	20 81       	ld	r18, Z
     340:	f8 01       	movw	r30, r16
     342:	20 83       	st	Z, r18
		rankG[i] = tempR;
     344:	6d 93       	st	X+, r22
     346:	7c 93       	st	X, r23
		suitG[i] = tempS;
     348:	fc 01       	movw	r30, r24
     34a:	40 83       	st	Z, r20
// 	}
}

void shuffleDeck() {
    indexG = 0;
	for (int i = 0; i < SINGLEDECK; i++) {
     34c:	21 96       	adiw	r28, 0x01	; 1
     34e:	c4 33       	cpi	r28, 0x34	; 52
     350:	d1 05       	cpc	r29, r1
     352:	9c f2       	brlt	.-90     	; 0x2fa <shuffleDeck+0x16>
		rankG[j] = rankG[i];
		suitG[j] = suitG[i];
		rankG[i] = tempR;
		suitG[i] = tempS;
	}
}
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	08 95       	ret

0000035e <newRound>:
	p->soft = 0;
    p->empty = 1;
}

void newRound() {
    emptyHand(&dealer);
     35e:	8e e4       	ldi	r24, 0x4E	; 78
     360:	94 e0       	ldi	r25, 0x04	; 4
     362:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p1a);
     366:	80 ef       	ldi	r24, 0xF0	; 240
     368:	96 e0       	ldi	r25, 0x06	; 6
     36a:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p2a);
     36e:	80 e7       	ldi	r24, 0x70	; 112
     370:	95 e0       	ldi	r25, 0x05	; 5
     372:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p3a);
     376:	86 eb       	ldi	r24, 0xB6	; 182
     378:	95 e0       	ldi	r25, 0x05	; 5
     37a:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p4a);
     37e:	84 e9       	ldi	r24, 0x94	; 148
     380:	94 e0       	ldi	r25, 0x04	; 4
     382:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
    emptyHand(&p1b);
     386:	8a ed       	ldi	r24, 0xDA	; 218
     388:	94 e0       	ldi	r25, 0x04	; 4
     38a:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p2b);
     38e:	8a e2       	ldi	r24, 0x2A	; 42
     390:	95 e0       	ldi	r25, 0x05	; 5
     392:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p3b);
     396:	8a ea       	ldi	r24, 0xAA	; 170
     398:	96 e0       	ldi	r25, 0x06	; 6
     39a:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	emptyHand(&p4b);
     39e:	8c ef       	ldi	r24, 0xFC	; 252
     3a0:	95 e0       	ldi	r25, 0x05	; 5
     3a2:	0e 94 0b 01 	call	0x216	; 0x216 <emptyHand>
	shuffleDeck();
     3a6:	0e 94 72 01 	call	0x2e4	; 0x2e4 <shuffleDeck>
     3aa:	08 95       	ret

000003ac <ADC_rand>:
		suitG[i] = tempS;
	}
}

int ADC_rand() {
    DDRC = (0 << PINC0); // ADC0 input
     3ac:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1 << REFS0) | (0 << MUX0); // input ADC0, left justified, AVcc
     3ae:	80 e4       	ldi	r24, 0x40	; 64
     3b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// enable ADC, set prescaler to 64
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
     3b4:	ea e7       	ldi	r30, 0x7A	; 122
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	86 68       	ori	r24, 0x86	; 134
     3bc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start ADC conversion
     3be:	80 81       	ld	r24, Z
     3c0:	80 64       	ori	r24, 0x40	; 64
     3c2:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // wait until ADC finishes
     3c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     3c8:	86 fd       	sbrc	r24, 6
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <ADC_rand+0x18>
	ADCSRA ^= (1 << ADEN); // disable ADC
     3cc:	ea e7       	ldi	r30, 0x7A	; 122
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	80 81       	ld	r24, Z
     3d2:	80 58       	subi	r24, 0x80	; 128
     3d4:	80 83       	st	Z, r24
	return ADC;
     3d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     3da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
     3de:	08 95       	ret

000003e0 <USART_init>:
    }
}

void USART_init(unsigned int ubrr) {
    //Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     3e0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char) ubrr;
     3e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// enable transmitter
	UCSR0B = (1<<TXEN0);
     3e8:	88 e0       	ldi	r24, 0x08	; 8
     3ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Set frame format: async, no parity, 1 stop bit, , 8 data bits
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
     3ee:	86 e0       	ldi	r24, 0x06	; 6
     3f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     3f4:	08 95       	ret

000003f6 <send>:
}

void send(const char* data) {
     3f6:	fc 01       	movw	r30, r24
    while (*data) {
     3f8:	07 c0       	rjmp	.+14     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		//check if buffer is empty so that data can be written to transmit
		while (!(UCSR0A & (1 << UDRE0)));
     3fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     3fe:	95 ff       	sbrs	r25, 5
     400:	fc cf       	rjmp	.-8      	; 0x3fa <send+0x4>
		UDR0 = *data; //copy ?data? to be sent to UDR0
     402:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		++data;
     406:	31 96       	adiw	r30, 0x01	; 1
	// Set frame format: async, no parity, 1 stop bit, , 8 data bits
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00);
}

void send(const char* data) {
    while (*data) {
     408:	80 81       	ld	r24, Z
     40a:	81 11       	cpse	r24, r1
     40c:	f6 cf       	rjmp	.-20     	; 0x3fa <send+0x4>
		//check if buffer is empty so that data can be written to transmit
		while (!(UCSR0A & (1 << UDRE0)));
		UDR0 = *data; //copy ?data? to be sent to UDR0
		++data;
	}
}
     40e:	08 95       	ret

00000410 <dealCard>:
        }
        
    }
}

void dealCard(hand *p) {
     410:	fc 01       	movw	r30, r24
    if ((indexG >= SINGLEDECK) || (p->handsize >= MAXHAND)) {
     412:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <indexG>
     416:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <indexG+0x1>
     41a:	84 33       	cpi	r24, 0x34	; 52
     41c:	91 05       	cpc	r25, r1
     41e:	2c f4       	brge	.+10     	; 0x42a <dealCard+0x1a>
     420:	24 ad       	ldd	r18, Z+60	; 0x3c
     422:	35 ad       	ldd	r19, Z+61	; 0x3d
     424:	2c 30       	cpi	r18, 0x0C	; 12
     426:	31 05       	cpc	r19, r1
     428:	2c f0       	brlt	.+10     	; 0x434 <dealCard+0x24>
		send("ERROR: Cannot Deal Card!\n");
     42a:	86 e0       	ldi	r24, 0x06	; 6
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		return;
     432:	08 95       	ret
	}
	int rank = rankG[indexG];
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	dc 01       	movw	r26, r24
     43a:	ae 5b       	subi	r26, 0xBE	; 190
     43c:	b9 4f       	sbci	r27, 0xF9	; 249
     43e:	8d 91       	ld	r24, X+
     440:	9c 91       	ld	r25, X
	p->rank[p->handsize] = rank;
     442:	d9 01       	movw	r26, r18
     444:	aa 0f       	add	r26, r26
     446:	bb 1f       	adc	r27, r27
     448:	ae 0f       	add	r26, r30
     44a:	bf 1f       	adc	r27, r31
     44c:	8d 93       	st	X+, r24
     44e:	9c 93       	st	X, r25
	p->suit[p->handsize] = suitG[indexG];
     450:	40 91 6a 07 	lds	r20, 0x076A	; 0x80076a <indexG>
     454:	50 91 6b 07 	lds	r21, 0x076B	; 0x80076b <indexG+0x1>
     458:	da 01       	movw	r26, r20
     45a:	aa 5c       	subi	r26, 0xCA	; 202
     45c:	b8 4f       	sbci	r27, 0xF8	; 248
     45e:	6c 91       	ld	r22, X
     460:	df 01       	movw	r26, r30
     462:	a2 0f       	add	r26, r18
     464:	b3 1f       	adc	r27, r19
     466:	58 96       	adiw	r26, 0x18	; 24
     468:	6c 93       	st	X, r22
	p->handsize++;
     46a:	2f 5f       	subi	r18, 0xFF	; 255
     46c:	3f 4f       	sbci	r19, 0xFF	; 255
     46e:	35 af       	std	Z+61, r19	; 0x3d
     470:	24 af       	std	Z+60, r18	; 0x3c
	indexG++;
     472:	4f 5f       	subi	r20, 0xFF	; 255
     474:	5f 4f       	sbci	r21, 0xFF	; 255
     476:	50 93 6b 07 	sts	0x076B, r21	; 0x80076b <indexG+0x1>
     47a:	40 93 6a 07 	sts	0x076A, r20	; 0x80076a <indexG>
	switch (rank) {
     47e:	81 30       	cpi	r24, 0x01	; 1
     480:	91 05       	cpc	r25, r1
     482:	41 f0       	breq	.+16     	; 0x494 <dealCard+0x84>
     484:	e4 f0       	brlt	.+56     	; 0x4be <dealCard+0xae>
     486:	9c 01       	movw	r18, r24
     488:	2a 50       	subi	r18, 0x0A	; 10
     48a:	31 09       	sbc	r19, r1
     48c:	24 30       	cpi	r18, 0x04	; 4
     48e:	31 05       	cpc	r19, r1
     490:	80 f0       	brcs	.+32     	; 0x4b2 <dealCard+0xa2>
     492:	15 c0       	rjmp	.+42     	; 0x4be <dealCard+0xae>
		case 1:
		p->handvalue += 11;
     494:	86 ad       	ldd	r24, Z+62	; 0x3e
     496:	97 ad       	ldd	r25, Z+63	; 0x3f
     498:	0b 96       	adiw	r24, 0x0b	; 11
     49a:	97 af       	std	Z+63, r25	; 0x3f
     49c:	86 af       	std	Z+62, r24	; 0x3e
		p->soft++;
     49e:	df 01       	movw	r26, r30
     4a0:	ae 5b       	subi	r26, 0xBE	; 190
     4a2:	bf 4f       	sbci	r27, 0xFF	; 255
     4a4:	8d 91       	ld	r24, X+
     4a6:	9c 91       	ld	r25, X
     4a8:	11 97       	sbiw	r26, 0x01	; 1
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	8d 93       	st	X+, r24
     4ae:	9c 93       	st	X, r25
		break;
     4b0:	0c c0       	rjmp	.+24     	; 0x4ca <dealCard+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		p->handvalue += 10;
     4b2:	86 ad       	ldd	r24, Z+62	; 0x3e
     4b4:	97 ad       	ldd	r25, Z+63	; 0x3f
     4b6:	0a 96       	adiw	r24, 0x0a	; 10
     4b8:	97 af       	std	Z+63, r25	; 0x3f
     4ba:	86 af       	std	Z+62, r24	; 0x3e
		break;
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <dealCard+0xba>
		default:
		p->handvalue += rank;
     4be:	26 ad       	ldd	r18, Z+62	; 0x3e
     4c0:	37 ad       	ldd	r19, Z+63	; 0x3f
     4c2:	82 0f       	add	r24, r18
     4c4:	93 1f       	adc	r25, r19
     4c6:	97 af       	std	Z+63, r25	; 0x3f
     4c8:	86 af       	std	Z+62, r24	; 0x3e
	}
	if (p->handvalue > 21) {
     4ca:	86 ad       	ldd	r24, Z+62	; 0x3e
     4cc:	97 ad       	ldd	r25, Z+63	; 0x3f
     4ce:	86 31       	cpi	r24, 0x16	; 22
     4d0:	91 05       	cpc	r25, r1
     4d2:	c4 f0       	brlt	.+48     	; 0x504 <dealCard+0xf4>
		if (p->soft > 0) {
     4d4:	df 01       	movw	r26, r30
     4d6:	ae 5b       	subi	r26, 0xBE	; 190
     4d8:	bf 4f       	sbci	r27, 0xFF	; 255
     4da:	2d 91       	ld	r18, X+
     4dc:	3c 91       	ld	r19, X
     4de:	11 97       	sbiw	r26, 0x01	; 1
     4e0:	12 16       	cp	r1, r18
     4e2:	13 06       	cpc	r1, r19
     4e4:	44 f4       	brge	.+16     	; 0x4f6 <dealCard+0xe6>
			p->handvalue -= 10;
     4e6:	0a 97       	sbiw	r24, 0x0a	; 10
     4e8:	97 af       	std	Z+63, r25	; 0x3f
     4ea:	86 af       	std	Z+62, r24	; 0x3e
			p->soft--;
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	31 09       	sbc	r19, r1
     4f0:	2d 93       	st	X+, r18
     4f2:	3c 93       	st	X, r19
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <dealCard+0xf4>
		}
		else { p->busted = 1; }
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	df 01       	movw	r26, r30
     4fc:	a0 5c       	subi	r26, 0xC0	; 192
     4fe:	bf 4f       	sbci	r27, 0xFF	; 255
     500:	8d 93       	st	X+, r24
     502:	9c 93       	st	X, r25
	}
    p->empty = 0;
     504:	ec 5b       	subi	r30, 0xBC	; 188
     506:	ff 4f       	sbci	r31, 0xFF	; 255
     508:	11 82       	std	Z+1, r1	; 0x01
     50a:	10 82       	st	Z, r1
     50c:	08 95       	ret

0000050e <selectPlayer>:
		}
	}
}

void selectPlayer(int ID, hand** pA, hand** pB) {
    switch (ID) {
     50e:	82 30       	cpi	r24, 0x02	; 2
     510:	91 05       	cpc	r25, r1
     512:	b9 f0       	breq	.+46     	; 0x542 <selectPlayer+0x34>
     514:	2c f4       	brge	.+10     	; 0x520 <selectPlayer+0x12>
     516:	00 97       	sbiw	r24, 0x00	; 0
     518:	a9 f1       	breq	.+106    	; 0x584 <selectPlayer+0x76>
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	39 f0       	breq	.+14     	; 0x52c <selectPlayer+0x1e>
     51e:	08 95       	ret
     520:	83 30       	cpi	r24, 0x03	; 3
     522:	91 05       	cpc	r25, r1
     524:	c9 f0       	breq	.+50     	; 0x558 <selectPlayer+0x4a>
     526:	04 97       	sbiw	r24, 0x04	; 4
     528:	11 f1       	breq	.+68     	; 0x56e <selectPlayer+0x60>
     52a:	08 95       	ret
        case P1:
            *pA = &p1a;
     52c:	80 ef       	ldi	r24, 0xF0	; 240
     52e:	96 e0       	ldi	r25, 0x06	; 6
     530:	fb 01       	movw	r30, r22
     532:	91 83       	std	Z+1, r25	; 0x01
     534:	80 83       	st	Z, r24
            *pB = &p1b;
     536:	8a ed       	ldi	r24, 0xDA	; 218
     538:	94 e0       	ldi	r25, 0x04	; 4
     53a:	fa 01       	movw	r30, r20
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
            break;
     540:	08 95       	ret
        case P2:
            *pA = &p2a;
     542:	80 e7       	ldi	r24, 0x70	; 112
     544:	95 e0       	ldi	r25, 0x05	; 5
     546:	fb 01       	movw	r30, r22
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
            *pB = &p2b;
     54c:	8a e2       	ldi	r24, 0x2A	; 42
     54e:	95 e0       	ldi	r25, 0x05	; 5
     550:	fa 01       	movw	r30, r20
     552:	91 83       	std	Z+1, r25	; 0x01
     554:	80 83       	st	Z, r24
            break;
     556:	08 95       	ret
        case P3:
            *pA = &p3a;
     558:	86 eb       	ldi	r24, 0xB6	; 182
     55a:	95 e0       	ldi	r25, 0x05	; 5
     55c:	fb 01       	movw	r30, r22
     55e:	91 83       	std	Z+1, r25	; 0x01
     560:	80 83       	st	Z, r24
            *pB = &p3b;
     562:	8a ea       	ldi	r24, 0xAA	; 170
     564:	96 e0       	ldi	r25, 0x06	; 6
     566:	fa 01       	movw	r30, r20
     568:	91 83       	std	Z+1, r25	; 0x01
     56a:	80 83       	st	Z, r24
            break;
     56c:	08 95       	ret
        case P4:
            *pA = &p4a;
     56e:	84 e9       	ldi	r24, 0x94	; 148
     570:	94 e0       	ldi	r25, 0x04	; 4
     572:	fb 01       	movw	r30, r22
     574:	91 83       	std	Z+1, r25	; 0x01
     576:	80 83       	st	Z, r24
            *pB = &p4b;
     578:	8c ef       	ldi	r24, 0xFC	; 252
     57a:	95 e0       	ldi	r25, 0x05	; 5
     57c:	fa 01       	movw	r30, r20
     57e:	91 83       	std	Z+1, r25	; 0x01
     580:	80 83       	st	Z, r24
            break;
     582:	08 95       	ret
        case DEALER:
            send("ERROR in selectPlayer()\n");
     584:	80 e2       	ldi	r24, 0x20	; 32
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     58c:	08 95       	ret

0000058e <sendChar>:
	}
}

void sendChar(const char data) {
    //check if buffer is empty so that data can be written to transmit
	while (!(UCSR0A & (1 << UDRE0)));
     58e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     592:	95 ff       	sbrs	r25, 5
     594:	fc cf       	rjmp	.-8      	; 0x58e <sendChar>
	UDR0 = data; //copy character to be sent to UDR0
     596:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     59a:	08 95       	ret

0000059c <fillScreen>:
		case 10: return 'T';
		default: return (rank + ASCII_NUM);
	}
}

void fillScreen(int lines) {
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	ec 01       	movw	r28, r24
    for (;lines > 0; lines--) {
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <fillScreen+0x10>
        sendChar(NL);
     5a4:	8a e0       	ldi	r24, 0x0A	; 10
     5a6:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		default: return (rank + ASCII_NUM);
	}
}

void fillScreen(int lines) {
    for (;lines > 0; lines--) {
     5aa:	21 97       	sbiw	r28, 0x01	; 1
     5ac:	1c 16       	cp	r1, r28
     5ae:	1d 06       	cpc	r1, r29
     5b0:	cc f3       	brlt	.-14     	; 0x5a4 <fillScreen+0x8>
        sendChar(NL);
    }
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <alignCenter>:

void alignCenter(int strWidth) {
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
    for (int i = (TERMWIDTH - strWidth)/2; i > 0; i--) {
     5bc:	2a ee       	ldi	r18, 0xEA	; 234
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	a9 01       	movw	r20, r18
     5c2:	48 1b       	sub	r20, r24
     5c4:	59 0b       	sbc	r21, r25
     5c6:	ca 01       	movw	r24, r20
     5c8:	ea 01       	movw	r28, r20
     5ca:	99 23       	and	r25, r25
     5cc:	0c f4       	brge	.+2      	; 0x5d0 <alignCenter+0x18>
     5ce:	21 96       	adiw	r28, 0x01	; 1
     5d0:	d5 95       	asr	r29
     5d2:	c7 95       	ror	r28
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <alignCenter+0x26>
        sendChar(' ');
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        sendChar(NL);
    }
}

void alignCenter(int strWidth) {
    for (int i = (TERMWIDTH - strWidth)/2; i > 0; i--) {
     5dc:	21 97       	sbiw	r28, 0x01	; 1
     5de:	1c 16       	cp	r1, r28
     5e0:	1d 06       	cpc	r1, r29
     5e2:	cc f3       	brlt	.-14     	; 0x5d6 <alignCenter+0x1e>
        sendChar(' ');
    }
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <cardPrint>:
        }
        dispResults();
    }
}

void cardPrint(hand *p) {
     5ea:	af 92       	push	r10
     5ec:	bf 92       	push	r11
     5ee:	cf 92       	push	r12
     5f0:	df 92       	push	r13
     5f2:	ef 92       	push	r14
     5f4:	ff 92       	push	r15
     5f6:	0f 93       	push	r16
     5f8:	1f 93       	push	r17
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	ec 01       	movw	r28, r24
    int numCards = p->handsize;
     600:	ac ac       	ldd	r10, Y+60	; 0x3c
     602:	bd ac       	ldd	r11, Y+61	; 0x3d
	unsigned int k;
	/*Border(s)*/
    alignCenter(numCards*14);
     604:	c5 01       	movw	r24, r10
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	7c 01       	movw	r14, r24
     60c:	ee 0c       	add	r14, r14
     60e:	ff 1c       	adc	r15, r15
     610:	ee 0c       	add	r14, r14
     612:	ff 1c       	adc	r15, r15
     614:	ee 0c       	add	r14, r14
     616:	ff 1c       	adc	r15, r15
     618:	e8 1a       	sub	r14, r24
     61a:	f9 0a       	sbc	r15, r25
     61c:	c7 01       	movw	r24, r14
     61e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     622:	c1 2c       	mov	r12, r1
     624:	d1 2c       	mov	r13, r1
     626:	07 c0       	rjmp	.+14     	; 0x636 <cardPrint+0x4c>
	 send(" +-----------+");
     628:	89 e3       	ldi	r24, 0x39	; 57
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
void cardPrint(hand *p) {
    int numCards = p->handsize;
	unsigned int k;
	/*Border(s)*/
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	c8 1a       	sub	r12, r24
     634:	d8 0a       	sbc	r13, r24
     636:	85 01       	movw	r16, r10
     638:	ca 14       	cp	r12, r10
     63a:	db 04       	cpc	r13, r11
     63c:	a8 f3       	brcs	.-22     	; 0x628 <cardPrint+0x3e>
	 send(" +-----------+");
	}
	sendChar(NL);
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	/*TopRank(s)*/
    alignCenter(numCards*14);
     644:	c7 01       	movw	r24, r14
     646:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     64a:	c1 2c       	mov	r12, r1
     64c:	d1 2c       	mov	r13, r1
     64e:	29 c0       	rjmp	.+82     	; 0x6a2 <cardPrint+0xb8>
	 if (p->isFaceDown[k]) { send(" |###########|"); }
     650:	f6 01       	movw	r30, r12
     652:	72 96       	adiw	r30, 0x12	; 18
     654:	ee 0f       	add	r30, r30
     656:	ff 1f       	adc	r31, r31
     658:	ec 0f       	add	r30, r28
     65a:	fd 1f       	adc	r31, r29
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	89 2b       	or	r24, r25
     662:	29 f0       	breq	.+10     	; 0x66e <cardPrint+0x84>
     664:	88 e4       	ldi	r24, 0x48	; 72
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     66c:	17 c0       	rjmp	.+46     	; 0x69c <cardPrint+0xb2>
	 else { 
		 send(" | ");
     66e:	87 e5       	ldi	r24, 0x57	; 87
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		 sendChar(rankConvert(p->rank[k])); 
     676:	f6 01       	movw	r30, r12
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	ec 0f       	add	r30, r28
     67e:	fd 1f       	adc	r31, r29
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	0e 94 ed 00 	call	0x1da	; 0x1da <rankConvert>
     688:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		 send("         ");
     68c:	8b e5       	ldi	r24, 0x5B	; 91
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		 send("|");
     694:	81 e8       	ldi	r24, 0x81	; 129
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	 send(" +-----------+");
	}
	sendChar(NL);
	/*TopRank(s)*/
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	c8 1a       	sub	r12, r24
     6a0:	d8 0a       	sbc	r13, r24
     6a2:	c0 16       	cp	r12, r16
     6a4:	d1 06       	cpc	r13, r17
     6a6:	a0 f2       	brcs	.-88     	; 0x650 <cardPrint+0x66>
		 sendChar(rankConvert(p->rank[k])); 
		 send("         ");
		 send("|");
		 }
	}
	sendChar(NL);
     6a8:	8a e0       	ldi	r24, 0x0A	; 10
     6aa:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	/*Spacer(s)*/
    alignCenter(numCards*14);
     6ae:	c7 01       	movw	r24, r14
     6b0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     6b4:	c1 2c       	mov	r12, r1
     6b6:	d1 2c       	mov	r13, r1
     6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <cardPrint+0xfc>
	 if (p->isFaceDown[k]) { send(" |####   ####|"); }
     6ba:	f6 01       	movw	r30, r12
     6bc:	72 96       	adiw	r30, 0x12	; 18
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	ec 0f       	add	r30, r28
     6c4:	fd 1f       	adc	r31, r29
     6c6:	80 81       	ld	r24, Z
     6c8:	91 81       	ldd	r25, Z+1	; 0x01
     6ca:	89 2b       	or	r24, r25
     6cc:	29 f0       	breq	.+10     	; 0x6d8 <cardPrint+0xee>
     6ce:	85 e6       	ldi	r24, 0x65	; 101
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <cardPrint+0xf6>
	 else { send(" |           |"); }
     6d8:	84 e7       	ldi	r24, 0x74	; 116
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		 }
	}
	sendChar(NL);
	/*Spacer(s)*/
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	c8 1a       	sub	r12, r24
     6e4:	d8 0a       	sbc	r13, r24
     6e6:	c0 16       	cp	r12, r16
     6e8:	d1 06       	cpc	r13, r17
     6ea:	38 f3       	brcs	.-50     	; 0x6ba <cardPrint+0xd0>
	 if (p->isFaceDown[k]) { send(" |####   ####|"); }
	 else { send(" |           |"); }
	}
	sendChar(NL);
     6ec:	8a e0       	ldi	r24, 0x0A	; 10
     6ee:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>

	// Printing 1st line of body
    alignCenter(numCards*14);
     6f2:	c7 01       	movw	r24, r14
     6f4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     6f8:	c1 2c       	mov	r12, r1
     6fa:	d1 2c       	mov	r13, r1
     6fc:	39 c0       	rjmp	.+114    	; 0x770 <cardPrint+0x186>
        if (p->isFaceDown[k]) { 
     6fe:	f6 01       	movw	r30, r12
     700:	72 96       	adiw	r30, 0x12	; 18
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	ec 0f       	add	r30, r28
     708:	fd 1f       	adc	r31, r29
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	89 2b       	or	r24, r25
     710:	29 f0       	breq	.+10     	; 0x71c <cardPrint+0x132>
            send(" |#### U ####|");
     712:	83 e8       	ldi	r24, 0x83	; 131
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     71a:	27 c0       	rjmp	.+78     	; 0x76a <cardPrint+0x180>
        }
        else switch(p->suit[k]) {
     71c:	fe 01       	movw	r30, r28
     71e:	ec 0d       	add	r30, r12
     720:	fd 1d       	adc	r31, r13
     722:	80 8d       	ldd	r24, Z+24	; 0x18
     724:	84 36       	cpi	r24, 0x64	; 100
     726:	71 f0       	breq	.+28     	; 0x744 <cardPrint+0x15a>
     728:	18 f4       	brcc	.+6      	; 0x730 <cardPrint+0x146>
     72a:	83 36       	cpi	r24, 0x63	; 99
     72c:	81 f0       	breq	.+32     	; 0x74e <cardPrint+0x164>
     72e:	19 c0       	rjmp	.+50     	; 0x762 <cardPrint+0x178>
     730:	88 36       	cpi	r24, 0x68	; 104
     732:	19 f0       	breq	.+6      	; 0x73a <cardPrint+0x150>
     734:	83 37       	cpi	r24, 0x73	; 115
     736:	81 f0       	breq	.+32     	; 0x758 <cardPrint+0x16e>
     738:	14 c0       	rjmp	.+40     	; 0x762 <cardPrint+0x178>
            case 'h': send(" |    _ _    |"); break;
     73a:	82 e9       	ldi	r24, 0x92	; 146
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     742:	13 c0       	rjmp	.+38     	; 0x76a <cardPrint+0x180>
            case 'd': send(" |     ^     |"); break;
     744:	81 ea       	ldi	r24, 0xA1	; 161
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     74c:	0e c0       	rjmp	.+28     	; 0x76a <cardPrint+0x180>
            case 'c': send(" |     _     |"); break;
     74e:	80 eb       	ldi	r24, 0xB0	; 176
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     756:	09 c0       	rjmp	.+18     	; 0x76a <cardPrint+0x180>
            case 's': send(" |     .     |"); break;
     758:	8f eb       	ldi	r24, 0xBF	; 191
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     760:	04 c0       	rjmp	.+8      	; 0x76a <cardPrint+0x180>
            default : send(" |   ERROR   |"); break;
     762:	8e ec       	ldi	r24, 0xCE	; 206
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	}
	sendChar(NL);

	// Printing 1st line of body
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     76a:	8f ef       	ldi	r24, 0xFF	; 255
     76c:	c8 1a       	sub	r12, r24
     76e:	d8 0a       	sbc	r13, r24
     770:	c0 16       	cp	r12, r16
     772:	d1 06       	cpc	r13, r17
     774:	20 f2       	brcs	.-120    	; 0x6fe <cardPrint+0x114>
            case 'c': send(" |     _     |"); break;
            case 's': send(" |     .     |"); break;
            default : send(" |   ERROR   |"); break;
        }
	}
	sendChar(NL); // Next line
     776:	8a e0       	ldi	r24, 0x0A	; 10
     778:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	// Printing 2nd line of body
    alignCenter(numCards*14);
     77c:	c7 01       	movw	r24, r14
     77e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     782:	c1 2c       	mov	r12, r1
     784:	d1 2c       	mov	r13, r1
     786:	39 c0       	rjmp	.+114    	; 0x7fa <cardPrint+0x210>
        if (p->isFaceDown[k]) {
     788:	f6 01       	movw	r30, r12
     78a:	72 96       	adiw	r30, 0x12	; 18
     78c:	ee 0f       	add	r30, r30
     78e:	ff 1f       	adc	r31, r31
     790:	ec 0f       	add	r30, r28
     792:	fd 1f       	adc	r31, r29
     794:	80 81       	ld	r24, Z
     796:	91 81       	ldd	r25, Z+1	; 0x01
     798:	89 2b       	or	r24, r25
     79a:	29 f0       	breq	.+10     	; 0x7a6 <cardPrint+0x1bc>
            send(" |#### N ####|");
     79c:	8d ed       	ldi	r24, 0xDD	; 221
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     7a4:	27 c0       	rjmp	.+78     	; 0x7f4 <cardPrint+0x20a>
        }
        else switch(p->suit[k]) {
     7a6:	fe 01       	movw	r30, r28
     7a8:	ec 0d       	add	r30, r12
     7aa:	fd 1d       	adc	r31, r13
     7ac:	80 8d       	ldd	r24, Z+24	; 0x18
     7ae:	84 36       	cpi	r24, 0x64	; 100
     7b0:	71 f0       	breq	.+28     	; 0x7ce <cardPrint+0x1e4>
     7b2:	18 f4       	brcc	.+6      	; 0x7ba <cardPrint+0x1d0>
     7b4:	83 36       	cpi	r24, 0x63	; 99
     7b6:	81 f0       	breq	.+32     	; 0x7d8 <cardPrint+0x1ee>
     7b8:	19 c0       	rjmp	.+50     	; 0x7ec <cardPrint+0x202>
     7ba:	88 36       	cpi	r24, 0x68	; 104
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <cardPrint+0x1da>
     7be:	83 37       	cpi	r24, 0x73	; 115
     7c0:	81 f0       	breq	.+32     	; 0x7e2 <cardPrint+0x1f8>
     7c2:	14 c0       	rjmp	.+40     	; 0x7ec <cardPrint+0x202>
            case 'h': send(" |   ( V )   |"); break;
     7c4:	8c ee       	ldi	r24, 0xEC	; 236
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     7cc:	13 c0       	rjmp	.+38     	; 0x7f4 <cardPrint+0x20a>
            case 'd': send(" |    / \\    |"); break;
     7ce:	8b ef       	ldi	r24, 0xFB	; 251
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     7d6:	0e c0       	rjmp	.+28     	; 0x7f4 <cardPrint+0x20a>
            case 'c': send(" |    (&)    |"); break;
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <cardPrint+0x20a>
            case 's': send(" |    /&\\    |"); break;
     7e2:	89 e1       	ldi	r24, 0x19	; 25
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <cardPrint+0x20a>
            default : send(" |   ERROR   |"); break;
     7ec:	8e ec       	ldi	r24, 0xCE	; 206
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        }
	}
	sendChar(NL); // Next line
	// Printing 2nd line of body
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	c8 1a       	sub	r12, r24
     7f8:	d8 0a       	sbc	r13, r24
     7fa:	c0 16       	cp	r12, r16
     7fc:	d1 06       	cpc	r13, r17
     7fe:	20 f2       	brcs	.-120    	; 0x788 <cardPrint+0x19e>
            case 'c': send(" |    (&)    |"); break;
            case 's': send(" |    /&\\    |"); break;
            default : send(" |   ERROR   |"); break;
        }
	}
	sendChar(NL); // Next line
     800:	8a e0       	ldi	r24, 0x0A	; 10
     802:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	// Printing 3rd line of body
    alignCenter(numCards*14);
     806:	c7 01       	movw	r24, r14
     808:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     80c:	c1 2c       	mov	r12, r1
     80e:	d1 2c       	mov	r13, r1
     810:	39 c0       	rjmp	.+114    	; 0x884 <__DATA_REGION_LENGTH__+0x84>
        if (p->isFaceDown[k]) {
     812:	f6 01       	movw	r30, r12
     814:	72 96       	adiw	r30, 0x12	; 18
     816:	ee 0f       	add	r30, r30
     818:	ff 1f       	adc	r31, r31
     81a:	ec 0f       	add	r30, r28
     81c:	fd 1f       	adc	r31, r29
     81e:	80 81       	ld	r24, Z
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	89 2b       	or	r24, r25
     824:	29 f0       	breq	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
            send(" |#### L ####|");
     826:	88 e2       	ldi	r24, 0x28	; 40
     828:	92 e0       	ldi	r25, 0x02	; 2
     82a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     82e:	27 c0       	rjmp	.+78     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
        }
        else switch(p->suit[k]) {
     830:	fe 01       	movw	r30, r28
     832:	ec 0d       	add	r30, r12
     834:	fd 1d       	adc	r31, r13
     836:	80 8d       	ldd	r24, Z+24	; 0x18
     838:	84 36       	cpi	r24, 0x64	; 100
     83a:	71 f0       	breq	.+28     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     83c:	18 f4       	brcc	.+6      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     83e:	83 36       	cpi	r24, 0x63	; 99
     840:	81 f0       	breq	.+32     	; 0x862 <__DATA_REGION_LENGTH__+0x62>
     842:	19 c0       	rjmp	.+50     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
     844:	88 36       	cpi	r24, 0x68	; 104
     846:	19 f0       	breq	.+6      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     848:	83 37       	cpi	r24, 0x73	; 115
     84a:	81 f0       	breq	.+32     	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
     84c:	14 c0       	rjmp	.+40     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
            case 'h': send(" |    \\ /    |"); break;
     84e:	87 e3       	ldi	r24, 0x37	; 55
     850:	92 e0       	ldi	r25, 0x02	; 2
     852:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     856:	13 c0       	rjmp	.+38     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
            case 'd': send(" |    \\ /    |"); break;
     858:	87 e3       	ldi	r24, 0x37	; 55
     85a:	92 e0       	ldi	r25, 0x02	; 2
     85c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     860:	0e c0       	rjmp	.+28     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
            case 'c': send(" |   (&&&)   |"); break;
     862:	86 e4       	ldi	r24, 0x46	; 70
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     86a:	09 c0       	rjmp	.+18     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
            case 's': send(" |   (&&&)   |"); break;
     86c:	86 e4       	ldi	r24, 0x46	; 70
     86e:	92 e0       	ldi	r25, 0x02	; 2
     870:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     874:	04 c0       	rjmp	.+8      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
            default : send(" |   ERROR   |"); break;
     876:	8e ec       	ldi	r24, 0xCE	; 206
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        }
	}
	sendChar(NL); // Next line
	// Printing 3rd line of body
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     87e:	8f ef       	ldi	r24, 0xFF	; 255
     880:	c8 1a       	sub	r12, r24
     882:	d8 0a       	sbc	r13, r24
     884:	c0 16       	cp	r12, r16
     886:	d1 06       	cpc	r13, r17
     888:	20 f2       	brcs	.-120    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
            case 'c': send(" |   (&&&)   |"); break;
            case 's': send(" |   (&&&)   |"); break;
            default : send(" |   ERROR   |"); break;
        }
	}
	sendChar(NL); // Next line
     88a:	8a e0       	ldi	r24, 0x0A	; 10
     88c:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	 // Printing 4th line of body
    alignCenter(numCards*14);
     890:	c7 01       	movw	r24, r14
     892:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	 for(k = 0; k < numCards; k++) {
     896:	c1 2c       	mov	r12, r1
     898:	d1 2c       	mov	r13, r1
     89a:	39 c0       	rjmp	.+114    	; 0x90e <__stack+0xf>
            if (p->isFaceDown[k]) {
     89c:	f6 01       	movw	r30, r12
     89e:	72 96       	adiw	r30, 0x12	; 18
     8a0:	ee 0f       	add	r30, r30
     8a2:	ff 1f       	adc	r31, r31
     8a4:	ec 0f       	add	r30, r28
     8a6:	fd 1f       	adc	r31, r29
     8a8:	80 81       	ld	r24, Z
     8aa:	91 81       	ldd	r25, Z+1	; 0x01
     8ac:	89 2b       	or	r24, r25
     8ae:	29 f0       	breq	.+10     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
                send(" |#### V ####|");
     8b0:	85 e5       	ldi	r24, 0x55	; 85
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     8b8:	27 c0       	rjmp	.+78     	; 0x908 <__stack+0x9>
            }
            else switch(p->suit[k]) {
     8ba:	fe 01       	movw	r30, r28
     8bc:	ec 0d       	add	r30, r12
     8be:	fd 1d       	adc	r31, r13
     8c0:	80 8d       	ldd	r24, Z+24	; 0x18
     8c2:	84 36       	cpi	r24, 0x64	; 100
     8c4:	71 f0       	breq	.+28     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
     8c6:	18 f4       	brcc	.+6      	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
     8c8:	83 36       	cpi	r24, 0x63	; 99
     8ca:	81 f0       	breq	.+32     	; 0x8ec <__DATA_REGION_LENGTH__+0xec>
     8cc:	19 c0       	rjmp	.+50     	; 0x900 <__stack+0x1>
     8ce:	88 36       	cpi	r24, 0x68	; 104
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
     8d2:	83 37       	cpi	r24, 0x73	; 115
     8d4:	81 f0       	breq	.+32     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
     8d6:	14 c0       	rjmp	.+40     	; 0x900 <__stack+0x1>
                case 'h': send(" |     V     |"); break;
     8d8:	84 e6       	ldi	r24, 0x64	; 100
     8da:	92 e0       	ldi	r25, 0x02	; 2
     8dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     8e0:	13 c0       	rjmp	.+38     	; 0x908 <__stack+0x9>
                case 'd': send(" |     V     |"); break;
     8e2:	84 e6       	ldi	r24, 0x64	; 100
     8e4:	92 e0       	ldi	r25, 0x02	; 2
     8e6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     8ea:	0e c0       	rjmp	.+28     	; 0x908 <__stack+0x9>
                case 'c': send(" |     ^     |"); break;
     8ec:	81 ea       	ldi	r24, 0xA1	; 161
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     8f4:	09 c0       	rjmp	.+18     	; 0x908 <__stack+0x9>
                case 's': send(" |     ^     |"); break;
     8f6:	81 ea       	ldi	r24, 0xA1	; 161
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__stack+0x9>
                default : send(" |   ERROR   |"); break;
     900:	8e ec       	ldi	r24, 0xCE	; 206
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        }
	}
	sendChar(NL); // Next line
	 // Printing 4th line of body
    alignCenter(numCards*14);
	 for(k = 0; k < numCards; k++) {
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	c8 1a       	sub	r12, r24
     90c:	d8 0a       	sbc	r13, r24
     90e:	c0 16       	cp	r12, r16
     910:	d1 06       	cpc	r13, r17
     912:	20 f2       	brcs	.-120    	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
                case 'c': send(" |     ^     |"); break;
                case 's': send(" |     ^     |"); break;
                default : send(" |   ERROR   |"); break;
            }
	 }
	sendChar(NL); // Next line
     914:	8a e0       	ldi	r24, 0x0A	; 10
     916:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    /*Spacer(s)*/
    alignCenter(numCards*14);
     91a:	c7 01       	movw	r24, r14
     91c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     920:	c1 2c       	mov	r12, r1
     922:	d1 2c       	mov	r13, r1
     924:	16 c0       	rjmp	.+44     	; 0x952 <__stack+0x53>
	 if (p->isFaceDown[k]) { send(" |####   ####|"); }
     926:	f6 01       	movw	r30, r12
     928:	72 96       	adiw	r30, 0x12	; 18
     92a:	ee 0f       	add	r30, r30
     92c:	ff 1f       	adc	r31, r31
     92e:	ec 0f       	add	r30, r28
     930:	fd 1f       	adc	r31, r29
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	89 2b       	or	r24, r25
     938:	29 f0       	breq	.+10     	; 0x944 <__stack+0x45>
     93a:	85 e6       	ldi	r24, 0x65	; 101
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     942:	04 c0       	rjmp	.+8      	; 0x94c <__stack+0x4d>
	 else { send(" |           |"); }
     944:	84 e7       	ldi	r24, 0x74	; 116
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            }
	 }
	sendChar(NL); // Next line
    /*Spacer(s)*/
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     94c:	8f ef       	ldi	r24, 0xFF	; 255
     94e:	c8 1a       	sub	r12, r24
     950:	d8 0a       	sbc	r13, r24
     952:	c0 16       	cp	r12, r16
     954:	d1 06       	cpc	r13, r17
     956:	38 f3       	brcs	.-50     	; 0x926 <__stack+0x27>
	 if (p->isFaceDown[k]) { send(" |####   ####|"); }
	 else { send(" |           |"); }
	}
	sendChar(NL);
     958:	8a e0       	ldi	r24, 0x0A	; 10
     95a:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	/*BotRank(s)*/
    alignCenter(numCards*14);
     95e:	c7 01       	movw	r24, r14
     960:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     964:	c1 2c       	mov	r12, r1
     966:	d1 2c       	mov	r13, r1
     968:	29 c0       	rjmp	.+82     	; 0x9bc <__stack+0xbd>
	 if (p->isFaceDown[k]) { send(" |###########|"); }
     96a:	f6 01       	movw	r30, r12
     96c:	72 96       	adiw	r30, 0x12	; 18
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	ec 0f       	add	r30, r28
     974:	fd 1f       	adc	r31, r29
     976:	80 81       	ld	r24, Z
     978:	91 81       	ldd	r25, Z+1	; 0x01
     97a:	89 2b       	or	r24, r25
     97c:	29 f0       	breq	.+10     	; 0x988 <__stack+0x89>
     97e:	88 e4       	ldi	r24, 0x48	; 72
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     986:	17 c0       	rjmp	.+46     	; 0x9b6 <__stack+0xb7>
	 else {
		 send(" |");
     988:	80 e8       	ldi	r24, 0x80	; 128
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		 send("         ");
     990:	8b e5       	ldi	r24, 0x5B	; 91
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		 sendChar(rankConvert(p->rank[k]));
     998:	f6 01       	movw	r30, r12
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	ec 0f       	add	r30, r28
     9a0:	fd 1f       	adc	r31, r29
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	0e 94 ed 00 	call	0x1da	; 0x1da <rankConvert>
     9aa:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		 send(" |");
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	 else { send(" |           |"); }
	}
	sendChar(NL);
	/*BotRank(s)*/
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	c8 1a       	sub	r12, r24
     9ba:	d8 0a       	sbc	r13, r24
     9bc:	c0 16       	cp	r12, r16
     9be:	d1 06       	cpc	r13, r17
     9c0:	a0 f2       	brcs	.-88     	; 0x96a <__stack+0x6b>
		 send("         ");
		 sendChar(rankConvert(p->rank[k]));
		 send(" |");
	 }
	}
	sendChar(NL);
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	/*Border(s)*/
    alignCenter(numCards*14);
     9c8:	c7 01       	movw	r24, r14
     9ca:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	for(k = 0; k < numCards; k++) {
     9ce:	c0 e0       	ldi	r28, 0x00	; 0
     9d0:	d0 e0       	ldi	r29, 0x00	; 0
     9d2:	05 c0       	rjmp	.+10     	; 0x9de <__stack+0xdf>
	 send(" +-----------+");
     9d4:	89 e3       	ldi	r24, 0x39	; 57
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	 }
	}
	sendChar(NL);
	/*Border(s)*/
    alignCenter(numCards*14);
	for(k = 0; k < numCards; k++) {
     9dc:	21 96       	adiw	r28, 0x01	; 1
     9de:	c0 17       	cp	r28, r16
     9e0:	d1 07       	cpc	r29, r17
     9e2:	c0 f3       	brcs	.-16     	; 0x9d4 <__stack+0xd5>
	 send(" +-----------+");
	}
	sendChar(NL);
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	SCREENFILL -= 10;
     9ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     9ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     9f2:	0a 97       	sbiw	r24, 0x0a	; 10
     9f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     9f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
}
     9fc:	df 91       	pop	r29
     9fe:	cf 91       	pop	r28
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	df 90       	pop	r13
     a0a:	cf 90       	pop	r12
     a0c:	bf 90       	pop	r11
     a0e:	af 90       	pop	r10
     a10:	08 95       	ret

00000a12 <dispUpper>:
    for (int i = (TERMWIDTH - strWidth)/2; i > 0; i--) {
        sendChar(' ');
    }
}

void dispUpper(int ID) {
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	2a 97       	sbiw	r28, 0x0a	; 10
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	7c 01       	movw	r14, r24
    char temp[6];
    hand *pA, *pB;
	if (ID == DEALER) {
     a30:	89 2b       	or	r24, r25
     a32:	49 f4       	brne	.+18     	; 0xa46 <dispUpper+0x34>
		send("DEALER'S TURN.  ");
     a34:	83 e7       	ldi	r24, 0x73	; 115
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        ID = 4;
     a3c:	68 94       	set
     a3e:	ee 24       	eor	r14, r14
     a40:	e2 f8       	bld	r14, 2
     a42:	f1 2c       	mov	r15, r1
     a44:	0c c0       	rjmp	.+24     	; 0xa5e <dispUpper+0x4c>
	} else {
		send("PLAYER ");
     a46:	84 e8       	ldi	r24, 0x84	; 132
     a48:	92 e0       	ldi	r25, 0x02	; 2
     a4a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		sendChar(ID + ASCII_NUM);
     a4e:	80 e3       	ldi	r24, 0x30	; 48
     a50:	8e 0d       	add	r24, r14
     a52:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		send("'S TURN.");
     a56:	8c e8       	ldi	r24, 0x8C	; 140
     a58:	92 e0       	ldi	r25, 0x02	; 2
     a5a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    }
    send("				");
     a5e:	85 e9       	ldi	r24, 0x95	; 149
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>

    for (int i = 1; i <= ID; i++) {
     a66:	01 e0       	ldi	r16, 0x01	; 1
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	43 c0       	rjmp	.+134    	; 0xaf2 <dispUpper+0xe0>
        selectPlayer(i, &pA, &pB);
     a6c:	ae 01       	movw	r20, r28
     a6e:	47 5f       	subi	r20, 0xF7	; 247
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	be 01       	movw	r22, r28
     a74:	69 5f       	subi	r22, 0xF9	; 249
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	c8 01       	movw	r24, r16
     a7a:	0e 94 87 02 	call	0x50e	; 0x50e <selectPlayer>
        send("Player ");
     a7e:	8d e5       	ldi	r24, 0x5D	; 93
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		sendChar(i + ASCII_NUM);
     a86:	80 e3       	ldi	r24, 0x30	; 48
     a88:	80 0f       	add	r24, r16
     a8a:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		send("'s hand: [");
     a8e:	8a e9       	ldi	r24, 0x9A	; 154
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        itoa(pA->handvalue,temp,10);
     a96:	ef 81       	ldd	r30, Y+7	; 0x07
     a98:	f8 85       	ldd	r31, Y+8	; 0x08
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     a9a:	4a e0       	ldi	r20, 0x0A	; 10
     a9c:	be 01       	movw	r22, r28
     a9e:	6f 5f       	subi	r22, 0xFF	; 255
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	86 ad       	ldd	r24, Z+62	; 0x3e
     aa4:	97 ad       	ldd	r25, Z+63	; 0x3f
     aa6:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
        send(temp);
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        
        if (!pB->empty) {
     ab2:	e9 85       	ldd	r30, Y+9	; 0x09
     ab4:	fa 85       	ldd	r31, Y+10	; 0x0a
     ab6:	ec 5b       	subi	r30, 0xBC	; 188
     ab8:	ff 4f       	sbci	r31, 0xFF	; 255
     aba:	80 81       	ld	r24, Z
     abc:	91 81       	ldd	r25, Z+1	; 0x01
     abe:	89 2b       	or	r24, r25
     ac0:	91 f4       	brne	.+36     	; 0xae6 <dispUpper+0xd4>
            send("][");
     ac2:	85 ea       	ldi	r24, 0xA5	; 165
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            itoa(pB->handvalue,temp,10);
     aca:	e9 85       	ldd	r30, Y+9	; 0x09
     acc:	fa 85       	ldd	r31, Y+10	; 0x0a
     ace:	4a e0       	ldi	r20, 0x0A	; 10
     ad0:	be 01       	movw	r22, r28
     ad2:	6f 5f       	subi	r22, 0xFF	; 255
     ad4:	7f 4f       	sbci	r23, 0xFF	; 255
     ad6:	86 ad       	ldd	r24, Z+62	; 0x3e
     ad8:	97 ad       	ldd	r25, Z+63	; 0x3f
     ada:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
            send(temp);
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        }
        send("]	");
     ae6:	88 ea       	ldi	r24, 0xA8	; 168
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		sendChar(ID + ASCII_NUM);
		send("'S TURN.");
    }
    send("				");

    for (int i = 1; i <= ID; i++) {
     aee:	0f 5f       	subi	r16, 0xFF	; 255
     af0:	1f 4f       	sbci	r17, 0xFF	; 255
     af2:	e0 16       	cp	r14, r16
     af4:	f1 06       	cpc	r15, r17
     af6:	0c f0       	brlt	.+2      	; 0xafa <dispUpper+0xe8>
     af8:	b9 cf       	rjmp	.-142    	; 0xa6c <dispUpper+0x5a>
            itoa(pB->handvalue,temp,10);
            send(temp);
        }
        send("]	");
    }
    sendChar(NL);
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    sendChar(NL);
     b00:	8a e0       	ldi	r24, 0x0A	; 10
     b02:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    alignCenter(18);
     b06:	82 e1       	ldi	r24, 0x12	; 18
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
    send("Dealer is showing:");
     b0e:	8b ea       	ldi	r24, 0xAB	; 171
     b10:	92 e0       	ldi	r25, 0x02	; 2
     b12:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    sendChar(NL);
     b16:	8a e0       	ldi	r24, 0x0A	; 10
     b18:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    SCREENFILL -= 3;
     b1c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     b20:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     b24:	03 97       	sbiw	r24, 0x03	; 3
     b26:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     b2a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>

    cardPrint(&dealer);
     b2e:	8e e4       	ldi	r24, 0x4E	; 78
     b30:	94 e0       	ldi	r25, 0x04	; 4
     b32:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
}
     b36:	2a 96       	adiw	r28, 0x0a	; 10
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret

00000b50 <dispIntro>:

void dispIntro() {
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    SCREENFILL = TERMHEIGHT;
     b54:	cc e2       	ldi	r28, 0x2C	; 44
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <SCREENFILL+0x1>
     b5c:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <SCREENFILL>
    fillScreen(10);
     b60:	8a e0       	ldi	r24, 0x0A	; 10
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    SCREENFILL -= 10;
     b68:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     b6c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     b70:	0a 97       	sbiw	r24, 0x0a	; 10
     b72:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     b76:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    alignCenter(45); send("WELCOME TO TOUCHLESS AUTOMATED PLAY BLACKJACK\n");
     b7a:	8d e2       	ldi	r24, 0x2D	; 45
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
     b82:	8e eb       	ldi	r24, 0xBE	; 190
     b84:	92 e0       	ldi	r25, 0x02	; 2
     b86:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	SCREENFILL--;
     b8a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     b8e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     b98:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
	fillScreen(SCREENFILL);
     b9c:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ba0:	2f ef       	ldi	r18, 0xFF	; 255
     ba2:	87 ea       	ldi	r24, 0xA7	; 167
     ba4:	91 e6       	ldi	r25, 0x61	; 97
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	80 40       	sbci	r24, 0x00	; 0
     baa:	90 40       	sbci	r25, 0x00	; 0
     bac:	e1 f7       	brne	.-8      	; 0xba6 <dispIntro+0x56>
     bae:	00 c0       	rjmp	.+0      	; 0xbb0 <dispIntro+0x60>
     bb0:	00 00       	nop
	_delay_ms(DELAY_READ);
    sendChar(NL);
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	
	SCREENFILL = TERMHEIGHT;
     bb8:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <SCREENFILL+0x1>
     bbc:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <SCREENFILL>
	fillScreen(10);
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
	SCREENFILL -= 10;
     bc8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     bcc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     bd0:	0a 97       	sbiw	r24, 0x0a	; 10
     bd2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     bd6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
	alignCenter(10);
     bda:	8a e0       	ldi	r24, 0x0A	; 10
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	send("CREATED BY\n");
     be2:	8d ee       	ldi	r24, 0xED	; 237
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	alignCenter(38);
     bea:	86 e2       	ldi	r24, 0x26	; 38
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
	send("Nathan Ramos, Kevin Lei, & Quinn Frady");
     bf2:	89 ef       	ldi	r24, 0xF9	; 249
     bf4:	92 e0       	ldi	r25, 0x02	; 2
     bf6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
	SCREENFILL -= 2;
     bfa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     bfe:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     c02:	02 97       	sbiw	r24, 0x02	; 2
     c04:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     c08:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
	fillScreen(SCREENFILL);
     c0c:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
     c10:	2f ef       	ldi	r18, 0xFF	; 255
     c12:	87 ea       	ldi	r24, 0xA7	; 167
     c14:	91 e6       	ldi	r25, 0x61	; 97
     c16:	21 50       	subi	r18, 0x01	; 1
     c18:	80 40       	sbci	r24, 0x00	; 0
     c1a:	90 40       	sbci	r25, 0x00	; 0
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <dispIntro+0xc6>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <dispIntro+0xd0>
     c20:	00 00       	nop
	_delay_ms(DELAY_READ);
    sendChar(NL);
     c22:	8a e0       	ldi	r24, 0x0A	; 10
     c24:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <dispBlank>:

void dispBlank() {
    // blank screen
	SCREENFILL = TERMHEIGHT;
     c2e:	8c e2       	ldi	r24, 0x2C	; 44
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     c36:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
	fillScreen(SCREENFILL);
     c3a:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	83 ed       	ldi	r24, 0xD3	; 211
     c42:	90 e3       	ldi	r25, 0x30	; 48
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <dispBlank+0x16>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <dispBlank+0x20>
     c4e:	00 00       	nop
	_delay_ms(DELAY_REFRESH);
    sendChar(NL);
     c50:	8a e0       	ldi	r24, 0x0A	; 10
     c52:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
     c56:	08 95       	ret

00000c58 <dispRound>:
}

void dispRound(int round) {
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	00 d0       	rcall	.+0      	; 0xc62 <dispRound+0xa>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <dispRound+0xc>
     c64:	1f 92       	push	r1
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	8c 01       	movw	r16, r24
    SCREENFILL = TERMHEIGHT;
     c6c:	8c e2       	ldi	r24, 0x2C	; 44
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     c74:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    fillScreen(12);
     c78:	8c e0       	ldi	r24, 0x0C	; 12
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
	SCREENFILL -= 12;
     c80:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     c84:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     c88:	0c 97       	sbiw	r24, 0x0c	; 12
     c8a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     c8e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    alignCenter(7);
     c92:	87 e0       	ldi	r24, 0x07	; 7
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
    send("Round ");
     c9a:	80 e2       	ldi	r24, 0x20	; 32
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     ca2:	4a e0       	ldi	r20, 0x0A	; 10
     ca4:	be 01       	movw	r22, r28
     ca6:	6f 5f       	subi	r22, 0xFF	; 255
     ca8:	7f 4f       	sbci	r23, 0xFF	; 255
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
    char str[5];
    itoa(round,str,10);
    send(str);
     cb0:	ce 01       	movw	r24, r28
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    fillScreen(SCREENFILL);
     cb8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     cbc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     cc0:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
     cc4:	2f ef       	ldi	r18, 0xFF	; 255
     cc6:	83 ed       	ldi	r24, 0xD3	; 211
     cc8:	90 e3       	ldi	r25, 0x30	; 48
     cca:	21 50       	subi	r18, 0x01	; 1
     ccc:	80 40       	sbci	r24, 0x00	; 0
     cce:	90 40       	sbci	r25, 0x00	; 0
     cd0:	e1 f7       	brne	.-8      	; 0xcca <dispRound+0x72>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <dispRound+0x7c>
     cd4:	00 00       	nop
    _delay_ms(DELAY_REFRESH);
    sendChar(NL); 
     cd6:	8a e0       	ldi	r24, 0x0A	; 10
     cd8:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	1f 91       	pop	r17
     cec:	0f 91       	pop	r16
     cee:	08 95       	ret

00000cf0 <dispTurn>:

void dispTurn(int ID) {
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
    SCREENFILL = TERMHEIGHT;
     cf6:	8c e2       	ldi	r24, 0x2C	; 44
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     cfe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    fillScreen(12);
     d02:	8c e0       	ldi	r24, 0x0C	; 12
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
	SCREENFILL -= 12;
     d0a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     d0e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     d12:	0c 97       	sbiw	r24, 0x0c	; 12
     d14:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     d18:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    if (ID == DEALER) {
     d1c:	20 97       	sbiw	r28, 0x00	; 0
     d1e:	49 f4       	brne	.+18     	; 0xd32 <dispTurn+0x42>
        alignCenter(13);
     d20:	8d e0       	ldi	r24, 0x0D	; 13
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
        send ("DEALER'S TURN");
     d28:	87 e2       	ldi	r24, 0x27	; 39
     d2a:	93 e0       	ldi	r25, 0x03	; 3
     d2c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     d30:	10 c0       	rjmp	.+32     	; 0xd52 <dispTurn+0x62>
    } else {
        alignCenter(15);
     d32:	8f e0       	ldi	r24, 0x0F	; 15
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
        send("PLAYER ");
     d3a:	84 e8       	ldi	r24, 0x84	; 132
     d3c:	92 e0       	ldi	r25, 0x02	; 2
     d3e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        sendChar(ID + ASCII_NUM);
     d42:	8c 2f       	mov	r24, r28
     d44:	80 5d       	subi	r24, 0xD0	; 208
     d46:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        send("'S TURN");
     d4a:	8d e2       	ldi	r24, 0x2D	; 45
     d4c:	93 e0       	ldi	r25, 0x03	; 3
     d4e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    }
    fillScreen(SCREENFILL);
     d52:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     d56:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     d5a:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
     d5e:	2f ef       	ldi	r18, 0xFF	; 255
     d60:	83 ed       	ldi	r24, 0xD3	; 211
     d62:	90 e3       	ldi	r25, 0x30	; 48
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	80 40       	sbci	r24, 0x00	; 0
     d68:	90 40       	sbci	r25, 0x00	; 0
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <dispTurn+0x74>
     d6c:	00 c0       	rjmp	.+0      	; 0xd6e <dispTurn+0x7e>
     d6e:	00 00       	nop
    _delay_ms(DELAY_REFRESH);  
    sendChar(NL);
     d70:	8a e0       	ldi	r24, 0x0A	; 10
     d72:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
}
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <dispResults>:

void dispResults() {
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	2a 97       	sbiw	r28, 0x0a	; 10
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
    SCREENFILL = TERMHEIGHT;
     d94:	8c e2       	ldi	r24, 0x2C	; 44
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     d9c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    dealer.isFaceDown[0] = 0;
     da0:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <dealer+0x25>
     da4:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <dealer+0x24>
    dispUpper(DEALER);
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
    sendChar(NL);
     db0:	8a e0       	ldi	r24, 0x0A	; 10
     db2:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    if (dealer.busted) {
     db6:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <dealer+0x40>
     dba:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <dealer+0x41>
     dbe:	89 2b       	or	r24, r25
     dc0:	49 f0       	breq	.+18     	; 0xdd4 <dispResults+0x58>
        alignCenter(14);
     dc2:	8e e0       	ldi	r24, 0x0E	; 14
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
        send("Dealer BUSTED!");
     dca:	85 e3       	ldi	r24, 0x35	; 53
     dcc:	93 e0       	ldi	r25, 0x03	; 3
     dce:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     dd2:	16 c0       	rjmp	.+44     	; 0xe00 <dispResults+0x84>
    } else {
        alignCenter(20);
     dd4:	84 e1       	ldi	r24, 0x14	; 20
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
        send("Dealer stays with ");
     ddc:	84 e4       	ldi	r24, 0x44	; 68
     dde:	93 e0       	ldi	r25, 0x03	; 3
     de0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     de4:	4a e0       	ldi	r20, 0x0A	; 10
     de6:	be 01       	movw	r22, r28
     de8:	6b 5f       	subi	r22, 0xFB	; 251
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <dealer+0x3e>
     df0:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <dealer+0x3f>
     df4:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
        char d[3];
		itoa(dealer.handvalue,d,10);
        send(d);
     df8:	ce 01       	movw	r24, r28
     dfa:	05 96       	adiw	r24, 0x05	; 5
     dfc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    }
    sendChar(NL);
     e00:	8a e0       	ldi	r24, 0x0A	; 10
     e02:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    sendChar(NL);
     e06:	8a e0       	ldi	r24, 0x0A	; 10
     e08:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    sendChar(NL);
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    SCREENFILL -= 4;
     e12:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     e16:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     e1a:	04 97       	sbiw	r24, 0x04	; 4
     e1c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     e20:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>

    hand *pA, *pB;
    for (int ID = P1; ID <= P4; ID++) {
     e24:	01 e0       	ldi	r16, 0x01	; 1
     e26:	10 e0       	ldi	r17, 0x00	; 0
     e28:	c3 c0       	rjmp	.+390    	; 0xfb0 <dispResults+0x234>
        selectPlayer (ID, &pA, &pB);
     e2a:	ae 01       	movw	r20, r28
     e2c:	4d 5f       	subi	r20, 0xFD	; 253
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	be 01       	movw	r22, r28
     e32:	6f 5f       	subi	r22, 0xFF	; 255
     e34:	7f 4f       	sbci	r23, 0xFF	; 255
     e36:	c8 01       	movw	r24, r16
     e38:	0e 94 87 02 	call	0x50e	; 0x50e <selectPlayer>
        send("      Player ");
     e3c:	87 e5       	ldi	r24, 0x57	; 87
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        sendChar(ID + ASCII_NUM);
     e44:	80 e3       	ldi	r24, 0x30	; 48
     e46:	80 0f       	add	r24, r16
     e48:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        if (pA->busted) {
     e4c:	e9 81       	ldd	r30, Y+1	; 0x01
     e4e:	fa 81       	ldd	r31, Y+2	; 0x02
     e50:	df 01       	movw	r26, r30
     e52:	a0 5c       	subi	r26, 0xC0	; 192
     e54:	bf 4f       	sbci	r27, 0xFF	; 255
     e56:	8d 91       	ld	r24, X+
     e58:	9c 91       	ld	r25, X
     e5a:	89 2b       	or	r24, r25
     e5c:	29 f0       	breq	.+10     	; 0xe68 <dispResults+0xec>
            send(" LOST with ");
     e5e:	85 e6       	ldi	r24, 0x65	; 101
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     e66:	2e c0       	rjmp	.+92     	; 0xec4 <dispResults+0x148>
        } else if (pA->handvalue == dealer.handvalue) {
     e68:	26 ad       	ldd	r18, Z+62	; 0x3e
     e6a:	37 ad       	ldd	r19, Z+63	; 0x3f
     e6c:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <dealer+0x3e>
     e70:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <dealer+0x3f>
     e74:	28 17       	cp	r18, r24
     e76:	39 07       	cpc	r19, r25
     e78:	29 f4       	brne	.+10     	; 0xe84 <dispResults+0x108>
            send(" PUSHED with ");
     e7a:	81 e7       	ldi	r24, 0x71	; 113
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     e82:	20 c0       	rjmp	.+64     	; 0xec4 <dispResults+0x148>
        } else if (pA->handvalue < dealer.handvalue && !dealer.busted) {
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	5c f4       	brge	.+22     	; 0xea0 <dispResults+0x124>
     e8a:	40 91 8e 04 	lds	r20, 0x048E	; 0x80048e <dealer+0x40>
     e8e:	50 91 8f 04 	lds	r21, 0x048F	; 0x80048f <dealer+0x41>
     e92:	45 2b       	or	r20, r21
     e94:	29 f4       	brne	.+10     	; 0xea0 <dispResults+0x124>
            send(" LOST with ");
     e96:	85 e6       	ldi	r24, 0x65	; 101
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     e9e:	12 c0       	rjmp	.+36     	; 0xec4 <dispResults+0x148>
        } else if (pA->handvalue > dealer.handvalue || dealer.busted) {
     ea0:	82 17       	cp	r24, r18
     ea2:	93 07       	cpc	r25, r19
     ea4:	34 f0       	brlt	.+12     	; 0xeb2 <dispResults+0x136>
     ea6:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <dealer+0x40>
     eaa:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <dealer+0x41>
     eae:	89 2b       	or	r24, r25
     eb0:	29 f0       	breq	.+10     	; 0xebc <dispResults+0x140>
            send(" WON with ");
     eb2:	8f e7       	ldi	r24, 0x7F	; 127
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <dispResults+0x148>
        } else {
            send("ERROR in dispResults()");
     ebc:	8a e8       	ldi	r24, 0x8A	; 138
     ebe:	93 e0       	ldi	r25, 0x03	; 3
     ec0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        }
        char temp[3];
		itoa(pA->handvalue,temp,10);
     ec4:	e9 81       	ldd	r30, Y+1	; 0x01
     ec6:	fa 81       	ldd	r31, Y+2	; 0x02
     ec8:	4a e0       	ldi	r20, 0x0A	; 10
     eca:	be 01       	movw	r22, r28
     ecc:	68 5f       	subi	r22, 0xF8	; 248
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	86 ad       	ldd	r24, Z+62	; 0x3e
     ed2:	97 ad       	ldd	r25, Z+63	; 0x3f
     ed4:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
		send(temp);
     ed8:	ce 01       	movw	r24, r28
     eda:	08 96       	adiw	r24, 0x08	; 8
     edc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        if (!pB->empty) {
     ee0:	eb 81       	ldd	r30, Y+3	; 0x03
     ee2:	fc 81       	ldd	r31, Y+4	; 0x04
     ee4:	ec 5b       	subi	r30, 0xBC	; 188
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	89 2b       	or	r24, r25
     eee:	09 f0       	breq	.+2      	; 0xef2 <dispResults+0x176>
     ef0:	4e c0       	rjmp	.+156    	; 0xf8e <dispResults+0x212>
            send (" and");
     ef2:	81 ea       	ldi	r24, 0xA1	; 161
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            if (pB->busted) {
     efa:	eb 81       	ldd	r30, Y+3	; 0x03
     efc:	fc 81       	ldd	r31, Y+4	; 0x04
     efe:	df 01       	movw	r26, r30
     f00:	a0 5c       	subi	r26, 0xC0	; 192
     f02:	bf 4f       	sbci	r27, 0xFF	; 255
     f04:	8d 91       	ld	r24, X+
     f06:	9c 91       	ld	r25, X
     f08:	89 2b       	or	r24, r25
     f0a:	29 f0       	breq	.+10     	; 0xf16 <dispResults+0x19a>
                send(" LOST with ");
     f0c:	85 e6       	ldi	r24, 0x65	; 101
     f0e:	93 e0       	ldi	r25, 0x03	; 3
     f10:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     f14:	2e c0       	rjmp	.+92     	; 0xf72 <dispResults+0x1f6>
            } else if (pB->handvalue == dealer.handvalue) {
     f16:	26 ad       	ldd	r18, Z+62	; 0x3e
     f18:	37 ad       	ldd	r19, Z+63	; 0x3f
     f1a:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <dealer+0x3e>
     f1e:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <dealer+0x3f>
     f22:	28 17       	cp	r18, r24
     f24:	39 07       	cpc	r19, r25
     f26:	29 f4       	brne	.+10     	; 0xf32 <dispResults+0x1b6>
                send(" PUSHED with ");
     f28:	81 e7       	ldi	r24, 0x71	; 113
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     f30:	20 c0       	rjmp	.+64     	; 0xf72 <dispResults+0x1f6>
            } else if (pB->handvalue < dealer.handvalue && !dealer.busted) {
     f32:	28 17       	cp	r18, r24
     f34:	39 07       	cpc	r19, r25
     f36:	5c f4       	brge	.+22     	; 0xf4e <dispResults+0x1d2>
     f38:	40 91 8e 04 	lds	r20, 0x048E	; 0x80048e <dealer+0x40>
     f3c:	50 91 8f 04 	lds	r21, 0x048F	; 0x80048f <dealer+0x41>
     f40:	45 2b       	or	r20, r21
     f42:	29 f4       	brne	.+10     	; 0xf4e <dispResults+0x1d2>
                send(" LOST with ");
     f44:	85 e6       	ldi	r24, 0x65	; 101
     f46:	93 e0       	ldi	r25, 0x03	; 3
     f48:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     f4c:	12 c0       	rjmp	.+36     	; 0xf72 <dispResults+0x1f6>
            } else if (pB->handvalue > dealer.handvalue || dealer.busted) {
     f4e:	82 17       	cp	r24, r18
     f50:	93 07       	cpc	r25, r19
     f52:	34 f0       	brlt	.+12     	; 0xf60 <dispResults+0x1e4>
     f54:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <dealer+0x40>
     f58:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <dealer+0x41>
     f5c:	89 2b       	or	r24, r25
     f5e:	29 f0       	breq	.+10     	; 0xf6a <dispResults+0x1ee>
                send(" WON with ");
     f60:	8f e7       	ldi	r24, 0x7F	; 127
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <dispResults+0x1f6>
            } else {
                send("ERROR in dispResults()");
     f6a:	8a e8       	ldi	r24, 0x8A	; 138
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            }
            char temp[3];
		    itoa(pB->handvalue,temp,10);
     f72:	eb 81       	ldd	r30, Y+3	; 0x03
     f74:	fc 81       	ldd	r31, Y+4	; 0x04
     f76:	4a e0       	ldi	r20, 0x0A	; 10
     f78:	be 01       	movw	r22, r28
     f7a:	6b 5f       	subi	r22, 0xFB	; 251
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	86 ad       	ldd	r24, Z+62	; 0x3e
     f80:	97 ad       	ldd	r25, Z+63	; 0x3f
     f82:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
		    send(temp);
     f86:	ce 01       	movw	r24, r28
     f88:	05 96       	adiw	r24, 0x05	; 5
     f8a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        }
        sendChar(NL);
     f8e:	8a e0       	ldi	r24, 0x0A	; 10
     f90:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        sendChar(NL);
     f94:	8a e0       	ldi	r24, 0x0A	; 10
     f96:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        SCREENFILL -= 2;
     f9a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     f9e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     fa2:	02 97       	sbiw	r24, 0x02	; 2
     fa4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
     fa8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    sendChar(NL);
    sendChar(NL);
    SCREENFILL -= 4;

    hand *pA, *pB;
    for (int ID = P1; ID <= P4; ID++) {
     fac:	0f 5f       	subi	r16, 0xFF	; 255
     fae:	1f 4f       	sbci	r17, 0xFF	; 255
     fb0:	05 30       	cpi	r16, 0x05	; 5
     fb2:	11 05       	cpc	r17, r1
     fb4:	0c f4       	brge	.+2      	; 0xfb8 <dispResults+0x23c>
     fb6:	39 cf       	rjmp	.-398    	; 0xe2a <dispResults+0xae>
        }
        sendChar(NL);
        sendChar(NL);
        SCREENFILL -= 2;
    }
    fillScreen(SCREENFILL);
     fb8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
     fbc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
     fc0:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
     fc4:	2f ef       	ldi	r18, 0xFF	; 255
     fc6:	83 e2       	ldi	r24, 0x23	; 35
     fc8:	94 ef       	ldi	r25, 0xF4	; 244
     fca:	21 50       	subi	r18, 0x01	; 1
     fcc:	80 40       	sbci	r24, 0x00	; 0
     fce:	90 40       	sbci	r25, 0x00	; 0
     fd0:	e1 f7       	brne	.-8      	; 0xfca <dispResults+0x24e>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <dispResults+0x258>
     fd4:	00 00       	nop
    _delay_ms(DELAY_RESULTS);
	sendChar(NL);
     fd6:	8a e0       	ldi	r24, 0x0A	; 10
     fd8:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
	return;
}
     fdc:	2a 96       	adiw	r28, 0x0a	; 10
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	08 95       	ret

00000ff2 <split>:
		else { p->busted = 1; }
	}
    p->empty = 0;
} 

void split(int ID) {
     ff2:	0f 93       	push	r16
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	27 97       	sbiw	r28, 0x07	; 7
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	8c 01       	movw	r16, r24
    hand *pA, *pB;
    selectPlayer(ID, &pA, &pB);
    100c:	ae 01       	movw	r20, r28
    100e:	4d 5f       	subi	r20, 0xFD	; 253
    1010:	5f 4f       	sbci	r21, 0xFF	; 255
    1012:	be 01       	movw	r22, r28
    1014:	6f 5f       	subi	r22, 0xFF	; 255
    1016:	7f 4f       	sbci	r23, 0xFF	; 255
    1018:	0e 94 87 02 	call	0x50e	; 0x50e <selectPlayer>
    SCREENFILL = TERMHEIGHT;
    101c:	8c e2       	ldi	r24, 0x2C	; 44
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1024:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    dispUpper(ID);
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
    sendChar(NL);
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    alignCenter(23);
    1034:	87 e1       	ldi	r24, 0x17	; 23
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
    send("Your current hand: [");
    103c:	86 ea       	ldi	r24, 0xA6	; 166
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    char temp[3];
    itoa(pA->handvalue,temp,10);
    1044:	e9 81       	ldd	r30, Y+1	; 0x01
    1046:	fa 81       	ldd	r31, Y+2	; 0x02
    1048:	4a e0       	ldi	r20, 0x0A	; 10
    104a:	be 01       	movw	r22, r28
    104c:	6b 5f       	subi	r22, 0xFB	; 251
    104e:	7f 4f       	sbci	r23, 0xFF	; 255
    1050:	86 ad       	ldd	r24, Z+62	; 0x3e
    1052:	97 ad       	ldd	r25, Z+63	; 0x3f
    1054:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
    send(temp);
    1058:	ce 01       	movw	r24, r28
    105a:	05 96       	adiw	r24, 0x05	; 5
    105c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    send("]");
    1060:	8b eb       	ldi	r24, 0xBB	; 187
    1062:	93 e0       	ldi	r25, 0x03	; 3
    1064:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    sendChar(NL);
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    cardPrint(&(*pA));
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
    SCREENFILL -= 2;
    1076:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    107a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    107e:	02 97       	sbiw	r24, 0x02	; 2
    1080:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1084:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    sendChar(NL);
    1088:	8a e0       	ldi	r24, 0x0A	; 10
    108a:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    sendChar(NL);
    108e:	8a e0       	ldi	r24, 0x0A	; 10
    1090:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    SCREENFILL -= 2;
    1094:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1098:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    109c:	02 97       	sbiw	r24, 0x02	; 2
    109e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    10a2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
    alignCenter(10);
    10a6:	8a e0       	ldi	r24, 0x0A	; 10
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
    send("You split!");
    10ae:	8d eb       	ldi	r24, 0xBD	; 189
    10b0:	93 e0       	ldi	r25, 0x03	; 3
    10b2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    fillScreen(SCREENFILL);
    10b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    10ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    10be:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    int cardR = pA->rank[1];
    10c2:	e9 81       	ldd	r30, Y+1	; 0x01
    10c4:	fa 81       	ldd	r31, Y+2	; 0x02
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    char cardS = pA->suit[1];
    10ca:	21 8d       	ldd	r18, Z+25	; 0x19
    pB->rank[0] = cardR;
    10cc:	eb 81       	ldd	r30, Y+3	; 0x03
    10ce:	fc 81       	ldd	r31, Y+4	; 0x04
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	80 83       	st	Z, r24
    pB->suit[0] = cardS;
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	58 96       	adiw	r26, 0x18	; 24
    10da:	2c 93       	st	X, r18
    10dc:	58 97       	sbiw	r26, 0x18	; 24
    pB->handsize++;
    10de:	dc 96       	adiw	r26, 0x3c	; 60
    10e0:	2d 91       	ld	r18, X+
    10e2:	3c 91       	ld	r19, X
    10e4:	dd 97       	sbiw	r26, 0x3d	; 61
    10e6:	2f 5f       	subi	r18, 0xFF	; 255
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	dd 96       	adiw	r26, 0x3d	; 61
    10ec:	3c 93       	st	X, r19
    10ee:	2e 93       	st	-X, r18
    10f0:	dc 97       	sbiw	r26, 0x3c	; 60
    pB->handvalue += cardR;
    10f2:	de 96       	adiw	r26, 0x3e	; 62
    10f4:	2d 91       	ld	r18, X+
    10f6:	3c 91       	ld	r19, X
    10f8:	df 97       	sbiw	r26, 0x3f	; 63
    10fa:	28 0f       	add	r18, r24
    10fc:	39 1f       	adc	r19, r25
    10fe:	df 96       	adiw	r26, 0x3f	; 63
    1100:	3c 93       	st	X, r19
    1102:	2e 93       	st	-X, r18
    1104:	de 97       	sbiw	r26, 0x3e	; 62
    pA->handsize--;
    1106:	49 81       	ldd	r20, Y+1	; 0x01
    1108:	5a 81       	ldd	r21, Y+2	; 0x02
    110a:	fa 01       	movw	r30, r20
    110c:	24 ad       	ldd	r18, Z+60	; 0x3c
    110e:	35 ad       	ldd	r19, Z+61	; 0x3d
    1110:	21 50       	subi	r18, 0x01	; 1
    1112:	31 09       	sbc	r19, r1
    1114:	35 af       	std	Z+61, r19	; 0x3d
    1116:	24 af       	std	Z+60, r18	; 0x3c
    pA->handvalue -= cardR;
    1118:	26 ad       	ldd	r18, Z+62	; 0x3e
    111a:	37 ad       	ldd	r19, Z+63	; 0x3f
    111c:	28 1b       	sub	r18, r24
    111e:	39 0b       	sbc	r19, r25
    1120:	37 af       	std	Z+63, r19	; 0x3f
    1122:	26 af       	std	Z+62, r18	; 0x3e
    if (cardR == 1) {
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	b1 f4       	brne	.+44     	; 0x1154 <split+0x162>
        pB->soft = 1;
    1128:	cd 01       	movw	r24, r26
    112a:	8e 5b       	subi	r24, 0xBE	; 190
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	fc 01       	movw	r30, r24
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
        pB->handvalue = 11;
    1138:	8b e0       	ldi	r24, 0x0B	; 11
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	df 96       	adiw	r26, 0x3f	; 63
    113e:	9c 93       	st	X, r25
    1140:	8e 93       	st	-X, r24
    1142:	de 97       	sbiw	r26, 0x3e	; 62
        pA->soft = 1;
    1144:	da 01       	movw	r26, r20
    1146:	ae 5b       	subi	r26, 0xBE	; 190
    1148:	bf 4f       	sbci	r27, 0xFF	; 255
    114a:	2d 93       	st	X+, r18
    114c:	3c 93       	st	X, r19
        pA->handvalue = 11;
    114e:	fa 01       	movw	r30, r20
    1150:	97 af       	std	Z+63, r25	; 0x3f
    1152:	86 af       	std	Z+62, r24	; 0x3e
    }
    dealCard(&(*pA));
    1154:	ca 01       	movw	r24, r20
    1156:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
    dealCard(&(*pB));
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
    1162:	ff ef       	ldi	r31, 0xFF	; 255
    1164:	21 ee       	ldi	r18, 0xE1	; 225
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	f1 50       	subi	r31, 0x01	; 1
    116a:	20 40       	sbci	r18, 0x00	; 0
    116c:	80 40       	sbci	r24, 0x00	; 0
    116e:	e1 f7       	brne	.-8      	; 0x1168 <split+0x176>
    1170:	00 c0       	rjmp	.+0      	; 0x1172 <split+0x180>
    1172:	00 00       	nop
    _delay_ms(DELAY_INPUT);
    sendChar(NL);
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
}
    117a:	27 96       	adiw	r28, 0x07	; 7
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	1f 91       	pop	r17
    118c:	0f 91       	pop	r16
    118e:	08 95       	ret

00001190 <USS_init>:
	
	//Define Pins
	#define Trigger_pin PB1	//This is the UltraSonic Sensors Trigger Pin
	
	//GPIO Programming
	DDRB = 0x02;	//Output for Ultrasonic Trigger Pin
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	84 b9       	out	0x04, r24	; 4
	
	//Timer 1 Initialization
	TIMSK1 = (1 << TOIE1);	//Enable Timer1 overflow interrupts
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1A = 0;				//Set all bit to zero Normal operation
    119a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	
	//Enable Global Interrupts
	sei();
    119e:	78 94       	sei
    11a0:	08 95       	ret

000011a2 <USS_distance>:
}

double USS_distance() {
    TCCR1B |= (1 << CS10);  //Prescaler, Start Timer
    11a2:	e1 e8       	ldi	r30, 0x81	; 129
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	81 60       	ori	r24, 0x01	; 1
    11aa:	80 83       	st	Z, r24
	/*Declare variables*/
	long count;				//var to store the received input from ultrasonic
	double distance;	//var to store the received distance from the USART
	
	/*Receive the UltraSonic sensors values*/
	PORTB |= (1 << Trigger_pin);			//Begin Trigger
    11ac:	85 b1       	in	r24, 0x05	; 5
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11b2:	8a e1       	ldi	r24, 0x1A	; 26
    11b4:	8a 95       	dec	r24
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <USS_distance+0x12>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <USS_distance+0x18>
	_delay_us(10);
	PORTB &= (~(1 << Trigger_pin));			//Cease Trigger
    11ba:	85 b1       	in	r24, 0x05	; 5
    11bc:	8d 7f       	andi	r24, 0xFD	; 253
    11be:	85 b9       	out	0x05, r24	; 5
	TCNT1 = 0;								//Clear Timer counter
    11c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    11c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = (1 << ICES1) | (1 << CS10);	//Capture rising edge, prescaler 1
    11c8:	81 e4       	ldi	r24, 0x41	; 65
    11ca:	80 83       	st	Z, r24
	TIFR1 = (1 << ICF1) | (1 << TOV1);		// Clear ICP flag & Clear Timer Overflow flag
    11cc:	81 e2       	ldi	r24, 0x21	; 33
    11ce:	86 bb       	out	0x16, r24	; 22
	
	/*Calculate width of Echo by Timer 1 ICP*/
	while ((TIFR1 & (1 << ICF1)) == 0);		// Wait for rising edge
    11d0:	b5 9b       	sbis	0x16, 5	; 22
    11d2:	fe cf       	rjmp	.-4      	; 0x11d0 <USS_distance+0x2e>
	TCNT1 = 0;								// Clear Timer counter
    11d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    11d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B = (1 << CS10);					// Capture falling edge
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIFR1 = (1 << ICF1) | (1 << TOV1);		// Clear ICP flag & Clear Timer Overflow flag
    11e2:	81 e2       	ldi	r24, 0x21	; 33
    11e4:	86 bb       	out	0x16, r24	; 22
	timerOverflow = 0;						// Clear Timer overflow count
    11e6:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <__data_end+0x1>
    11ea:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <__data_end>
	while ((TIFR1 & (1 << ICF1)) == 0);		//Wait for falling edge
    11ee:	b5 9b       	sbis	0x16, 5	; 22
    11f0:	fe cf       	rjmp	.-4      	; 0x11ee <USS_distance+0x4c>
	count = ICR1 + (65535 * timerOverflow);	//Take value of capture register and calculate width
    11f2:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    11f6:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
	distance = (double) count / (HCSR04CONST*F_CPU/1000000);		//Calculate Distance
    11fe:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__floatsisf>
    1202:	2d ec       	ldi	r18, 0xCD	; 205
    1204:	3c ec       	ldi	r19, 0xCC	; 204
    1206:	48 ee       	ldi	r20, 0xE8	; 232
    1208:	53 e4       	ldi	r21, 0x43	; 67
    120a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__divsf3>
	
	TCCR1B ^= (1 << CS10);  //No prescaler, Stop Timer
    120e:	e1 e8       	ldi	r30, 0x81	; 129
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	30 81       	ld	r19, Z
    1214:	21 e0       	ldi	r18, 0x01	; 1
    1216:	23 27       	eor	r18, r19
    1218:	20 83       	st	Z, r18
	return distance;
}
    121a:	08 95       	ret

0000121c <USS_move>:

int USS_move() {
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    int countS = 0;
    int countH = 0;
    int countN = 0;
    double distance = USS_distance();
    1230:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <USS_distance>
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
}

int USS_move() {
    int countS = 0;
    int countH = 0;
    int countN = 0;
    1238:	c0 e0       	ldi	r28, 0x00	; 0
    123a:	d0 e0       	ldi	r29, 0x00	; 0
	return distance;
}

int USS_move() {
    int countS = 0;
    int countH = 0;
    123c:	00 e0       	ldi	r16, 0x00	; 0
    123e:	10 e0       	ldi	r17, 0x00	; 0
	TCCR1B ^= (1 << CS10);  //No prescaler, Stop Timer
	return distance;
}

int USS_move() {
    int countS = 0;
    1240:	a1 2c       	mov	r10, r1
    1242:	b1 2c       	mov	r11, r1
    int countN = 0;
    double distance = USS_distance();
    while(1) 
    {
        /*Determine what the chosen move was*/
        if (distance > DIST_HIT && distance < (DIST_HIT + WIDTH)) 
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	51 e4       	ldi	r21, 0x41	; 65
    124c:	c7 01       	movw	r24, r14
    124e:	b6 01       	movw	r22, r12
    1250:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__gesf2>
    1254:	18 16       	cp	r1, r24
    1256:	a4 f4       	brge	.+40     	; 0x1280 <USS_move+0x64>
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 ef       	ldi	r20, 0xF0	; 240
    125e:	51 e4       	ldi	r21, 0x41	; 65
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
    1268:	88 23       	and	r24, r24
    126a:	54 f4       	brge	.+20     	; 0x1280 <USS_move+0x64>
        {		//test for hit
            countS = countN = 0;	//reset the other move counters
            countH++;					//increment this moves counter
    126c:	0f 5f       	subi	r16, 0xFF	; 255
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
            if (countH > THRESHOLD) 
    1270:	09 3c       	cpi	r16, 0xC9	; 201
    1272:	11 05       	cpc	r17, r1
    1274:	a4 f5       	brge	.+104    	; 0x12de <USS_move+0xc2>
    while(1) 
    {
        /*Determine what the chosen move was*/
        if (distance > DIST_HIT && distance < (DIST_HIT + WIDTH)) 
        {		//test for hit
            countS = countN = 0;	//reset the other move counters
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	d0 e0       	ldi	r29, 0x00	; 0
    127a:	a1 2c       	mov	r10, r1
    127c:	b1 2c       	mov	r11, r1
    127e:	28 c0       	rjmp	.+80     	; 0x12d0 <USS_move+0xb4>
            if (countH > THRESHOLD) 
            {			
                return HIT;					//HIT
            }
        }
        else if (distance > DIST_STAY && distance < (DIST_STAY + WIDTH)) 
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4c e0       	ldi	r20, 0x0C	; 12
    1286:	52 e4       	ldi	r21, 0x42	; 66
    1288:	c7 01       	movw	r24, r14
    128a:	b6 01       	movw	r22, r12
    128c:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__gesf2>
    1290:	18 16       	cp	r1, r24
    1292:	b4 f4       	brge	.+44     	; 0x12c0 <USS_move+0xa4>
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	44 e6       	ldi	r20, 0x64	; 100
    129a:	52 e4       	ldi	r21, 0x42	; 66
    129c:	c7 01       	movw	r24, r14
    129e:	b6 01       	movw	r22, r12
    12a0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__cmpsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	64 f4       	brge	.+24     	; 0x12c0 <USS_move+0xa4>
        {	//test for stay
            countH = countN = 0;	//reset the other move counters
            countS++;					//increment this moves counter
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	a8 1a       	sub	r10, r24
    12ac:	b8 0a       	sbc	r11, r24
            if (countS > THRESHOLD) 
    12ae:	99 ec       	ldi	r25, 0xC9	; 201
    12b0:	a9 16       	cp	r10, r25
    12b2:	b1 04       	cpc	r11, r1
    12b4:	bc f4       	brge	.+46     	; 0x12e4 <USS_move+0xc8>
                return HIT;					//HIT
            }
        }
        else if (distance > DIST_STAY && distance < (DIST_STAY + WIDTH)) 
        {	//test for stay
            countH = countN = 0;	//reset the other move counters
    12b6:	c0 e0       	ldi	r28, 0x00	; 0
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
    12ba:	00 e0       	ldi	r16, 0x00	; 0
    12bc:	10 e0       	ldi	r17, 0x00	; 0
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <USS_move+0xb4>
            }
        }
        else 
        {										//if not hit or stay, OR if nothings happening
            countH = countS = 0;	//reset the other move counters
            countN++;					//increment this moves counter
    12c0:	21 96       	adiw	r28, 0x01	; 1
            if (countN > THRESHOLD) 
    12c2:	c9 3c       	cpi	r28, 0xC9	; 201
    12c4:	d1 05       	cpc	r29, r1
    12c6:	8c f4       	brge	.+34     	; 0x12ea <USS_move+0xce>
                return STAY;					//STAY
            }
        }
        else 
        {										//if not hit or stay, OR if nothings happening
            countH = countS = 0;	//reset the other move counters
    12c8:	00 e0       	ldi	r16, 0x00	; 0
    12ca:	10 e0       	ldi	r17, 0x00	; 0
    12cc:	a1 2c       	mov	r10, r1
    12ce:	b1 2c       	mov	r11, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d0:	8f ec       	ldi	r24, 0xCF	; 207
    12d2:	97 e0       	ldi	r25, 0x07	; 7
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <USS_move+0xb8>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <USS_move+0xbe>
    12da:	00 00       	nop
    12dc:	b3 cf       	rjmp	.-154    	; 0x1244 <USS_move+0x28>
        {		//test for hit
            countS = countN = 0;	//reset the other move counters
            countH++;					//increment this moves counter
            if (countH > THRESHOLD) 
            {			
                return HIT;					//HIT
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <USS_move+0xd2>
        {	//test for stay
            countH = countN = 0;	//reset the other move counters
            countS++;					//increment this moves counter
            if (countS > THRESHOLD) 
            {		
                return STAY;					//STAY
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <USS_move+0xd2>
        {										//if not hit or stay, OR if nothings happening
            countH = countS = 0;	//reset the other move counters
            countN++;					//increment this moves counter
            if (countN > THRESHOLD) 
            {		
                return NOACTION;					//NOACTION
    12ea:	83 e0       	ldi	r24, 0x03	; 3
    12ec:	90 e0       	ldi	r25, 0x00	; 0
            }
        }
        _delay_ms(1);
    }
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	08 95       	ret

00001304 <userInput>:
    _delay_ms(DELAY_INPUT);
    sendChar(NL);
}

int userInput() {
    while (USS_move() != NOACTION); // wait for USS input area to be cleared
    1304:	0e 94 0e 09 	call	0x121c	; 0x121c <USS_move>
    1308:	03 97       	sbiw	r24, 0x03	; 3
    130a:	e1 f7       	brne	.-8      	; 0x1304 <userInput>
	while (1) {
		/*_delay_ms(DELAY_INPUT);*/
		switch (USS_move()) {
    130c:	0e 94 0e 09 	call	0x121c	; 0x121c <USS_move>
    1310:	9c 01       	movw	r18, r24
    1312:	21 50       	subi	r18, 0x01	; 1
    1314:	31 09       	sbc	r19, r1
    1316:	22 30       	cpi	r18, 0x02	; 2
    1318:	31 05       	cpc	r19, r1
    131a:	c0 f7       	brcc	.-16     	; 0x130c <userInput+0x8>
			case STAY: return STAY;
			case HIT: return HIT;
			case NOACTION: break;
		}
	}
}
    131c:	08 95       	ret

0000131e <playTurn>:
	while (ADCSRA & (1 << ADSC)); // wait until ADC finishes
	ADCSRA ^= (1 << ADEN); // disable ADC
	return ADC;
}

void playTurn(int ID) {
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	2a 97       	sbiw	r28, 0x0a	; 10
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	8c 01       	movw	r16, r24
    hand *pA, *pB;
	int askSplit = 1;
    selectPlayer(ID, &pA, &pB);
    1340:	ae 01       	movw	r20, r28
    1342:	4d 5f       	subi	r20, 0xFD	; 253
    1344:	5f 4f       	sbci	r21, 0xFF	; 255
    1346:	be 01       	movw	r22, r28
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	0e 94 87 02 	call	0x50e	; 0x50e <selectPlayer>
	return ADC;
}

void playTurn(int ID) {
    hand *pA, *pB;
	int askSplit = 1;
    1350:	ee 24       	eor	r14, r14
    1352:	e3 94       	inc	r14
    1354:	f1 2c       	mov	r15, r1
    selectPlayer(ID, &pA, &pB);
    while (1) {
		SCREENFILL = TERMHEIGHT;
    1356:	0f 2e       	mov	r0, r31
    1358:	fc e2       	ldi	r31, 0x2C	; 44
    135a:	cf 2e       	mov	r12, r31
    135c:	d1 2c       	mov	r13, r1
    135e:	f0 2d       	mov	r31, r0
    1360:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <SCREENFILL+0x1>
    1364:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <SCREENFILL>
		dispUpper(ID);
    1368:	c8 01       	movw	r24, r16
    136a:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
		sendChar(NL);
    136e:	8a e0       	ldi	r24, 0x0A	; 10
    1370:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        alignCenter(23);
    1374:	87 e1       	ldi	r24, 0x17	; 23
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
		send("Your current hand: [");
    137c:	86 ea       	ldi	r24, 0xA6	; 166
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		char temp[3];
		itoa(pA->handvalue,temp,10);
    1384:	e9 81       	ldd	r30, Y+1	; 0x01
    1386:	fa 81       	ldd	r31, Y+2	; 0x02
    1388:	4a e0       	ldi	r20, 0x0A	; 10
    138a:	be 01       	movw	r22, r28
    138c:	68 5f       	subi	r22, 0xF8	; 248
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	86 ad       	ldd	r24, Z+62	; 0x3e
    1392:	97 ad       	ldd	r25, Z+63	; 0x3f
    1394:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
		send(temp);
    1398:	ce 01       	movw	r24, r28
    139a:	08 96       	adiw	r24, 0x08	; 8
    139c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		send("]");
    13a0:	8b eb       	ldi	r24, 0xBB	; 187
    13a2:	93 e0       	ldi	r25, 0x03	; 3
    13a4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
		sendChar(NL);
    13a8:	8a e0       	ldi	r24, 0x0A	; 10
    13aa:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		cardPrint(&(*pA));
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
		SCREENFILL -= 2;
    13b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    13ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    13be:	02 97       	sbiw	r24, 0x02	; 2
    13c0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    13c4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
		fillScreen(SCREENFILL);
    13c8:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    13cc:	2f ef       	ldi	r18, 0xFF	; 255
    13ce:	83 ed       	ldi	r24, 0xD3	; 211
    13d0:	90 e3       	ldi	r25, 0x30	; 48
    13d2:	21 50       	subi	r18, 0x01	; 1
    13d4:	80 40       	sbci	r24, 0x00	; 0
    13d6:	90 40       	sbci	r25, 0x00	; 0
    13d8:	e1 f7       	brne	.-8      	; 0x13d2 <playTurn+0xb4>
    13da:	00 c0       	rjmp	.+0      	; 0x13dc <playTurn+0xbe>
    13dc:	00 00       	nop
		_delay_ms(DELAY_REFRESH);
		sendChar(NL);
    13de:	8a e0       	ldi	r24, 0x0A	; 10
    13e0:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
		
        SCREENFILL = TERMHEIGHT;
    13e4:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <SCREENFILL+0x1>
    13e8:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <SCREENFILL>
        dispUpper(ID);
    13ec:	c8 01       	movw	r24, r16
    13ee:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
        sendChar(NL);
    13f2:	8a e0       	ldi	r24, 0x0A	; 10
    13f4:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        alignCenter(23);
    13f8:	87 e1       	ldi	r24, 0x17	; 23
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
        send("Your current hand: [");
    1400:	86 ea       	ldi	r24, 0xA6	; 166
    1402:	93 e0       	ldi	r25, 0x03	; 3
    1404:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        itoa(pA->handvalue,temp,10);
    1408:	e9 81       	ldd	r30, Y+1	; 0x01
    140a:	fa 81       	ldd	r31, Y+2	; 0x02
    140c:	4a e0       	ldi	r20, 0x0A	; 10
    140e:	be 01       	movw	r22, r28
    1410:	68 5f       	subi	r22, 0xF8	; 248
    1412:	7f 4f       	sbci	r23, 0xFF	; 255
    1414:	86 ad       	ldd	r24, Z+62	; 0x3e
    1416:	97 ad       	ldd	r25, Z+63	; 0x3f
    1418:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
        send(temp);
    141c:	ce 01       	movw	r24, r28
    141e:	08 96       	adiw	r24, 0x08	; 8
    1420:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        send("]");
    1424:	8b eb       	ldi	r24, 0xBB	; 187
    1426:	93 e0       	ldi	r25, 0x03	; 3
    1428:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        sendChar(NL);
    142c:	8a e0       	ldi	r24, 0x0A	; 10
    142e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        cardPrint(&(*pA));
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
        SCREENFILL -= 2;
    143a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    143e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1442:	02 97       	sbiw	r24, 0x02	; 2
    1444:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1448:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
        sendChar(NL);
    144c:	8a e0       	ldi	r24, 0x0A	; 10
    144e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        sendChar(NL);
    1452:	8a e0       	ldi	r24, 0x0A	; 10
    1454:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        SCREENFILL -= 2;
    1458:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    145c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1460:	02 97       	sbiw	r24, 0x02	; 2
    1462:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1466:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
        if ((pA->rank[0] == pA->rank[1]) && askSplit) {
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	20 81       	ld	r18, Z
    1470:	31 81       	ldd	r19, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	28 17       	cp	r18, r24
    1478:	39 07       	cpc	r19, r25
    147a:	f1 f4       	brne	.+60     	; 0x14b8 <playTurn+0x19a>
    147c:	e1 14       	cp	r14, r1
    147e:	f1 04       	cpc	r15, r1
    1480:	d9 f0       	breq	.+54     	; 0x14b8 <playTurn+0x19a>
            alignCenter(34);
    1482:	82 e2       	ldi	r24, 0x22	; 34
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("SPLIT? (HIT for YES) (STAY for NO)");
    148a:	88 ec       	ldi	r24, 0xC8	; 200
    148c:	93 e0       	ldi	r25, 0x03	; 3
    148e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    1492:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1496:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    149a:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
            if (userInput() == HIT) {
    149e:	0e 94 82 09 	call	0x1304	; 0x1304 <userInput>
    14a2:	01 97       	sbiw	r24, 0x01	; 1
    14a4:	31 f4       	brne	.+12     	; 0x14b2 <playTurn+0x194>
                sendChar(NL);
    14a6:	8a e0       	ldi	r24, 0x0A	; 10
    14a8:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                split(ID); // handles the screen display and refresh
    14ac:	c8 01       	movw	r24, r16
    14ae:	0e 94 f9 07 	call	0xff2	; 0xff2 <split>
            }
			askSplit = 0; 
    14b2:	e1 2c       	mov	r14, r1
    14b4:	f1 2c       	mov	r15, r1
    14b6:	4f cf       	rjmp	.-354    	; 0x1356 <playTurn+0x38>
            continue;
        } else if (pA->busted) {
    14b8:	df 01       	movw	r26, r30
    14ba:	a0 5c       	subi	r26, 0xC0	; 192
    14bc:	bf 4f       	sbci	r27, 0xFF	; 255
    14be:	8d 91       	ld	r24, X+
    14c0:	9c 91       	ld	r25, X
    14c2:	89 2b       	or	r24, r25
    14c4:	d9 f0       	breq	.+54     	; 0x14fc <playTurn+0x1de>
            alignCenter(11);
    14c6:	8b e0       	ldi	r24, 0x0B	; 11
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("You BUSTED!");
    14ce:	8b ee       	ldi	r24, 0xEB	; 235
    14d0:	93 e0       	ldi	r25, 0x03	; 3
    14d2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    14d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    14da:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    14de:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    14e2:	2f ef       	ldi	r18, 0xFF	; 255
    14e4:	87 ea       	ldi	r24, 0xA7	; 167
    14e6:	91 e6       	ldi	r25, 0x61	; 97
    14e8:	21 50       	subi	r18, 0x01	; 1
    14ea:	80 40       	sbci	r24, 0x00	; 0
    14ec:	90 40       	sbci	r25, 0x00	; 0
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <playTurn+0x1ca>
    14f0:	00 c0       	rjmp	.+0      	; 0x14f2 <playTurn+0x1d4>
    14f2:	00 00       	nop
            _delay_ms(DELAY_READ);
            sendChar(NL);
    14f4:	8a e0       	ldi	r24, 0x0A	; 10
    14f6:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            break;
    14fa:	d9 c0       	rjmp	.+434    	; 0x16ae <playTurn+0x390>
        } else if (pA->handvalue == 21) {
    14fc:	86 ad       	ldd	r24, Z+62	; 0x3e
    14fe:	97 ad       	ldd	r25, Z+63	; 0x3f
    1500:	45 97       	sbiw	r24, 0x15	; 21
    1502:	d9 f4       	brne	.+54     	; 0x153a <playTurn+0x21c>
            alignCenter(16);
    1504:	80 e1       	ldi	r24, 0x10	; 16
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("You got TAPJACK!");
    150c:	87 ef       	ldi	r24, 0xF7	; 247
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    1514:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1518:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    151c:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1520:	2f ef       	ldi	r18, 0xFF	; 255
    1522:	87 ea       	ldi	r24, 0xA7	; 167
    1524:	91 e6       	ldi	r25, 0x61	; 97
    1526:	21 50       	subi	r18, 0x01	; 1
    1528:	80 40       	sbci	r24, 0x00	; 0
    152a:	90 40       	sbci	r25, 0x00	; 0
    152c:	e1 f7       	brne	.-8      	; 0x1526 <playTurn+0x208>
    152e:	00 c0       	rjmp	.+0      	; 0x1530 <playTurn+0x212>
    1530:	00 00       	nop
            _delay_ms(DELAY_READ);
            sendChar(NL);
    1532:	8a e0       	ldi	r24, 0x0A	; 10
    1534:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            break;
    1538:	ba c0       	rjmp	.+372    	; 0x16ae <playTurn+0x390>
        } else {
            alignCenter(12);
    153a:	8c e0       	ldi	r24, 0x0C	; 12
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("HIT or STAY?");
    1542:	88 e0       	ldi	r24, 0x08	; 8
    1544:	94 e0       	ldi	r25, 0x04	; 4
    1546:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    154a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    154e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1552:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
            int choice = userInput();
    1556:	0e 94 82 09 	call	0x1304	; 0x1304 <userInput>
    155a:	6c 01       	movw	r12, r24
    155c:	2f ef       	ldi	r18, 0xFF	; 255
    155e:	81 ee       	ldi	r24, 0xE1	; 225
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	21 50       	subi	r18, 0x01	; 1
    1564:	80 40       	sbci	r24, 0x00	; 0
    1566:	90 40       	sbci	r25, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <playTurn+0x244>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <playTurn+0x24e>
    156c:	00 00       	nop
            _delay_ms(DELAY_INPUT);
            sendChar(NL);
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>

            SCREENFILL = TERMHEIGHT;
    1574:	8c e2       	ldi	r24, 0x2C	; 44
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    157c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            dispUpper(ID);
    1580:	c8 01       	movw	r24, r16
    1582:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
            sendChar(NL);
    1586:	8a e0       	ldi	r24, 0x0A	; 10
    1588:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            alignCenter(23);
    158c:	87 e1       	ldi	r24, 0x17	; 23
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("Your current hand: [");
    1594:	86 ea       	ldi	r24, 0xA6	; 166
    1596:	93 e0       	ldi	r25, 0x03	; 3
    1598:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            char temp[3];
            itoa(pA->handvalue,temp,10);
    159c:	e9 81       	ldd	r30, Y+1	; 0x01
    159e:	fa 81       	ldd	r31, Y+2	; 0x02
    15a0:	4a e0       	ldi	r20, 0x0A	; 10
    15a2:	be 01       	movw	r22, r28
    15a4:	6b 5f       	subi	r22, 0xFB	; 251
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	86 ad       	ldd	r24, Z+62	; 0x3e
    15aa:	97 ad       	ldd	r25, Z+63	; 0x3f
    15ac:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
            send(temp);
    15b0:	ce 01       	movw	r24, r28
    15b2:	05 96       	adiw	r24, 0x05	; 5
    15b4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            send("]");
    15b8:	8b eb       	ldi	r24, 0xBB	; 187
    15ba:	93 e0       	ldi	r25, 0x03	; 3
    15bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            sendChar(NL);
    15c0:	8a e0       	ldi	r24, 0x0A	; 10
    15c2:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            cardPrint(&(*pA));
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
            SCREENFILL -= 2;
    15ce:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    15d2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    15d6:	02 97       	sbiw	r24, 0x02	; 2
    15d8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    15dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            sendChar(NL);
    15e0:	8a e0       	ldi	r24, 0x0A	; 10
    15e2:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            sendChar(NL);
    15e6:	8a e0       	ldi	r24, 0x0A	; 10
    15e8:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            SCREENFILL -= 2;
    15ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    15f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    15f4:	02 97       	sbiw	r24, 0x02	; 2
    15f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    15fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            if (choice == HIT) {
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	c2 16       	cp	r12, r18
    1602:	d1 04       	cpc	r13, r1
    1604:	f9 f4       	brne	.+62     	; 0x1644 <playTurn+0x326>
                alignCenter(8);
    1606:	88 e0       	ldi	r24, 0x08	; 8
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
                send("You hit!");
    160e:	85 e1       	ldi	r24, 0x15	; 21
    1610:	94 e0       	ldi	r25, 0x04	; 4
    1612:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                dealCard(&(*pA));
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
                fillScreen(SCREENFILL);
    161e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1622:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1626:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    162a:	8f ef       	ldi	r24, 0xFF	; 255
    162c:	93 ed       	ldi	r25, 0xD3	; 211
    162e:	20 e3       	ldi	r18, 0x30	; 48
    1630:	81 50       	subi	r24, 0x01	; 1
    1632:	90 40       	sbci	r25, 0x00	; 0
    1634:	20 40       	sbci	r18, 0x00	; 0
    1636:	e1 f7       	brne	.-8      	; 0x1630 <playTurn+0x312>
    1638:	00 c0       	rjmp	.+0      	; 0x163a <playTurn+0x31c>
    163a:	00 00       	nop
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
    163c:	8a e0       	ldi	r24, 0x0A	; 10
    163e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    1642:	89 ce       	rjmp	.-750    	; 0x1356 <playTurn+0x38>
            } else if (choice == STAY) {
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	c8 16       	cp	r12, r24
    1648:	d1 04       	cpc	r13, r1
    164a:	d9 f4       	brne	.+54     	; 0x1682 <playTurn+0x364>
                alignCenter(11);
    164c:	8b e0       	ldi	r24, 0x0B	; 11
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
                send("You stayed!");
    1654:	8e e1       	ldi	r24, 0x1E	; 30
    1656:	94 e0       	ldi	r25, 0x04	; 4
    1658:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                fillScreen(SCREENFILL);
    165c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1660:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1664:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1668:	9f ef       	ldi	r25, 0xFF	; 255
    166a:	27 ea       	ldi	r18, 0xA7	; 167
    166c:	81 e6       	ldi	r24, 0x61	; 97
    166e:	91 50       	subi	r25, 0x01	; 1
    1670:	20 40       	sbci	r18, 0x00	; 0
    1672:	80 40       	sbci	r24, 0x00	; 0
    1674:	e1 f7       	brne	.-8      	; 0x166e <playTurn+0x350>
    1676:	00 c0       	rjmp	.+0      	; 0x1678 <playTurn+0x35a>
    1678:	00 00       	nop
                _delay_ms(DELAY_READ);
                sendChar(NL);
    167a:	8a e0       	ldi	r24, 0x0A	; 10
    167c:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                break;
    1680:	16 c0       	rjmp	.+44     	; 0x16ae <playTurn+0x390>
            } else {
                send("ERROR in playTurn()");
    1682:	8a e2       	ldi	r24, 0x2A	; 42
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                fillScreen(SCREENFILL);
    168a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    168e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1692:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1696:	9f ef       	ldi	r25, 0xFF	; 255
    1698:	23 ed       	ldi	r18, 0xD3	; 211
    169a:	80 e3       	ldi	r24, 0x30	; 48
    169c:	91 50       	subi	r25, 0x01	; 1
    169e:	20 40       	sbci	r18, 0x00	; 0
    16a0:	80 40       	sbci	r24, 0x00	; 0
    16a2:	e1 f7       	brne	.-8      	; 0x169c <playTurn+0x37e>
    16a4:	00 c0       	rjmp	.+0      	; 0x16a6 <playTurn+0x388>
    16a6:	00 00       	nop
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                break;
            }
        }
        
    }
    if (pB->empty) {
    16ae:	eb 81       	ldd	r30, Y+3	; 0x03
    16b0:	fc 81       	ldd	r31, Y+4	; 0x04
    16b2:	ec 5b       	subi	r30, 0xBC	; 188
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	89 2b       	or	r24, r25
    16bc:	09 f0       	breq	.+2      	; 0x16c0 <playTurn+0x3a2>
    16be:	42 c1       	rjmp	.+644    	; 0x1944 <playTurn+0x626>
        return;
    }
    while (1) {
        SCREENFILL = TERMHEIGHT;
    16c0:	8c e2       	ldi	r24, 0x2C	; 44
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    16c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
        dispUpper(ID);
    16cc:	c8 01       	movw	r24, r16
    16ce:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
        sendChar(NL);
    16d2:	8a e0       	ldi	r24, 0x0A	; 10
    16d4:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        alignCenter(23);
    16d8:	87 e1       	ldi	r24, 0x17	; 23
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
        send("Your current hand: [");
    16e0:	86 ea       	ldi	r24, 0xA6	; 166
    16e2:	93 e0       	ldi	r25, 0x03	; 3
    16e4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        char temp[3];
        itoa(pB->handvalue,temp,10);
    16e8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ea:	fc 81       	ldd	r31, Y+4	; 0x04
    16ec:	4a e0       	ldi	r20, 0x0A	; 10
    16ee:	be 01       	movw	r22, r28
    16f0:	68 5f       	subi	r22, 0xF8	; 248
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	86 ad       	ldd	r24, Z+62	; 0x3e
    16f6:	97 ad       	ldd	r25, Z+63	; 0x3f
    16f8:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
        send(temp);
    16fc:	ce 01       	movw	r24, r28
    16fe:	08 96       	adiw	r24, 0x08	; 8
    1700:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        send("]");
    1704:	8b eb       	ldi	r24, 0xBB	; 187
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
        sendChar(NL);
    170c:	8a e0       	ldi	r24, 0x0A	; 10
    170e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        cardPrint(&(*pB));
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
        SCREENFILL -= 2;
    171a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    171e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1722:	02 97       	sbiw	r24, 0x02	; 2
    1724:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1728:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
        sendChar(NL);
    172c:	8a e0       	ldi	r24, 0x0A	; 10
    172e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        sendChar(NL);
    1732:	8a e0       	ldi	r24, 0x0A	; 10
    1734:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
        SCREENFILL -= 2;
    1738:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    173c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1740:	02 97       	sbiw	r24, 0x02	; 2
    1742:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1746:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
        if (pB->busted) {
    174a:	eb 81       	ldd	r30, Y+3	; 0x03
    174c:	fc 81       	ldd	r31, Y+4	; 0x04
    174e:	df 01       	movw	r26, r30
    1750:	a0 5c       	subi	r26, 0xC0	; 192
    1752:	bf 4f       	sbci	r27, 0xFF	; 255
    1754:	8d 91       	ld	r24, X+
    1756:	9c 91       	ld	r25, X
    1758:	89 2b       	or	r24, r25
    175a:	d9 f0       	breq	.+54     	; 0x1792 <playTurn+0x474>
            alignCenter(11);
    175c:	8b e0       	ldi	r24, 0x0B	; 11
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("You BUSTED!");
    1764:	8b ee       	ldi	r24, 0xEB	; 235
    1766:	93 e0       	ldi	r25, 0x03	; 3
    1768:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    176c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1770:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1774:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1778:	9f ef       	ldi	r25, 0xFF	; 255
    177a:	23 ed       	ldi	r18, 0xD3	; 211
    177c:	80 e3       	ldi	r24, 0x30	; 48
    177e:	91 50       	subi	r25, 0x01	; 1
    1780:	20 40       	sbci	r18, 0x00	; 0
    1782:	80 40       	sbci	r24, 0x00	; 0
    1784:	e1 f7       	brne	.-8      	; 0x177e <playTurn+0x460>
    1786:	00 c0       	rjmp	.+0      	; 0x1788 <playTurn+0x46a>
    1788:	00 00       	nop
            _delay_ms(DELAY_REFRESH);
            sendChar(NL);
    178a:	8a e0       	ldi	r24, 0x0A	; 10
    178c:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            break;
    1790:	d9 c0       	rjmp	.+434    	; 0x1944 <playTurn+0x626>
        } else if (pB->handvalue == 21) {
    1792:	86 ad       	ldd	r24, Z+62	; 0x3e
    1794:	97 ad       	ldd	r25, Z+63	; 0x3f
    1796:	45 97       	sbiw	r24, 0x15	; 21
    1798:	d9 f4       	brne	.+54     	; 0x17d0 <playTurn+0x4b2>
            alignCenter(16);
    179a:	80 e1       	ldi	r24, 0x10	; 16
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("You got TAPJACK!");
    17a2:	87 ef       	ldi	r24, 0xF7	; 247
    17a4:	93 e0       	ldi	r25, 0x03	; 3
    17a6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    17aa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    17ae:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    17b2:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    17b6:	9f ef       	ldi	r25, 0xFF	; 255
    17b8:	27 ea       	ldi	r18, 0xA7	; 167
    17ba:	81 e6       	ldi	r24, 0x61	; 97
    17bc:	91 50       	subi	r25, 0x01	; 1
    17be:	20 40       	sbci	r18, 0x00	; 0
    17c0:	80 40       	sbci	r24, 0x00	; 0
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <playTurn+0x49e>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <playTurn+0x4a8>
    17c6:	00 00       	nop
            _delay_ms(DELAY_REFRESH + 2000);
            sendChar(NL);
    17c8:	8a e0       	ldi	r24, 0x0A	; 10
    17ca:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            break;
    17ce:	ba c0       	rjmp	.+372    	; 0x1944 <playTurn+0x626>
        } else {
            alignCenter(12);
    17d0:	8c e0       	ldi	r24, 0x0C	; 12
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("HIT or STAY?");
    17d8:	88 e0       	ldi	r24, 0x08	; 8
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            fillScreen(SCREENFILL);
    17e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    17e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    17e8:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
            int choice = userInput();
    17ec:	0e 94 82 09 	call	0x1304	; 0x1304 <userInput>
    17f0:	7c 01       	movw	r14, r24
    17f2:	9f ef       	ldi	r25, 0xFF	; 255
    17f4:	21 ee       	ldi	r18, 0xE1	; 225
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	91 50       	subi	r25, 0x01	; 1
    17fa:	20 40       	sbci	r18, 0x00	; 0
    17fc:	80 40       	sbci	r24, 0x00	; 0
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <playTurn+0x4da>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <playTurn+0x4e4>
    1802:	00 00       	nop
            _delay_ms(DELAY_INPUT);
            sendChar(NL);
    1804:	8a e0       	ldi	r24, 0x0A	; 10
    1806:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>

            SCREENFILL = TERMHEIGHT;
    180a:	8c e2       	ldi	r24, 0x2C	; 44
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1812:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            dispUpper(ID);
    1816:	c8 01       	movw	r24, r16
    1818:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
            sendChar(NL);
    181c:	8a e0       	ldi	r24, 0x0A	; 10
    181e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            alignCenter(23);
    1822:	87 e1       	ldi	r24, 0x17	; 23
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
            send("Your current hand: [");
    182a:	86 ea       	ldi	r24, 0xA6	; 166
    182c:	93 e0       	ldi	r25, 0x03	; 3
    182e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            char temp[3];
            itoa(pB->handvalue,temp,10);
    1832:	eb 81       	ldd	r30, Y+3	; 0x03
    1834:	fc 81       	ldd	r31, Y+4	; 0x04
    1836:	4a e0       	ldi	r20, 0x0A	; 10
    1838:	be 01       	movw	r22, r28
    183a:	6b 5f       	subi	r22, 0xFB	; 251
    183c:	7f 4f       	sbci	r23, 0xFF	; 255
    183e:	86 ad       	ldd	r24, Z+62	; 0x3e
    1840:	97 ad       	ldd	r25, Z+63	; 0x3f
    1842:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
            send(temp);
    1846:	ce 01       	movw	r24, r28
    1848:	05 96       	adiw	r24, 0x05	; 5
    184a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            send("]");
    184e:	8b eb       	ldi	r24, 0xBB	; 187
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
            sendChar(NL);
    1856:	8a e0       	ldi	r24, 0x0A	; 10
    1858:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            cardPrint(&(*pB));
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	0e 94 f5 02 	call	0x5ea	; 0x5ea <cardPrint>
            SCREENFILL -= 2;
    1864:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1868:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    186c:	02 97       	sbiw	r24, 0x02	; 2
    186e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1872:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            sendChar(NL);
    1876:	8a e0       	ldi	r24, 0x0A	; 10
    1878:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            sendChar(NL);
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            SCREENFILL -= 2;
    1882:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1886:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    188a:	02 97       	sbiw	r24, 0x02	; 2
    188c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1890:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            if (choice == HIT) {
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	e9 16       	cp	r14, r25
    1898:	f1 04       	cpc	r15, r1
    189a:	f9 f4       	brne	.+62     	; 0x18da <playTurn+0x5bc>
                alignCenter(8);
    189c:	88 e0       	ldi	r24, 0x08	; 8
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
                send("You hit!");
    18a4:	85 e1       	ldi	r24, 0x15	; 21
    18a6:	94 e0       	ldi	r25, 0x04	; 4
    18a8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                dealCard(&(*pB));
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
                fillScreen(SCREENFILL);
    18b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    18b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    18bc:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    18c0:	2f ef       	ldi	r18, 0xFF	; 255
    18c2:	83 ed       	ldi	r24, 0xD3	; 211
    18c4:	90 e3       	ldi	r25, 0x30	; 48
    18c6:	21 50       	subi	r18, 0x01	; 1
    18c8:	80 40       	sbci	r24, 0x00	; 0
    18ca:	90 40       	sbci	r25, 0x00	; 0
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <playTurn+0x5a8>
    18ce:	00 c0       	rjmp	.+0      	; 0x18d0 <playTurn+0x5b2>
    18d0:	00 00       	nop
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
    18d2:	8a e0       	ldi	r24, 0x0A	; 10
    18d4:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
    18d8:	f3 ce       	rjmp	.-538    	; 0x16c0 <playTurn+0x3a2>
            } else if (choice == STAY) {
    18da:	22 e0       	ldi	r18, 0x02	; 2
    18dc:	e2 16       	cp	r14, r18
    18de:	f1 04       	cpc	r15, r1
    18e0:	d9 f4       	brne	.+54     	; 0x1918 <playTurn+0x5fa>
                alignCenter(11);
    18e2:	8b e0       	ldi	r24, 0x0B	; 11
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
                send("You stayed!");
    18ea:	8e e1       	ldi	r24, 0x1E	; 30
    18ec:	94 e0       	ldi	r25, 0x04	; 4
    18ee:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                fillScreen(SCREENFILL);
    18f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    18f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    18fa:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	93 ed       	ldi	r25, 0xD3	; 211
    1902:	20 e3       	ldi	r18, 0x30	; 48
    1904:	81 50       	subi	r24, 0x01	; 1
    1906:	90 40       	sbci	r25, 0x00	; 0
    1908:	20 40       	sbci	r18, 0x00	; 0
    190a:	e1 f7       	brne	.-8      	; 0x1904 <playTurn+0x5e6>
    190c:	00 c0       	rjmp	.+0      	; 0x190e <playTurn+0x5f0>
    190e:	00 00       	nop
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
    1910:	8a e0       	ldi	r24, 0x0A	; 10
    1912:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                break;
    1916:	16 c0       	rjmp	.+44     	; 0x1944 <playTurn+0x626>
            } else {
                send("ERROR in playTurn()");
    1918:	8a e2       	ldi	r24, 0x2A	; 42
    191a:	94 e0       	ldi	r25, 0x04	; 4
    191c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                fillScreen(SCREENFILL);
    1920:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1924:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1928:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	93 ed       	ldi	r25, 0xD3	; 211
    1930:	20 e3       	ldi	r18, 0x30	; 48
    1932:	81 50       	subi	r24, 0x01	; 1
    1934:	90 40       	sbci	r25, 0x00	; 0
    1936:	20 40       	sbci	r18, 0x00	; 0
    1938:	e1 f7       	brne	.-8      	; 0x1932 <playTurn+0x614>
    193a:	00 c0       	rjmp	.+0      	; 0x193c <playTurn+0x61e>
    193c:	00 00       	nop
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
    193e:	8a e0       	ldi	r24, 0x0A	; 10
    1940:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                break;
            }
        }
        
    }
}
    1944:	2a 96       	adiw	r28, 0x0a	; 10
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	ef 90       	pop	r14
    195c:	df 90       	pop	r13
    195e:	cf 90       	pop	r12
    1960:	08 95       	ret

00001962 <main>:
	cli();
	timerOverflow++;	//Increment Timer Overflow count
	sei();
}

int main() {
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	00 d0       	rcall	.+0      	; 0x1970 <main+0xe>
    1970:	1f 92       	push	r1
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    // initialize USART
	USART_init(MYUBRR);
    1976:	8c e0       	ldi	r24, 0x0C	; 12
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART_init>
	// initialize USS
	USS_init();
    197e:	0e 94 c8 08 	call	0x1190	; 0x1190 <USS_init>
	// initialize deck of cards
	initDeck();
    1982:	0e 94 38 01 	call	0x270	; 0x270 <initDeck>
    // seed rand()
    srand(ADC_rand());
    1986:	0e 94 d6 01 	call	0x3ac	; 0x3ac <ADC_rand>
    198a:	0e 94 2c 13 	call	0x2658	; 0x2658 <srand>

    dispBlank();
    198e:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispBlank>
    dispIntro();
    1992:	0e 94 a8 05 	call	0xb50	; 0xb50 <dispIntro>
    dispBlank();
    1996:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispBlank>

    for (int round = 1; round < 1000; round++) {
    199a:	ee 24       	eor	r14, r14
    199c:	e3 94       	inc	r14
    199e:	f1 2c       	mov	r15, r1
    19a0:	ee c0       	rjmp	.+476    	; 0x1b7e <main+0x21c>
        dispRound(round);
    19a2:	c7 01       	movw	r24, r14
    19a4:	0e 94 2c 06 	call	0xc58	; 0xc58 <dispRound>
        newRound();
    19a8:	0e 94 af 01 	call	0x35e	; 0x35e <newRound>
        // deal out the starting hands
		for (int i = 0; i < 2; i++) {
    19ac:	00 e0       	ldi	r16, 0x00	; 0
    19ae:	10 e0       	ldi	r17, 0x00	; 0
    19b0:	16 c0       	rjmp	.+44     	; 0x19de <main+0x7c>
			dealCard(&p1a);
    19b2:	80 ef       	ldi	r24, 0xF0	; 240
    19b4:	96 e0       	ldi	r25, 0x06	; 6
    19b6:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
			dealCard(&p2a);
    19ba:	80 e7       	ldi	r24, 0x70	; 112
    19bc:	95 e0       	ldi	r25, 0x05	; 5
    19be:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
			dealCard(&p3a);
    19c2:	86 eb       	ldi	r24, 0xB6	; 182
    19c4:	95 e0       	ldi	r25, 0x05	; 5
    19c6:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
			dealCard(&p4a);
    19ca:	84 e9       	ldi	r24, 0x94	; 148
    19cc:	94 e0       	ldi	r25, 0x04	; 4
    19ce:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
			dealCard(&dealer);
    19d2:	8e e4       	ldi	r24, 0x4E	; 78
    19d4:	94 e0       	ldi	r25, 0x04	; 4
    19d6:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>

    for (int round = 1; round < 1000; round++) {
        dispRound(round);
        newRound();
        // deal out the starting hands
		for (int i = 0; i < 2; i++) {
    19da:	0f 5f       	subi	r16, 0xFF	; 255
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	02 30       	cpi	r16, 0x02	; 2
    19e0:	11 05       	cpc	r17, r1
    19e2:	3c f3       	brlt	.-50     	; 0x19b2 <main+0x50>
			dealCard(&p2a);
			dealCard(&p3a);
			dealCard(&p4a);
			dealCard(&dealer);
		}
		dealer.isFaceDown[0] = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	90 93 73 04 	sts	0x0473, r25	; 0x800473 <dealer+0x25>
    19ec:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <dealer+0x24>
        for(int pNow = P1; pNow <= P4; pNow++) {
    19f0:	01 e0       	ldi	r16, 0x01	; 1
    19f2:	10 e0       	ldi	r17, 0x00	; 0
    19f4:	0a c0       	rjmp	.+20     	; 0x1a0a <main+0xa8>
            dispBlank();
    19f6:	0e 94 17 06 	call	0xc2e	; 0xc2e <dispBlank>
			dispTurn(pNow);
    19fa:	c8 01       	movw	r24, r16
    19fc:	0e 94 78 06 	call	0xcf0	; 0xcf0 <dispTurn>
            playTurn(pNow);
    1a00:	c8 01       	movw	r24, r16
    1a02:	0e 94 8f 09 	call	0x131e	; 0x131e <playTurn>
			dealCard(&p3a);
			dealCard(&p4a);
			dealCard(&dealer);
		}
		dealer.isFaceDown[0] = 1;
        for(int pNow = P1; pNow <= P4; pNow++) {
    1a06:	0f 5f       	subi	r16, 0xFF	; 255
    1a08:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0a:	05 30       	cpi	r16, 0x05	; 5
    1a0c:	11 05       	cpc	r17, r1
    1a0e:	9c f3       	brlt	.-26     	; 0x19f6 <main+0x94>
            dispBlank();
			dispTurn(pNow);
            playTurn(pNow);
		}
		dealer.isFaceDown[0] = 0;
    1a10:	10 92 73 04 	sts	0x0473, r1	; 0x800473 <dealer+0x25>
    1a14:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <dealer+0x24>
        while (1) {
            SCREENFILL = TERMHEIGHT;
    1a18:	0c e2       	ldi	r16, 0x2C	; 44
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
    1a1c:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <SCREENFILL+0x1>
    1a20:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <SCREENFILL>
            dispUpper(DEALER);
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
            fillScreen(SCREENFILL);
    1a2c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1a30:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1a34:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1a38:	2f ef       	ldi	r18, 0xFF	; 255
    1a3a:	83 ed       	ldi	r24, 0xD3	; 211
    1a3c:	90 e3       	ldi	r25, 0x30	; 48
    1a3e:	21 50       	subi	r18, 0x01	; 1
    1a40:	80 40       	sbci	r24, 0x00	; 0
    1a42:	90 40       	sbci	r25, 0x00	; 0
    1a44:	e1 f7       	brne	.-8      	; 0x1a3e <main+0xdc>
    1a46:	00 c0       	rjmp	.+0      	; 0x1a48 <main+0xe6>
    1a48:	00 00       	nop
			_delay_ms(DELAY_REFRESH);
            sendChar(NL);
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>

            SCREENFILL = TERMHEIGHT;
    1a50:	10 93 05 01 	sts	0x0105, r17	; 0x800105 <SCREENFILL+0x1>
    1a54:	00 93 04 01 	sts	0x0104, r16	; 0x800104 <SCREENFILL>
            dispUpper(DEALER);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 09 05 	call	0xa12	; 0xa12 <dispUpper>
            sendChar(NL);
    1a60:	8a e0       	ldi	r24, 0x0A	; 10
    1a62:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            sendChar(NL);
    1a66:	8a e0       	ldi	r24, 0x0A	; 10
    1a68:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
            SCREENFILL -= 2;
    1a6c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1a70:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1a74:	02 97       	sbiw	r24, 0x02	; 2
    1a76:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <SCREENFILL+0x1>
    1a7a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SCREENFILL>
            if (dealer.busted) {
    1a7e:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <dealer+0x40>
    1a82:	90 91 8f 04 	lds	r25, 0x048F	; 0x80048f <dealer+0x41>
    1a86:	89 2b       	or	r24, r25
    1a88:	d9 f0       	breq	.+54     	; 0x1ac0 <main+0x15e>
                alignCenter(14);
    1a8a:	8e e0       	ldi	r24, 0x0E	; 14
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
                send("Dealer BUSTED!");
    1a92:	85 e3       	ldi	r24, 0x35	; 53
    1a94:	93 e0       	ldi	r25, 0x03	; 3
    1a96:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                fillScreen(SCREENFILL);
    1a9a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1a9e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1aa2:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1aa6:	2f ef       	ldi	r18, 0xFF	; 255
    1aa8:	87 ea       	ldi	r24, 0xA7	; 167
    1aaa:	91 e6       	ldi	r25, 0x61	; 97
    1aac:	21 50       	subi	r18, 0x01	; 1
    1aae:	80 40       	sbci	r24, 0x00	; 0
    1ab0:	90 40       	sbci	r25, 0x00	; 0
    1ab2:	e1 f7       	brne	.-8      	; 0x1aac <main+0x14a>
    1ab4:	00 c0       	rjmp	.+0      	; 0x1ab6 <main+0x154>
    1ab6:	00 00       	nop
                _delay_ms(DELAY_READ);
                sendChar(NL);
    1ab8:	8a e0       	ldi	r24, 0x0A	; 10
    1aba:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                break;
    1abe:	5a c0       	rjmp	.+180    	; 0x1b74 <main+0x212>
            } else if ((dealer.handvalue < 17) || (dealer.handvalue == 17 && dealer.soft)) {
    1ac0:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <dealer+0x3e>
    1ac4:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <dealer+0x3f>
    1ac8:	81 31       	cpi	r24, 0x11	; 17
    1aca:	91 05       	cpc	r25, r1
    1acc:	44 f0       	brlt	.+16     	; 0x1ade <main+0x17c>
    1ace:	41 97       	sbiw	r24, 0x11	; 17
    1ad0:	29 f5       	brne	.+74     	; 0x1b1c <main+0x1ba>
    1ad2:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <dealer+0x42>
    1ad6:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <dealer+0x43>
    1ada:	89 2b       	or	r24, r25
    1adc:	f9 f0       	breq	.+62     	; 0x1b1c <main+0x1ba>
                alignCenter(12);
    1ade:	8c e0       	ldi	r24, 0x0C	; 12
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
				send("Dealer hits!");
    1ae6:	8e e3       	ldi	r24, 0x3E	; 62
    1ae8:	94 e0       	ldi	r25, 0x04	; 4
    1aea:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
				dealCard(&dealer);
    1aee:	8e e4       	ldi	r24, 0x4E	; 78
    1af0:	94 e0       	ldi	r25, 0x04	; 4
    1af2:	0e 94 08 02 	call	0x410	; 0x410 <dealCard>
                fillScreen(SCREENFILL);
    1af6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1afa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1afe:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1b02:	2f ef       	ldi	r18, 0xFF	; 255
    1b04:	83 ed       	ldi	r24, 0xD3	; 211
    1b06:	90 e3       	ldi	r25, 0x30	; 48
    1b08:	21 50       	subi	r18, 0x01	; 1
    1b0a:	80 40       	sbci	r24, 0x00	; 0
    1b0c:	90 40       	sbci	r25, 0x00	; 0
    1b0e:	e1 f7       	brne	.-8      	; 0x1b08 <main+0x1a6>
    1b10:	00 c0       	rjmp	.+0      	; 0x1b12 <main+0x1b0>
    1b12:	00 00       	nop
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
    1b14:	8a e0       	ldi	r24, 0x0A	; 10
    1b16:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
                fillScreen(SCREENFILL);
                _delay_ms(DELAY_READ);
                sendChar(NL);
				break;
			}
        }
    1b1a:	7e cf       	rjmp	.-260    	; 0x1a18 <main+0xb6>
				dealCard(&dealer);
                fillScreen(SCREENFILL);
                _delay_ms(DELAY_REFRESH);
                sendChar(NL);
			} else {
                alignCenter(20);
    1b1c:	84 e1       	ldi	r24, 0x14	; 20
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <alignCenter>
				send("Dealer stays with ");
    1b24:	84 e4       	ldi	r24, 0x44	; 68
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
    1b2c:	4a e0       	ldi	r20, 0x0A	; 10
    1b2e:	be 01       	movw	r22, r28
    1b30:	6f 5f       	subi	r22, 0xFF	; 255
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <dealer+0x3e>
    1b38:	90 91 8d 04 	lds	r25, 0x048D	; 0x80048d <dealer+0x3f>
    1b3c:	0e 94 25 14 	call	0x284a	; 0x284a <__itoa_ncheck>
				char d[3];
				itoa(dealer.handvalue,d,10);
				send(d);
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
				send("!");
    1b48:	82 e4       	ldi	r24, 0x42	; 66
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <send>
                fillScreen(SCREENFILL);
    1b50:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <SCREENFILL>
    1b54:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <SCREENFILL+0x1>
    1b58:	0e 94 ce 02 	call	0x59c	; 0x59c <fillScreen>
    1b5c:	2f ef       	ldi	r18, 0xFF	; 255
    1b5e:	87 ea       	ldi	r24, 0xA7	; 167
    1b60:	91 e6       	ldi	r25, 0x61	; 97
    1b62:	21 50       	subi	r18, 0x01	; 1
    1b64:	80 40       	sbci	r24, 0x00	; 0
    1b66:	90 40       	sbci	r25, 0x00	; 0
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <main+0x200>
    1b6a:	00 c0       	rjmp	.+0      	; 0x1b6c <main+0x20a>
    1b6c:	00 00       	nop
                _delay_ms(DELAY_READ);
                sendChar(NL);
    1b6e:	8a e0       	ldi	r24, 0x0A	; 10
    1b70:	0e 94 c7 02 	call	0x58e	; 0x58e <sendChar>
				break;
			}
        }
        dispResults();
    1b74:	0e 94 be 06 	call	0xd7c	; 0xd7c <dispResults>

    dispBlank();
    dispIntro();
    dispBlank();

    for (int round = 1; round < 1000; round++) {
    1b78:	2f ef       	ldi	r18, 0xFF	; 255
    1b7a:	e2 1a       	sub	r14, r18
    1b7c:	f2 0a       	sbc	r15, r18
    1b7e:	88 ee       	ldi	r24, 0xE8	; 232
    1b80:	e8 16       	cp	r14, r24
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	f8 06       	cpc	r15, r24
    1b86:	0c f4       	brge	.+2      	; 0x1b8a <main+0x228>
    1b88:	0c cf       	rjmp	.-488    	; 0x19a2 <main+0x40>
				break;
			}
        }
        dispResults();
    }
}
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	df 91       	pop	r29
    1b96:	cf 91       	pop	r28
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	ff 90       	pop	r15
    1b9e:	ef 90       	pop	r14
    1ba0:	08 95       	ret

00001ba2 <__cmpsf2>:
    1ba2:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fp_cmp>
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <__cmpsf2+0x8>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	08 95       	ret

00001bac <__divsf3>:
    1bac:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <__divsf3x>
    1bb0:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__fp_round>
    1bb4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__fp_pscB>
    1bb8:	58 f0       	brcs	.+22     	; 0x1bd0 <__divsf3+0x24>
    1bba:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__fp_pscA>
    1bbe:	40 f0       	brcs	.+16     	; 0x1bd0 <__divsf3+0x24>
    1bc0:	29 f4       	brne	.+10     	; 0x1bcc <__divsf3+0x20>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <__divsf3+0x24>
    1bc6:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_inf>
    1bca:	51 11       	cpse	r21, r1
    1bcc:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_szero>
    1bd0:	0c 94 af 0e 	jmp	0x1d5e	; 0x1d5e <__fp_nan>

00001bd4 <__divsf3x>:
    1bd4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <__fp_split3>
    1bd8:	68 f3       	brcs	.-38     	; 0x1bb4 <__divsf3+0x8>

00001bda <__divsf3_pse>:
    1bda:	99 23       	and	r25, r25
    1bdc:	b1 f3       	breq	.-20     	; 0x1bca <__divsf3+0x1e>
    1bde:	55 23       	and	r21, r21
    1be0:	91 f3       	breq	.-28     	; 0x1bc6 <__divsf3+0x1a>
    1be2:	95 1b       	sub	r25, r21
    1be4:	55 0b       	sbc	r21, r21
    1be6:	bb 27       	eor	r27, r27
    1be8:	aa 27       	eor	r26, r26
    1bea:	62 17       	cp	r22, r18
    1bec:	73 07       	cpc	r23, r19
    1bee:	84 07       	cpc	r24, r20
    1bf0:	38 f0       	brcs	.+14     	; 0x1c00 <__divsf3_pse+0x26>
    1bf2:	9f 5f       	subi	r25, 0xFF	; 255
    1bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf6:	22 0f       	add	r18, r18
    1bf8:	33 1f       	adc	r19, r19
    1bfa:	44 1f       	adc	r20, r20
    1bfc:	aa 1f       	adc	r26, r26
    1bfe:	a9 f3       	breq	.-22     	; 0x1bea <__divsf3_pse+0x10>
    1c00:	35 d0       	rcall	.+106    	; 0x1c6c <__divsf3_pse+0x92>
    1c02:	0e 2e       	mov	r0, r30
    1c04:	3a f0       	brmi	.+14     	; 0x1c14 <__divsf3_pse+0x3a>
    1c06:	e0 e8       	ldi	r30, 0x80	; 128
    1c08:	32 d0       	rcall	.+100    	; 0x1c6e <__divsf3_pse+0x94>
    1c0a:	91 50       	subi	r25, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	e6 95       	lsr	r30
    1c10:	00 1c       	adc	r0, r0
    1c12:	ca f7       	brpl	.-14     	; 0x1c06 <__divsf3_pse+0x2c>
    1c14:	2b d0       	rcall	.+86     	; 0x1c6c <__divsf3_pse+0x92>
    1c16:	fe 2f       	mov	r31, r30
    1c18:	29 d0       	rcall	.+82     	; 0x1c6c <__divsf3_pse+0x92>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	bb 1f       	adc	r27, r27
    1c22:	26 17       	cp	r18, r22
    1c24:	37 07       	cpc	r19, r23
    1c26:	48 07       	cpc	r20, r24
    1c28:	ab 07       	cpc	r26, r27
    1c2a:	b0 e8       	ldi	r27, 0x80	; 128
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <__divsf3_pse+0x56>
    1c2e:	bb 0b       	sbc	r27, r27
    1c30:	80 2d       	mov	r24, r0
    1c32:	bf 01       	movw	r22, r30
    1c34:	ff 27       	eor	r31, r31
    1c36:	93 58       	subi	r25, 0x83	; 131
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	3a f0       	brmi	.+14     	; 0x1c4a <__divsf3_pse+0x70>
    1c3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3e:	51 05       	cpc	r21, r1
    1c40:	78 f0       	brcs	.+30     	; 0x1c60 <__divsf3_pse+0x86>
    1c42:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <__fp_inf>
    1c46:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <__fp_szero>
    1c4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c4c:	e4 f3       	brlt	.-8      	; 0x1c46 <__divsf3_pse+0x6c>
    1c4e:	98 3e       	cpi	r25, 0xE8	; 232
    1c50:	d4 f3       	brlt	.-12     	; 0x1c46 <__divsf3_pse+0x6c>
    1c52:	86 95       	lsr	r24
    1c54:	77 95       	ror	r23
    1c56:	67 95       	ror	r22
    1c58:	b7 95       	ror	r27
    1c5a:	f7 95       	ror	r31
    1c5c:	9f 5f       	subi	r25, 0xFF	; 255
    1c5e:	c9 f7       	brne	.-14     	; 0x1c52 <__divsf3_pse+0x78>
    1c60:	88 0f       	add	r24, r24
    1c62:	91 1d       	adc	r25, r1
    1c64:	96 95       	lsr	r25
    1c66:	87 95       	ror	r24
    1c68:	97 f9       	bld	r25, 7
    1c6a:	08 95       	ret
    1c6c:	e1 e0       	ldi	r30, 0x01	; 1
    1c6e:	66 0f       	add	r22, r22
    1c70:	77 1f       	adc	r23, r23
    1c72:	88 1f       	adc	r24, r24
    1c74:	bb 1f       	adc	r27, r27
    1c76:	62 17       	cp	r22, r18
    1c78:	73 07       	cpc	r23, r19
    1c7a:	84 07       	cpc	r24, r20
    1c7c:	ba 07       	cpc	r27, r26
    1c7e:	20 f0       	brcs	.+8      	; 0x1c88 <__divsf3_pse+0xae>
    1c80:	62 1b       	sub	r22, r18
    1c82:	73 0b       	sbc	r23, r19
    1c84:	84 0b       	sbc	r24, r20
    1c86:	ba 0b       	sbc	r27, r26
    1c88:	ee 1f       	adc	r30, r30
    1c8a:	88 f7       	brcc	.-30     	; 0x1c6e <__divsf3_pse+0x94>
    1c8c:	e0 95       	com	r30
    1c8e:	08 95       	ret

00001c90 <__floatunsisf>:
    1c90:	e8 94       	clt
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <__floatsisf+0x12>

00001c94 <__floatsisf>:
    1c94:	97 fb       	bst	r25, 7
    1c96:	3e f4       	brtc	.+14     	; 0x1ca6 <__floatsisf+0x12>
    1c98:	90 95       	com	r25
    1c9a:	80 95       	com	r24
    1c9c:	70 95       	com	r23
    1c9e:	61 95       	neg	r22
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	99 23       	and	r25, r25
    1ca8:	a9 f0       	breq	.+42     	; 0x1cd4 <__floatsisf+0x40>
    1caa:	f9 2f       	mov	r31, r25
    1cac:	96 e9       	ldi	r25, 0x96	; 150
    1cae:	bb 27       	eor	r27, r27
    1cb0:	93 95       	inc	r25
    1cb2:	f6 95       	lsr	r31
    1cb4:	87 95       	ror	r24
    1cb6:	77 95       	ror	r23
    1cb8:	67 95       	ror	r22
    1cba:	b7 95       	ror	r27
    1cbc:	f1 11       	cpse	r31, r1
    1cbe:	f8 cf       	rjmp	.-16     	; 0x1cb0 <__floatsisf+0x1c>
    1cc0:	fa f4       	brpl	.+62     	; 0x1d00 <__floatsisf+0x6c>
    1cc2:	bb 0f       	add	r27, r27
    1cc4:	11 f4       	brne	.+4      	; 0x1cca <__floatsisf+0x36>
    1cc6:	60 ff       	sbrs	r22, 0
    1cc8:	1b c0       	rjmp	.+54     	; 0x1d00 <__floatsisf+0x6c>
    1cca:	6f 5f       	subi	r22, 0xFF	; 255
    1ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cce:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <__floatsisf+0x6c>
    1cd4:	88 23       	and	r24, r24
    1cd6:	11 f0       	breq	.+4      	; 0x1cdc <__floatsisf+0x48>
    1cd8:	96 e9       	ldi	r25, 0x96	; 150
    1cda:	11 c0       	rjmp	.+34     	; 0x1cfe <__floatsisf+0x6a>
    1cdc:	77 23       	and	r23, r23
    1cde:	21 f0       	breq	.+8      	; 0x1ce8 <__floatsisf+0x54>
    1ce0:	9e e8       	ldi	r25, 0x8E	; 142
    1ce2:	87 2f       	mov	r24, r23
    1ce4:	76 2f       	mov	r23, r22
    1ce6:	05 c0       	rjmp	.+10     	; 0x1cf2 <__floatsisf+0x5e>
    1ce8:	66 23       	and	r22, r22
    1cea:	71 f0       	breq	.+28     	; 0x1d08 <__floatsisf+0x74>
    1cec:	96 e8       	ldi	r25, 0x86	; 134
    1cee:	86 2f       	mov	r24, r22
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	2a f0       	brmi	.+10     	; 0x1d00 <__floatsisf+0x6c>
    1cf6:	9a 95       	dec	r25
    1cf8:	66 0f       	add	r22, r22
    1cfa:	77 1f       	adc	r23, r23
    1cfc:	88 1f       	adc	r24, r24
    1cfe:	da f7       	brpl	.-10     	; 0x1cf6 <__floatsisf+0x62>
    1d00:	88 0f       	add	r24, r24
    1d02:	96 95       	lsr	r25
    1d04:	87 95       	ror	r24
    1d06:	97 f9       	bld	r25, 7
    1d08:	08 95       	ret

00001d0a <__fp_cmp>:
    1d0a:	99 0f       	add	r25, r25
    1d0c:	00 08       	sbc	r0, r0
    1d0e:	55 0f       	add	r21, r21
    1d10:	aa 0b       	sbc	r26, r26
    1d12:	e0 e8       	ldi	r30, 0x80	; 128
    1d14:	fe ef       	ldi	r31, 0xFE	; 254
    1d16:	16 16       	cp	r1, r22
    1d18:	17 06       	cpc	r1, r23
    1d1a:	e8 07       	cpc	r30, r24
    1d1c:	f9 07       	cpc	r31, r25
    1d1e:	c0 f0       	brcs	.+48     	; 0x1d50 <__fp_cmp+0x46>
    1d20:	12 16       	cp	r1, r18
    1d22:	13 06       	cpc	r1, r19
    1d24:	e4 07       	cpc	r30, r20
    1d26:	f5 07       	cpc	r31, r21
    1d28:	98 f0       	brcs	.+38     	; 0x1d50 <__fp_cmp+0x46>
    1d2a:	62 1b       	sub	r22, r18
    1d2c:	73 0b       	sbc	r23, r19
    1d2e:	84 0b       	sbc	r24, r20
    1d30:	95 0b       	sbc	r25, r21
    1d32:	39 f4       	brne	.+14     	; 0x1d42 <__fp_cmp+0x38>
    1d34:	0a 26       	eor	r0, r26
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <__fp_cmp+0x46>
    1d38:	23 2b       	or	r18, r19
    1d3a:	24 2b       	or	r18, r20
    1d3c:	25 2b       	or	r18, r21
    1d3e:	21 f4       	brne	.+8      	; 0x1d48 <__fp_cmp+0x3e>
    1d40:	08 95       	ret
    1d42:	0a 26       	eor	r0, r26
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <__fp_cmp+0x3e>
    1d46:	a1 40       	sbci	r26, 0x01	; 1
    1d48:	a6 95       	lsr	r26
    1d4a:	8f ef       	ldi	r24, 0xFF	; 255
    1d4c:	81 1d       	adc	r24, r1
    1d4e:	81 1d       	adc	r24, r1
    1d50:	08 95       	ret

00001d52 <__fp_inf>:
    1d52:	97 f9       	bld	r25, 7
    1d54:	9f 67       	ori	r25, 0x7F	; 127
    1d56:	80 e8       	ldi	r24, 0x80	; 128
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	08 95       	ret

00001d5e <__fp_nan>:
    1d5e:	9f ef       	ldi	r25, 0xFF	; 255
    1d60:	80 ec       	ldi	r24, 0xC0	; 192
    1d62:	08 95       	ret

00001d64 <__fp_pscA>:
    1d64:	00 24       	eor	r0, r0
    1d66:	0a 94       	dec	r0
    1d68:	16 16       	cp	r1, r22
    1d6a:	17 06       	cpc	r1, r23
    1d6c:	18 06       	cpc	r1, r24
    1d6e:	09 06       	cpc	r0, r25
    1d70:	08 95       	ret

00001d72 <__fp_pscB>:
    1d72:	00 24       	eor	r0, r0
    1d74:	0a 94       	dec	r0
    1d76:	12 16       	cp	r1, r18
    1d78:	13 06       	cpc	r1, r19
    1d7a:	14 06       	cpc	r1, r20
    1d7c:	05 06       	cpc	r0, r21
    1d7e:	08 95       	ret

00001d80 <__fp_round>:
    1d80:	09 2e       	mov	r0, r25
    1d82:	03 94       	inc	r0
    1d84:	00 0c       	add	r0, r0
    1d86:	11 f4       	brne	.+4      	; 0x1d8c <__fp_round+0xc>
    1d88:	88 23       	and	r24, r24
    1d8a:	52 f0       	brmi	.+20     	; 0x1da0 <__fp_round+0x20>
    1d8c:	bb 0f       	add	r27, r27
    1d8e:	40 f4       	brcc	.+16     	; 0x1da0 <__fp_round+0x20>
    1d90:	bf 2b       	or	r27, r31
    1d92:	11 f4       	brne	.+4      	; 0x1d98 <__fp_round+0x18>
    1d94:	60 ff       	sbrs	r22, 0
    1d96:	04 c0       	rjmp	.+8      	; 0x1da0 <__fp_round+0x20>
    1d98:	6f 5f       	subi	r22, 0xFF	; 255
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	08 95       	ret

00001da2 <__fp_split3>:
    1da2:	57 fd       	sbrc	r21, 7
    1da4:	90 58       	subi	r25, 0x80	; 128
    1da6:	44 0f       	add	r20, r20
    1da8:	55 1f       	adc	r21, r21
    1daa:	59 f0       	breq	.+22     	; 0x1dc2 <__fp_splitA+0x10>
    1dac:	5f 3f       	cpi	r21, 0xFF	; 255
    1dae:	71 f0       	breq	.+28     	; 0x1dcc <__fp_splitA+0x1a>
    1db0:	47 95       	ror	r20

00001db2 <__fp_splitA>:
    1db2:	88 0f       	add	r24, r24
    1db4:	97 fb       	bst	r25, 7
    1db6:	99 1f       	adc	r25, r25
    1db8:	61 f0       	breq	.+24     	; 0x1dd2 <__fp_splitA+0x20>
    1dba:	9f 3f       	cpi	r25, 0xFF	; 255
    1dbc:	79 f0       	breq	.+30     	; 0x1ddc <__fp_splitA+0x2a>
    1dbe:	87 95       	ror	r24
    1dc0:	08 95       	ret
    1dc2:	12 16       	cp	r1, r18
    1dc4:	13 06       	cpc	r1, r19
    1dc6:	14 06       	cpc	r1, r20
    1dc8:	55 1f       	adc	r21, r21
    1dca:	f2 cf       	rjmp	.-28     	; 0x1db0 <__fp_split3+0xe>
    1dcc:	46 95       	lsr	r20
    1dce:	f1 df       	rcall	.-30     	; 0x1db2 <__fp_splitA>
    1dd0:	08 c0       	rjmp	.+16     	; 0x1de2 <__fp_splitA+0x30>
    1dd2:	16 16       	cp	r1, r22
    1dd4:	17 06       	cpc	r1, r23
    1dd6:	18 06       	cpc	r1, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	f1 cf       	rjmp	.-30     	; 0x1dbe <__fp_splitA+0xc>
    1ddc:	86 95       	lsr	r24
    1dde:	71 05       	cpc	r23, r1
    1de0:	61 05       	cpc	r22, r1
    1de2:	08 94       	sec
    1de4:	08 95       	ret

00001de6 <__fp_zero>:
    1de6:	e8 94       	clt

00001de8 <__fp_szero>:
    1de8:	bb 27       	eor	r27, r27
    1dea:	66 27       	eor	r22, r22
    1dec:	77 27       	eor	r23, r23
    1dee:	cb 01       	movw	r24, r22
    1df0:	97 f9       	bld	r25, 7
    1df2:	08 95       	ret

00001df4 <__gesf2>:
    1df4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <__fp_cmp>
    1df8:	08 f4       	brcc	.+2      	; 0x1dfc <__gesf2+0x8>
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	08 95       	ret

00001dfe <vfprintf>:
    1dfe:	a0 e1       	ldi	r26, 0x10	; 16
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e5 e0       	ldi	r30, 0x05	; 5
    1e04:	ff e0       	ldi	r31, 0x0F	; 15
    1e06:	0c 94 90 12 	jmp	0x2520	; 0x2520 <__prologue_saves__>
    1e0a:	7c 01       	movw	r14, r24
    1e0c:	1b 01       	movw	r2, r22
    1e0e:	6a 01       	movw	r12, r20
    1e10:	fc 01       	movw	r30, r24
    1e12:	17 82       	std	Z+7, r1	; 0x07
    1e14:	16 82       	std	Z+6, r1	; 0x06
    1e16:	83 81       	ldd	r24, Z+3	; 0x03
    1e18:	81 ff       	sbrs	r24, 1
    1e1a:	44 c3       	rjmp	.+1672   	; 0x24a4 <vfprintf+0x6a6>
    1e1c:	9e 01       	movw	r18, r28
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	39 01       	movw	r6, r18
    1e24:	f7 01       	movw	r30, r14
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	f1 01       	movw	r30, r2
    1e2a:	93 fd       	sbrc	r25, 3
    1e2c:	85 91       	lpm	r24, Z+
    1e2e:	93 ff       	sbrs	r25, 3
    1e30:	81 91       	ld	r24, Z+
    1e32:	1f 01       	movw	r2, r30
    1e34:	88 23       	and	r24, r24
    1e36:	09 f4       	brne	.+2      	; 0x1e3a <vfprintf+0x3c>
    1e38:	31 c3       	rjmp	.+1634   	; 0x249c <vfprintf+0x69e>
    1e3a:	85 32       	cpi	r24, 0x25	; 37
    1e3c:	39 f4       	brne	.+14     	; 0x1e4c <vfprintf+0x4e>
    1e3e:	93 fd       	sbrc	r25, 3
    1e40:	85 91       	lpm	r24, Z+
    1e42:	93 ff       	sbrs	r25, 3
    1e44:	81 91       	ld	r24, Z+
    1e46:	1f 01       	movw	r2, r30
    1e48:	85 32       	cpi	r24, 0x25	; 37
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <vfprintf+0x5c>
    1e4c:	b7 01       	movw	r22, r14
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    1e54:	56 01       	movw	r10, r12
    1e56:	65 01       	movw	r12, r10
    1e58:	e5 cf       	rjmp	.-54     	; 0x1e24 <vfprintf+0x26>
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	51 2c       	mov	r5, r1
    1e5e:	91 2c       	mov	r9, r1
    1e60:	ff e1       	ldi	r31, 0x1F	; 31
    1e62:	f9 15       	cp	r31, r9
    1e64:	d8 f0       	brcs	.+54     	; 0x1e9c <vfprintf+0x9e>
    1e66:	8b 32       	cpi	r24, 0x2B	; 43
    1e68:	79 f0       	breq	.+30     	; 0x1e88 <vfprintf+0x8a>
    1e6a:	38 f4       	brcc	.+14     	; 0x1e7a <vfprintf+0x7c>
    1e6c:	80 32       	cpi	r24, 0x20	; 32
    1e6e:	79 f0       	breq	.+30     	; 0x1e8e <vfprintf+0x90>
    1e70:	83 32       	cpi	r24, 0x23	; 35
    1e72:	a1 f4       	brne	.+40     	; 0x1e9c <vfprintf+0x9e>
    1e74:	f9 2d       	mov	r31, r9
    1e76:	f0 61       	ori	r31, 0x10	; 16
    1e78:	2e c0       	rjmp	.+92     	; 0x1ed6 <vfprintf+0xd8>
    1e7a:	8d 32       	cpi	r24, 0x2D	; 45
    1e7c:	61 f0       	breq	.+24     	; 0x1e96 <vfprintf+0x98>
    1e7e:	80 33       	cpi	r24, 0x30	; 48
    1e80:	69 f4       	brne	.+26     	; 0x1e9c <vfprintf+0x9e>
    1e82:	29 2d       	mov	r18, r9
    1e84:	21 60       	ori	r18, 0x01	; 1
    1e86:	2d c0       	rjmp	.+90     	; 0x1ee2 <vfprintf+0xe4>
    1e88:	39 2d       	mov	r19, r9
    1e8a:	32 60       	ori	r19, 0x02	; 2
    1e8c:	93 2e       	mov	r9, r19
    1e8e:	89 2d       	mov	r24, r9
    1e90:	84 60       	ori	r24, 0x04	; 4
    1e92:	98 2e       	mov	r9, r24
    1e94:	2a c0       	rjmp	.+84     	; 0x1eea <vfprintf+0xec>
    1e96:	e9 2d       	mov	r30, r9
    1e98:	e8 60       	ori	r30, 0x08	; 8
    1e9a:	15 c0       	rjmp	.+42     	; 0x1ec6 <vfprintf+0xc8>
    1e9c:	97 fc       	sbrc	r9, 7
    1e9e:	2d c0       	rjmp	.+90     	; 0x1efa <vfprintf+0xfc>
    1ea0:	20 ed       	ldi	r18, 0xD0	; 208
    1ea2:	28 0f       	add	r18, r24
    1ea4:	2a 30       	cpi	r18, 0x0A	; 10
    1ea6:	88 f4       	brcc	.+34     	; 0x1eca <vfprintf+0xcc>
    1ea8:	96 fe       	sbrs	r9, 6
    1eaa:	06 c0       	rjmp	.+12     	; 0x1eb8 <vfprintf+0xba>
    1eac:	3a e0       	ldi	r19, 0x0A	; 10
    1eae:	13 9f       	mul	r17, r19
    1eb0:	20 0d       	add	r18, r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	12 2f       	mov	r17, r18
    1eb6:	19 c0       	rjmp	.+50     	; 0x1eea <vfprintf+0xec>
    1eb8:	8a e0       	ldi	r24, 0x0A	; 10
    1eba:	58 9e       	mul	r5, r24
    1ebc:	20 0d       	add	r18, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	52 2e       	mov	r5, r18
    1ec2:	e9 2d       	mov	r30, r9
    1ec4:	e0 62       	ori	r30, 0x20	; 32
    1ec6:	9e 2e       	mov	r9, r30
    1ec8:	10 c0       	rjmp	.+32     	; 0x1eea <vfprintf+0xec>
    1eca:	8e 32       	cpi	r24, 0x2E	; 46
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <vfprintf+0xdc>
    1ece:	96 fc       	sbrc	r9, 6
    1ed0:	e5 c2       	rjmp	.+1482   	; 0x249c <vfprintf+0x69e>
    1ed2:	f9 2d       	mov	r31, r9
    1ed4:	f0 64       	ori	r31, 0x40	; 64
    1ed6:	9f 2e       	mov	r9, r31
    1ed8:	08 c0       	rjmp	.+16     	; 0x1eea <vfprintf+0xec>
    1eda:	8c 36       	cpi	r24, 0x6C	; 108
    1edc:	21 f4       	brne	.+8      	; 0x1ee6 <vfprintf+0xe8>
    1ede:	29 2d       	mov	r18, r9
    1ee0:	20 68       	ori	r18, 0x80	; 128
    1ee2:	92 2e       	mov	r9, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <vfprintf+0xec>
    1ee6:	88 36       	cpi	r24, 0x68	; 104
    1ee8:	41 f4       	brne	.+16     	; 0x1efa <vfprintf+0xfc>
    1eea:	f1 01       	movw	r30, r2
    1eec:	93 fd       	sbrc	r25, 3
    1eee:	85 91       	lpm	r24, Z+
    1ef0:	93 ff       	sbrs	r25, 3
    1ef2:	81 91       	ld	r24, Z+
    1ef4:	1f 01       	movw	r2, r30
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	b3 cf       	rjmp	.-154    	; 0x1e60 <vfprintf+0x62>
    1efa:	9b eb       	ldi	r25, 0xBB	; 187
    1efc:	98 0f       	add	r25, r24
    1efe:	93 30       	cpi	r25, 0x03	; 3
    1f00:	20 f4       	brcc	.+8      	; 0x1f0a <vfprintf+0x10c>
    1f02:	99 2d       	mov	r25, r9
    1f04:	90 61       	ori	r25, 0x10	; 16
    1f06:	80 5e       	subi	r24, 0xE0	; 224
    1f08:	07 c0       	rjmp	.+14     	; 0x1f18 <vfprintf+0x11a>
    1f0a:	9b e9       	ldi	r25, 0x9B	; 155
    1f0c:	98 0f       	add	r25, r24
    1f0e:	93 30       	cpi	r25, 0x03	; 3
    1f10:	08 f0       	brcs	.+2      	; 0x1f14 <vfprintf+0x116>
    1f12:	66 c1       	rjmp	.+716    	; 0x21e0 <vfprintf+0x3e2>
    1f14:	99 2d       	mov	r25, r9
    1f16:	9f 7e       	andi	r25, 0xEF	; 239
    1f18:	96 ff       	sbrs	r25, 6
    1f1a:	16 e0       	ldi	r17, 0x06	; 6
    1f1c:	9f 73       	andi	r25, 0x3F	; 63
    1f1e:	99 2e       	mov	r9, r25
    1f20:	85 36       	cpi	r24, 0x65	; 101
    1f22:	19 f4       	brne	.+6      	; 0x1f2a <vfprintf+0x12c>
    1f24:	90 64       	ori	r25, 0x40	; 64
    1f26:	99 2e       	mov	r9, r25
    1f28:	08 c0       	rjmp	.+16     	; 0x1f3a <vfprintf+0x13c>
    1f2a:	86 36       	cpi	r24, 0x66	; 102
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <vfprintf+0x138>
    1f2e:	39 2f       	mov	r19, r25
    1f30:	30 68       	ori	r19, 0x80	; 128
    1f32:	93 2e       	mov	r9, r19
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <vfprintf+0x13c>
    1f36:	11 11       	cpse	r17, r1
    1f38:	11 50       	subi	r17, 0x01	; 1
    1f3a:	97 fe       	sbrs	r9, 7
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <vfprintf+0x14e>
    1f3e:	1c 33       	cpi	r17, 0x3C	; 60
    1f40:	50 f4       	brcc	.+20     	; 0x1f56 <vfprintf+0x158>
    1f42:	44 24       	eor	r4, r4
    1f44:	43 94       	inc	r4
    1f46:	41 0e       	add	r4, r17
    1f48:	27 e0       	ldi	r18, 0x07	; 7
    1f4a:	0b c0       	rjmp	.+22     	; 0x1f62 <vfprintf+0x164>
    1f4c:	18 30       	cpi	r17, 0x08	; 8
    1f4e:	38 f0       	brcs	.+14     	; 0x1f5e <vfprintf+0x160>
    1f50:	27 e0       	ldi	r18, 0x07	; 7
    1f52:	17 e0       	ldi	r17, 0x07	; 7
    1f54:	05 c0       	rjmp	.+10     	; 0x1f60 <vfprintf+0x162>
    1f56:	27 e0       	ldi	r18, 0x07	; 7
    1f58:	9c e3       	ldi	r25, 0x3C	; 60
    1f5a:	49 2e       	mov	r4, r25
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <vfprintf+0x164>
    1f5e:	21 2f       	mov	r18, r17
    1f60:	41 2c       	mov	r4, r1
    1f62:	56 01       	movw	r10, r12
    1f64:	84 e0       	ldi	r24, 0x04	; 4
    1f66:	a8 0e       	add	r10, r24
    1f68:	b1 1c       	adc	r11, r1
    1f6a:	f6 01       	movw	r30, r12
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	04 2d       	mov	r16, r4
    1f76:	a3 01       	movw	r20, r6
    1f78:	0e 94 37 13 	call	0x266e	; 0x266e <__ftoa_engine>
    1f7c:	6c 01       	movw	r12, r24
    1f7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f80:	fc 87       	std	Y+12, r31	; 0x0c
    1f82:	f0 ff       	sbrs	r31, 0
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <vfprintf+0x18c>
    1f86:	f3 ff       	sbrs	r31, 3
    1f88:	06 c0       	rjmp	.+12     	; 0x1f96 <vfprintf+0x198>
    1f8a:	91 fc       	sbrc	r9, 1
    1f8c:	06 c0       	rjmp	.+12     	; 0x1f9a <vfprintf+0x19c>
    1f8e:	92 fe       	sbrs	r9, 2
    1f90:	06 c0       	rjmp	.+12     	; 0x1f9e <vfprintf+0x1a0>
    1f92:	00 e2       	ldi	r16, 0x20	; 32
    1f94:	05 c0       	rjmp	.+10     	; 0x1fa0 <vfprintf+0x1a2>
    1f96:	0d e2       	ldi	r16, 0x2D	; 45
    1f98:	03 c0       	rjmp	.+6      	; 0x1fa0 <vfprintf+0x1a2>
    1f9a:	0b e2       	ldi	r16, 0x2B	; 43
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <vfprintf+0x1a2>
    1f9e:	00 e0       	ldi	r16, 0x00	; 0
    1fa0:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa2:	8c 70       	andi	r24, 0x0C	; 12
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <vfprintf+0x1ae>
    1fa6:	01 11       	cpse	r16, r1
    1fa8:	5a c2       	rjmp	.+1204   	; 0x245e <vfprintf+0x660>
    1faa:	9b c2       	rjmp	.+1334   	; 0x24e2 <vfprintf+0x6e4>
    1fac:	97 fe       	sbrs	r9, 7
    1fae:	10 c0       	rjmp	.+32     	; 0x1fd0 <vfprintf+0x1d2>
    1fb0:	4c 0c       	add	r4, r12
    1fb2:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fb4:	f4 ff       	sbrs	r31, 4
    1fb6:	04 c0       	rjmp	.+8      	; 0x1fc0 <vfprintf+0x1c2>
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	81 33       	cpi	r24, 0x31	; 49
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <vfprintf+0x1c2>
    1fbe:	4a 94       	dec	r4
    1fc0:	14 14       	cp	r1, r4
    1fc2:	74 f5       	brge	.+92     	; 0x2020 <vfprintf+0x222>
    1fc4:	28 e0       	ldi	r18, 0x08	; 8
    1fc6:	24 15       	cp	r18, r4
    1fc8:	78 f5       	brcc	.+94     	; 0x2028 <vfprintf+0x22a>
    1fca:	88 e0       	ldi	r24, 0x08	; 8
    1fcc:	48 2e       	mov	r4, r24
    1fce:	2c c0       	rjmp	.+88     	; 0x2028 <vfprintf+0x22a>
    1fd0:	96 fc       	sbrc	r9, 6
    1fd2:	2a c0       	rjmp	.+84     	; 0x2028 <vfprintf+0x22a>
    1fd4:	81 2f       	mov	r24, r17
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	8c 15       	cp	r24, r12
    1fda:	9d 05       	cpc	r25, r13
    1fdc:	9c f0       	brlt	.+38     	; 0x2004 <vfprintf+0x206>
    1fde:	3c ef       	ldi	r19, 0xFC	; 252
    1fe0:	c3 16       	cp	r12, r19
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	d3 06       	cpc	r13, r19
    1fe6:	74 f0       	brlt	.+28     	; 0x2004 <vfprintf+0x206>
    1fe8:	89 2d       	mov	r24, r9
    1fea:	80 68       	ori	r24, 0x80	; 128
    1fec:	98 2e       	mov	r9, r24
    1fee:	0a c0       	rjmp	.+20     	; 0x2004 <vfprintf+0x206>
    1ff0:	e2 e0       	ldi	r30, 0x02	; 2
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	ec 0f       	add	r30, r28
    1ff6:	fd 1f       	adc	r31, r29
    1ff8:	e1 0f       	add	r30, r17
    1ffa:	f1 1d       	adc	r31, r1
    1ffc:	80 81       	ld	r24, Z
    1ffe:	80 33       	cpi	r24, 0x30	; 48
    2000:	19 f4       	brne	.+6      	; 0x2008 <vfprintf+0x20a>
    2002:	11 50       	subi	r17, 0x01	; 1
    2004:	11 11       	cpse	r17, r1
    2006:	f4 cf       	rjmp	.-24     	; 0x1ff0 <vfprintf+0x1f2>
    2008:	97 fe       	sbrs	r9, 7
    200a:	0e c0       	rjmp	.+28     	; 0x2028 <vfprintf+0x22a>
    200c:	44 24       	eor	r4, r4
    200e:	43 94       	inc	r4
    2010:	41 0e       	add	r4, r17
    2012:	81 2f       	mov	r24, r17
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	c8 16       	cp	r12, r24
    2018:	d9 06       	cpc	r13, r25
    201a:	2c f4       	brge	.+10     	; 0x2026 <vfprintf+0x228>
    201c:	1c 19       	sub	r17, r12
    201e:	04 c0       	rjmp	.+8      	; 0x2028 <vfprintf+0x22a>
    2020:	44 24       	eor	r4, r4
    2022:	43 94       	inc	r4
    2024:	01 c0       	rjmp	.+2      	; 0x2028 <vfprintf+0x22a>
    2026:	10 e0       	ldi	r17, 0x00	; 0
    2028:	97 fe       	sbrs	r9, 7
    202a:	06 c0       	rjmp	.+12     	; 0x2038 <vfprintf+0x23a>
    202c:	1c 14       	cp	r1, r12
    202e:	1d 04       	cpc	r1, r13
    2030:	34 f4       	brge	.+12     	; 0x203e <vfprintf+0x240>
    2032:	c6 01       	movw	r24, r12
    2034:	01 96       	adiw	r24, 0x01	; 1
    2036:	05 c0       	rjmp	.+10     	; 0x2042 <vfprintf+0x244>
    2038:	85 e0       	ldi	r24, 0x05	; 5
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <vfprintf+0x244>
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	01 11       	cpse	r16, r1
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	11 23       	and	r17, r17
    2048:	31 f0       	breq	.+12     	; 0x2056 <vfprintf+0x258>
    204a:	21 2f       	mov	r18, r17
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	2f 5f       	subi	r18, 0xFF	; 255
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	82 0f       	add	r24, r18
    2054:	93 1f       	adc	r25, r19
    2056:	25 2d       	mov	r18, r5
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	82 17       	cp	r24, r18
    205c:	93 07       	cpc	r25, r19
    205e:	14 f4       	brge	.+4      	; 0x2064 <vfprintf+0x266>
    2060:	58 1a       	sub	r5, r24
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <vfprintf+0x268>
    2064:	51 2c       	mov	r5, r1
    2066:	89 2d       	mov	r24, r9
    2068:	89 70       	andi	r24, 0x09	; 9
    206a:	49 f4       	brne	.+18     	; 0x207e <vfprintf+0x280>
    206c:	55 20       	and	r5, r5
    206e:	39 f0       	breq	.+14     	; 0x207e <vfprintf+0x280>
    2070:	b7 01       	movw	r22, r14
    2072:	80 e2       	ldi	r24, 0x20	; 32
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    207a:	5a 94       	dec	r5
    207c:	f7 cf       	rjmp	.-18     	; 0x206c <vfprintf+0x26e>
    207e:	00 23       	and	r16, r16
    2080:	29 f0       	breq	.+10     	; 0x208c <vfprintf+0x28e>
    2082:	b7 01       	movw	r22, r14
    2084:	80 2f       	mov	r24, r16
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    208c:	93 fc       	sbrc	r9, 3
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <vfprintf+0x2a4>
    2090:	55 20       	and	r5, r5
    2092:	39 f0       	breq	.+14     	; 0x20a2 <vfprintf+0x2a4>
    2094:	b7 01       	movw	r22, r14
    2096:	80 e3       	ldi	r24, 0x30	; 48
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    209e:	5a 94       	dec	r5
    20a0:	f7 cf       	rjmp	.-18     	; 0x2090 <vfprintf+0x292>
    20a2:	97 fe       	sbrs	r9, 7
    20a4:	4c c0       	rjmp	.+152    	; 0x213e <vfprintf+0x340>
    20a6:	46 01       	movw	r8, r12
    20a8:	d7 fe       	sbrs	r13, 7
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <vfprintf+0x2b2>
    20ac:	81 2c       	mov	r8, r1
    20ae:	91 2c       	mov	r9, r1
    20b0:	c6 01       	movw	r24, r12
    20b2:	88 19       	sub	r24, r8
    20b4:	99 09       	sbc	r25, r9
    20b6:	f3 01       	movw	r30, r6
    20b8:	e8 0f       	add	r30, r24
    20ba:	f9 1f       	adc	r31, r25
    20bc:	fe 87       	std	Y+14, r31	; 0x0e
    20be:	ed 87       	std	Y+13, r30	; 0x0d
    20c0:	96 01       	movw	r18, r12
    20c2:	24 19       	sub	r18, r4
    20c4:	31 09       	sbc	r19, r1
    20c6:	38 8b       	std	Y+16, r19	; 0x10
    20c8:	2f 87       	std	Y+15, r18	; 0x0f
    20ca:	01 2f       	mov	r16, r17
    20cc:	10 e0       	ldi	r17, 0x00	; 0
    20ce:	11 95       	neg	r17
    20d0:	01 95       	neg	r16
    20d2:	11 09       	sbc	r17, r1
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	83 16       	cp	r8, r19
    20d8:	93 06       	cpc	r9, r19
    20da:	29 f4       	brne	.+10     	; 0x20e6 <vfprintf+0x2e8>
    20dc:	b7 01       	movw	r22, r14
    20de:	8e e2       	ldi	r24, 0x2E	; 46
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    20e6:	c8 14       	cp	r12, r8
    20e8:	d9 04       	cpc	r13, r9
    20ea:	4c f0       	brlt	.+18     	; 0x20fe <vfprintf+0x300>
    20ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ee:	98 89       	ldd	r25, Y+16	; 0x10
    20f0:	88 15       	cp	r24, r8
    20f2:	99 05       	cpc	r25, r9
    20f4:	24 f4       	brge	.+8      	; 0x20fe <vfprintf+0x300>
    20f6:	ed 85       	ldd	r30, Y+13	; 0x0d
    20f8:	fe 85       	ldd	r31, Y+14	; 0x0e
    20fa:	81 81       	ldd	r24, Z+1	; 0x01
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <vfprintf+0x302>
    20fe:	80 e3       	ldi	r24, 0x30	; 48
    2100:	f1 e0       	ldi	r31, 0x01	; 1
    2102:	8f 1a       	sub	r8, r31
    2104:	91 08       	sbc	r9, r1
    2106:	2d 85       	ldd	r18, Y+13	; 0x0d
    2108:	3e 85       	ldd	r19, Y+14	; 0x0e
    210a:	2f 5f       	subi	r18, 0xFF	; 255
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	3e 87       	std	Y+14, r19	; 0x0e
    2110:	2d 87       	std	Y+13, r18	; 0x0d
    2112:	80 16       	cp	r8, r16
    2114:	91 06       	cpc	r9, r17
    2116:	2c f0       	brlt	.+10     	; 0x2122 <vfprintf+0x324>
    2118:	b7 01       	movw	r22, r14
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2120:	d9 cf       	rjmp	.-78     	; 0x20d4 <vfprintf+0x2d6>
    2122:	c8 14       	cp	r12, r8
    2124:	d9 04       	cpc	r13, r9
    2126:	41 f4       	brne	.+16     	; 0x2138 <vfprintf+0x33a>
    2128:	9a 81       	ldd	r25, Y+2	; 0x02
    212a:	96 33       	cpi	r25, 0x36	; 54
    212c:	20 f4       	brcc	.+8      	; 0x2136 <vfprintf+0x338>
    212e:	95 33       	cpi	r25, 0x35	; 53
    2130:	19 f4       	brne	.+6      	; 0x2138 <vfprintf+0x33a>
    2132:	3c 85       	ldd	r19, Y+12	; 0x0c
    2134:	34 ff       	sbrs	r19, 4
    2136:	81 e3       	ldi	r24, 0x31	; 49
    2138:	b7 01       	movw	r22, r14
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	4e c0       	rjmp	.+156    	; 0x21da <vfprintf+0x3dc>
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	81 33       	cpi	r24, 0x31	; 49
    2142:	19 f0       	breq	.+6      	; 0x214a <vfprintf+0x34c>
    2144:	9c 85       	ldd	r25, Y+12	; 0x0c
    2146:	9f 7e       	andi	r25, 0xEF	; 239
    2148:	9c 87       	std	Y+12, r25	; 0x0c
    214a:	b7 01       	movw	r22, r14
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2152:	11 11       	cpse	r17, r1
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <vfprintf+0x362>
    2156:	94 fc       	sbrc	r9, 4
    2158:	18 c0       	rjmp	.+48     	; 0x218a <vfprintf+0x38c>
    215a:	85 e6       	ldi	r24, 0x65	; 101
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	17 c0       	rjmp	.+46     	; 0x218e <vfprintf+0x390>
    2160:	b7 01       	movw	r22, r14
    2162:	8e e2       	ldi	r24, 0x2E	; 46
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    216a:	1e 5f       	subi	r17, 0xFE	; 254
    216c:	82 e0       	ldi	r24, 0x02	; 2
    216e:	01 e0       	ldi	r16, 0x01	; 1
    2170:	08 0f       	add	r16, r24
    2172:	f3 01       	movw	r30, r6
    2174:	e8 0f       	add	r30, r24
    2176:	f1 1d       	adc	r31, r1
    2178:	80 81       	ld	r24, Z
    217a:	b7 01       	movw	r22, r14
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2182:	80 2f       	mov	r24, r16
    2184:	01 13       	cpse	r16, r17
    2186:	f3 cf       	rjmp	.-26     	; 0x216e <vfprintf+0x370>
    2188:	e6 cf       	rjmp	.-52     	; 0x2156 <vfprintf+0x358>
    218a:	85 e4       	ldi	r24, 0x45	; 69
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	b7 01       	movw	r22, r14
    2190:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2194:	d7 fc       	sbrc	r13, 7
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <vfprintf+0x3a6>
    2198:	c1 14       	cp	r12, r1
    219a:	d1 04       	cpc	r13, r1
    219c:	41 f4       	brne	.+16     	; 0x21ae <vfprintf+0x3b0>
    219e:	ec 85       	ldd	r30, Y+12	; 0x0c
    21a0:	e4 ff       	sbrs	r30, 4
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <vfprintf+0x3b0>
    21a4:	d1 94       	neg	r13
    21a6:	c1 94       	neg	r12
    21a8:	d1 08       	sbc	r13, r1
    21aa:	8d e2       	ldi	r24, 0x2D	; 45
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <vfprintf+0x3b2>
    21ae:	8b e2       	ldi	r24, 0x2B	; 43
    21b0:	b7 01       	movw	r22, r14
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	2a e0       	ldi	r18, 0x0A	; 10
    21bc:	c2 16       	cp	r12, r18
    21be:	d1 04       	cpc	r13, r1
    21c0:	2c f0       	brlt	.+10     	; 0x21cc <vfprintf+0x3ce>
    21c2:	8f 5f       	subi	r24, 0xFF	; 255
    21c4:	fa e0       	ldi	r31, 0x0A	; 10
    21c6:	cf 1a       	sub	r12, r31
    21c8:	d1 08       	sbc	r13, r1
    21ca:	f7 cf       	rjmp	.-18     	; 0x21ba <vfprintf+0x3bc>
    21cc:	b7 01       	movw	r22, r14
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    21d4:	b7 01       	movw	r22, r14
    21d6:	c6 01       	movw	r24, r12
    21d8:	c0 96       	adiw	r24, 0x30	; 48
    21da:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    21de:	54 c1       	rjmp	.+680    	; 0x2488 <vfprintf+0x68a>
    21e0:	83 36       	cpi	r24, 0x63	; 99
    21e2:	31 f0       	breq	.+12     	; 0x21f0 <vfprintf+0x3f2>
    21e4:	83 37       	cpi	r24, 0x73	; 115
    21e6:	79 f0       	breq	.+30     	; 0x2206 <vfprintf+0x408>
    21e8:	83 35       	cpi	r24, 0x53	; 83
    21ea:	09 f0       	breq	.+2      	; 0x21ee <vfprintf+0x3f0>
    21ec:	56 c0       	rjmp	.+172    	; 0x229a <vfprintf+0x49c>
    21ee:	20 c0       	rjmp	.+64     	; 0x2230 <vfprintf+0x432>
    21f0:	56 01       	movw	r10, r12
    21f2:	32 e0       	ldi	r19, 0x02	; 2
    21f4:	a3 0e       	add	r10, r19
    21f6:	b1 1c       	adc	r11, r1
    21f8:	f6 01       	movw	r30, r12
    21fa:	80 81       	ld	r24, Z
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	01 e0       	ldi	r16, 0x01	; 1
    2200:	10 e0       	ldi	r17, 0x00	; 0
    2202:	63 01       	movw	r12, r6
    2204:	12 c0       	rjmp	.+36     	; 0x222a <vfprintf+0x42c>
    2206:	56 01       	movw	r10, r12
    2208:	f2 e0       	ldi	r31, 0x02	; 2
    220a:	af 0e       	add	r10, r31
    220c:	b1 1c       	adc	r11, r1
    220e:	f6 01       	movw	r30, r12
    2210:	c0 80       	ld	r12, Z
    2212:	d1 80       	ldd	r13, Z+1	; 0x01
    2214:	96 fe       	sbrs	r9, 6
    2216:	03 c0       	rjmp	.+6      	; 0x221e <vfprintf+0x420>
    2218:	61 2f       	mov	r22, r17
    221a:	70 e0       	ldi	r23, 0x00	; 0
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <vfprintf+0x424>
    221e:	6f ef       	ldi	r22, 0xFF	; 255
    2220:	7f ef       	ldi	r23, 0xFF	; 255
    2222:	c6 01       	movw	r24, r12
    2224:	0e 94 1a 14 	call	0x2834	; 0x2834 <strnlen>
    2228:	8c 01       	movw	r16, r24
    222a:	f9 2d       	mov	r31, r9
    222c:	ff 77       	andi	r31, 0x7F	; 127
    222e:	14 c0       	rjmp	.+40     	; 0x2258 <vfprintf+0x45a>
    2230:	56 01       	movw	r10, r12
    2232:	22 e0       	ldi	r18, 0x02	; 2
    2234:	a2 0e       	add	r10, r18
    2236:	b1 1c       	adc	r11, r1
    2238:	f6 01       	movw	r30, r12
    223a:	c0 80       	ld	r12, Z
    223c:	d1 80       	ldd	r13, Z+1	; 0x01
    223e:	96 fe       	sbrs	r9, 6
    2240:	03 c0       	rjmp	.+6      	; 0x2248 <vfprintf+0x44a>
    2242:	61 2f       	mov	r22, r17
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	02 c0       	rjmp	.+4      	; 0x224c <vfprintf+0x44e>
    2248:	6f ef       	ldi	r22, 0xFF	; 255
    224a:	7f ef       	ldi	r23, 0xFF	; 255
    224c:	c6 01       	movw	r24, r12
    224e:	0e 94 0f 14 	call	0x281e	; 0x281e <strnlen_P>
    2252:	8c 01       	movw	r16, r24
    2254:	f9 2d       	mov	r31, r9
    2256:	f0 68       	ori	r31, 0x80	; 128
    2258:	9f 2e       	mov	r9, r31
    225a:	f3 fd       	sbrc	r31, 3
    225c:	1a c0       	rjmp	.+52     	; 0x2292 <vfprintf+0x494>
    225e:	85 2d       	mov	r24, r5
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	08 17       	cp	r16, r24
    2264:	19 07       	cpc	r17, r25
    2266:	a8 f4       	brcc	.+42     	; 0x2292 <vfprintf+0x494>
    2268:	b7 01       	movw	r22, r14
    226a:	80 e2       	ldi	r24, 0x20	; 32
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2272:	5a 94       	dec	r5
    2274:	f4 cf       	rjmp	.-24     	; 0x225e <vfprintf+0x460>
    2276:	f6 01       	movw	r30, r12
    2278:	97 fc       	sbrc	r9, 7
    227a:	85 91       	lpm	r24, Z+
    227c:	97 fe       	sbrs	r9, 7
    227e:	81 91       	ld	r24, Z+
    2280:	6f 01       	movw	r12, r30
    2282:	b7 01       	movw	r22, r14
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    228a:	51 10       	cpse	r5, r1
    228c:	5a 94       	dec	r5
    228e:	01 50       	subi	r16, 0x01	; 1
    2290:	11 09       	sbc	r17, r1
    2292:	01 15       	cp	r16, r1
    2294:	11 05       	cpc	r17, r1
    2296:	79 f7       	brne	.-34     	; 0x2276 <vfprintf+0x478>
    2298:	f7 c0       	rjmp	.+494    	; 0x2488 <vfprintf+0x68a>
    229a:	84 36       	cpi	r24, 0x64	; 100
    229c:	11 f0       	breq	.+4      	; 0x22a2 <vfprintf+0x4a4>
    229e:	89 36       	cpi	r24, 0x69	; 105
    22a0:	61 f5       	brne	.+88     	; 0x22fa <vfprintf+0x4fc>
    22a2:	56 01       	movw	r10, r12
    22a4:	97 fe       	sbrs	r9, 7
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <vfprintf+0x4bc>
    22a8:	24 e0       	ldi	r18, 0x04	; 4
    22aa:	a2 0e       	add	r10, r18
    22ac:	b1 1c       	adc	r11, r1
    22ae:	f6 01       	movw	r30, r12
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	93 81       	ldd	r25, Z+3	; 0x03
    22b8:	0a c0       	rjmp	.+20     	; 0x22ce <vfprintf+0x4d0>
    22ba:	f2 e0       	ldi	r31, 0x02	; 2
    22bc:	af 0e       	add	r10, r31
    22be:	b1 1c       	adc	r11, r1
    22c0:	f6 01       	movw	r30, r12
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	07 2e       	mov	r0, r23
    22c8:	00 0c       	add	r0, r0
    22ca:	88 0b       	sbc	r24, r24
    22cc:	99 0b       	sbc	r25, r25
    22ce:	f9 2d       	mov	r31, r9
    22d0:	ff 76       	andi	r31, 0x6F	; 111
    22d2:	9f 2e       	mov	r9, r31
    22d4:	97 ff       	sbrs	r25, 7
    22d6:	09 c0       	rjmp	.+18     	; 0x22ea <vfprintf+0x4ec>
    22d8:	90 95       	com	r25
    22da:	80 95       	com	r24
    22dc:	70 95       	com	r23
    22de:	61 95       	neg	r22
    22e0:	7f 4f       	sbci	r23, 0xFF	; 255
    22e2:	8f 4f       	sbci	r24, 0xFF	; 255
    22e4:	9f 4f       	sbci	r25, 0xFF	; 255
    22e6:	f0 68       	ori	r31, 0x80	; 128
    22e8:	9f 2e       	mov	r9, r31
    22ea:	2a e0       	ldi	r18, 0x0A	; 10
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	a3 01       	movw	r20, r6
    22f0:	0e 94 86 14 	call	0x290c	; 0x290c <__ultoa_invert>
    22f4:	c8 2e       	mov	r12, r24
    22f6:	c6 18       	sub	r12, r6
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <vfprintf+0x57a>
    22fa:	09 2d       	mov	r16, r9
    22fc:	85 37       	cpi	r24, 0x75	; 117
    22fe:	21 f4       	brne	.+8      	; 0x2308 <vfprintf+0x50a>
    2300:	0f 7e       	andi	r16, 0xEF	; 239
    2302:	2a e0       	ldi	r18, 0x0A	; 10
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	1d c0       	rjmp	.+58     	; 0x2342 <vfprintf+0x544>
    2308:	09 7f       	andi	r16, 0xF9	; 249
    230a:	8f 36       	cpi	r24, 0x6F	; 111
    230c:	91 f0       	breq	.+36     	; 0x2332 <vfprintf+0x534>
    230e:	18 f4       	brcc	.+6      	; 0x2316 <vfprintf+0x518>
    2310:	88 35       	cpi	r24, 0x58	; 88
    2312:	59 f0       	breq	.+22     	; 0x232a <vfprintf+0x52c>
    2314:	c3 c0       	rjmp	.+390    	; 0x249c <vfprintf+0x69e>
    2316:	80 37       	cpi	r24, 0x70	; 112
    2318:	19 f0       	breq	.+6      	; 0x2320 <vfprintf+0x522>
    231a:	88 37       	cpi	r24, 0x78	; 120
    231c:	11 f0       	breq	.+4      	; 0x2322 <vfprintf+0x524>
    231e:	be c0       	rjmp	.+380    	; 0x249c <vfprintf+0x69e>
    2320:	00 61       	ori	r16, 0x10	; 16
    2322:	04 ff       	sbrs	r16, 4
    2324:	09 c0       	rjmp	.+18     	; 0x2338 <vfprintf+0x53a>
    2326:	04 60       	ori	r16, 0x04	; 4
    2328:	07 c0       	rjmp	.+14     	; 0x2338 <vfprintf+0x53a>
    232a:	94 fe       	sbrs	r9, 4
    232c:	08 c0       	rjmp	.+16     	; 0x233e <vfprintf+0x540>
    232e:	06 60       	ori	r16, 0x06	; 6
    2330:	06 c0       	rjmp	.+12     	; 0x233e <vfprintf+0x540>
    2332:	28 e0       	ldi	r18, 0x08	; 8
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <vfprintf+0x544>
    2338:	20 e1       	ldi	r18, 0x10	; 16
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <vfprintf+0x544>
    233e:	20 e1       	ldi	r18, 0x10	; 16
    2340:	32 e0       	ldi	r19, 0x02	; 2
    2342:	56 01       	movw	r10, r12
    2344:	07 ff       	sbrs	r16, 7
    2346:	09 c0       	rjmp	.+18     	; 0x235a <vfprintf+0x55c>
    2348:	84 e0       	ldi	r24, 0x04	; 4
    234a:	a8 0e       	add	r10, r24
    234c:	b1 1c       	adc	r11, r1
    234e:	f6 01       	movw	r30, r12
    2350:	60 81       	ld	r22, Z
    2352:	71 81       	ldd	r23, Z+1	; 0x01
    2354:	82 81       	ldd	r24, Z+2	; 0x02
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	08 c0       	rjmp	.+16     	; 0x236a <vfprintf+0x56c>
    235a:	f2 e0       	ldi	r31, 0x02	; 2
    235c:	af 0e       	add	r10, r31
    235e:	b1 1c       	adc	r11, r1
    2360:	f6 01       	movw	r30, r12
    2362:	60 81       	ld	r22, Z
    2364:	71 81       	ldd	r23, Z+1	; 0x01
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	a3 01       	movw	r20, r6
    236c:	0e 94 86 14 	call	0x290c	; 0x290c <__ultoa_invert>
    2370:	c8 2e       	mov	r12, r24
    2372:	c6 18       	sub	r12, r6
    2374:	0f 77       	andi	r16, 0x7F	; 127
    2376:	90 2e       	mov	r9, r16
    2378:	96 fe       	sbrs	r9, 6
    237a:	0b c0       	rjmp	.+22     	; 0x2392 <vfprintf+0x594>
    237c:	09 2d       	mov	r16, r9
    237e:	0e 7f       	andi	r16, 0xFE	; 254
    2380:	c1 16       	cp	r12, r17
    2382:	50 f4       	brcc	.+20     	; 0x2398 <vfprintf+0x59a>
    2384:	94 fe       	sbrs	r9, 4
    2386:	0a c0       	rjmp	.+20     	; 0x239c <vfprintf+0x59e>
    2388:	92 fc       	sbrc	r9, 2
    238a:	08 c0       	rjmp	.+16     	; 0x239c <vfprintf+0x59e>
    238c:	09 2d       	mov	r16, r9
    238e:	0e 7e       	andi	r16, 0xEE	; 238
    2390:	05 c0       	rjmp	.+10     	; 0x239c <vfprintf+0x59e>
    2392:	dc 2c       	mov	r13, r12
    2394:	09 2d       	mov	r16, r9
    2396:	03 c0       	rjmp	.+6      	; 0x239e <vfprintf+0x5a0>
    2398:	dc 2c       	mov	r13, r12
    239a:	01 c0       	rjmp	.+2      	; 0x239e <vfprintf+0x5a0>
    239c:	d1 2e       	mov	r13, r17
    239e:	04 ff       	sbrs	r16, 4
    23a0:	0d c0       	rjmp	.+26     	; 0x23bc <vfprintf+0x5be>
    23a2:	fe 01       	movw	r30, r28
    23a4:	ec 0d       	add	r30, r12
    23a6:	f1 1d       	adc	r31, r1
    23a8:	80 81       	ld	r24, Z
    23aa:	80 33       	cpi	r24, 0x30	; 48
    23ac:	11 f4       	brne	.+4      	; 0x23b2 <vfprintf+0x5b4>
    23ae:	09 7e       	andi	r16, 0xE9	; 233
    23b0:	09 c0       	rjmp	.+18     	; 0x23c4 <vfprintf+0x5c6>
    23b2:	02 ff       	sbrs	r16, 2
    23b4:	06 c0       	rjmp	.+12     	; 0x23c2 <vfprintf+0x5c4>
    23b6:	d3 94       	inc	r13
    23b8:	d3 94       	inc	r13
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <vfprintf+0x5c6>
    23bc:	80 2f       	mov	r24, r16
    23be:	86 78       	andi	r24, 0x86	; 134
    23c0:	09 f0       	breq	.+2      	; 0x23c4 <vfprintf+0x5c6>
    23c2:	d3 94       	inc	r13
    23c4:	03 fd       	sbrc	r16, 3
    23c6:	11 c0       	rjmp	.+34     	; 0x23ea <vfprintf+0x5ec>
    23c8:	00 ff       	sbrs	r16, 0
    23ca:	06 c0       	rjmp	.+12     	; 0x23d8 <vfprintf+0x5da>
    23cc:	1c 2d       	mov	r17, r12
    23ce:	d5 14       	cp	r13, r5
    23d0:	80 f4       	brcc	.+32     	; 0x23f2 <vfprintf+0x5f4>
    23d2:	15 0d       	add	r17, r5
    23d4:	1d 19       	sub	r17, r13
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <vfprintf+0x5f4>
    23d8:	d5 14       	cp	r13, r5
    23da:	58 f4       	brcc	.+22     	; 0x23f2 <vfprintf+0x5f4>
    23dc:	b7 01       	movw	r22, r14
    23de:	80 e2       	ldi	r24, 0x20	; 32
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    23e6:	d3 94       	inc	r13
    23e8:	f7 cf       	rjmp	.-18     	; 0x23d8 <vfprintf+0x5da>
    23ea:	d5 14       	cp	r13, r5
    23ec:	10 f4       	brcc	.+4      	; 0x23f2 <vfprintf+0x5f4>
    23ee:	5d 18       	sub	r5, r13
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <vfprintf+0x5f6>
    23f2:	51 2c       	mov	r5, r1
    23f4:	04 ff       	sbrs	r16, 4
    23f6:	10 c0       	rjmp	.+32     	; 0x2418 <vfprintf+0x61a>
    23f8:	b7 01       	movw	r22, r14
    23fa:	80 e3       	ldi	r24, 0x30	; 48
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2402:	02 ff       	sbrs	r16, 2
    2404:	17 c0       	rjmp	.+46     	; 0x2434 <vfprintf+0x636>
    2406:	01 fd       	sbrc	r16, 1
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <vfprintf+0x612>
    240a:	88 e7       	ldi	r24, 0x78	; 120
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <vfprintf+0x616>
    2410:	88 e5       	ldi	r24, 0x58	; 88
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	b7 01       	movw	r22, r14
    2416:	0c c0       	rjmp	.+24     	; 0x2430 <vfprintf+0x632>
    2418:	80 2f       	mov	r24, r16
    241a:	86 78       	andi	r24, 0x86	; 134
    241c:	59 f0       	breq	.+22     	; 0x2434 <vfprintf+0x636>
    241e:	01 ff       	sbrs	r16, 1
    2420:	02 c0       	rjmp	.+4      	; 0x2426 <vfprintf+0x628>
    2422:	8b e2       	ldi	r24, 0x2B	; 43
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <vfprintf+0x62a>
    2426:	80 e2       	ldi	r24, 0x20	; 32
    2428:	07 fd       	sbrc	r16, 7
    242a:	8d e2       	ldi	r24, 0x2D	; 45
    242c:	b7 01       	movw	r22, r14
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2434:	c1 16       	cp	r12, r17
    2436:	38 f4       	brcc	.+14     	; 0x2446 <vfprintf+0x648>
    2438:	b7 01       	movw	r22, r14
    243a:	80 e3       	ldi	r24, 0x30	; 48
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2442:	11 50       	subi	r17, 0x01	; 1
    2444:	f7 cf       	rjmp	.-18     	; 0x2434 <vfprintf+0x636>
    2446:	ca 94       	dec	r12
    2448:	f3 01       	movw	r30, r6
    244a:	ec 0d       	add	r30, r12
    244c:	f1 1d       	adc	r31, r1
    244e:	80 81       	ld	r24, Z
    2450:	b7 01       	movw	r22, r14
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2458:	c1 10       	cpse	r12, r1
    245a:	f5 cf       	rjmp	.-22     	; 0x2446 <vfprintf+0x648>
    245c:	15 c0       	rjmp	.+42     	; 0x2488 <vfprintf+0x68a>
    245e:	f4 e0       	ldi	r31, 0x04	; 4
    2460:	f5 15       	cp	r31, r5
    2462:	60 f5       	brcc	.+88     	; 0x24bc <vfprintf+0x6be>
    2464:	84 e0       	ldi	r24, 0x04	; 4
    2466:	58 1a       	sub	r5, r24
    2468:	93 fe       	sbrs	r9, 3
    246a:	1f c0       	rjmp	.+62     	; 0x24aa <vfprintf+0x6ac>
    246c:	01 11       	cpse	r16, r1
    246e:	27 c0       	rjmp	.+78     	; 0x24be <vfprintf+0x6c0>
    2470:	2c 85       	ldd	r18, Y+12	; 0x0c
    2472:	23 ff       	sbrs	r18, 3
    2474:	2a c0       	rjmp	.+84     	; 0x24ca <vfprintf+0x6cc>
    2476:	08 e6       	ldi	r16, 0x68	; 104
    2478:	10 e0       	ldi	r17, 0x00	; 0
    247a:	39 2d       	mov	r19, r9
    247c:	30 71       	andi	r19, 0x10	; 16
    247e:	93 2e       	mov	r9, r19
    2480:	f8 01       	movw	r30, r16
    2482:	84 91       	lpm	r24, Z
    2484:	81 11       	cpse	r24, r1
    2486:	24 c0       	rjmp	.+72     	; 0x24d0 <vfprintf+0x6d2>
    2488:	55 20       	and	r5, r5
    248a:	09 f4       	brne	.+2      	; 0x248e <vfprintf+0x690>
    248c:	e4 cc       	rjmp	.-1592   	; 0x1e56 <vfprintf+0x58>
    248e:	b7 01       	movw	r22, r14
    2490:	80 e2       	ldi	r24, 0x20	; 32
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    2498:	5a 94       	dec	r5
    249a:	f6 cf       	rjmp	.-20     	; 0x2488 <vfprintf+0x68a>
    249c:	f7 01       	movw	r30, r14
    249e:	86 81       	ldd	r24, Z+6	; 0x06
    24a0:	97 81       	ldd	r25, Z+7	; 0x07
    24a2:	26 c0       	rjmp	.+76     	; 0x24f0 <vfprintf+0x6f2>
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	9f ef       	ldi	r25, 0xFF	; 255
    24a8:	23 c0       	rjmp	.+70     	; 0x24f0 <vfprintf+0x6f2>
    24aa:	b7 01       	movw	r22, r14
    24ac:	80 e2       	ldi	r24, 0x20	; 32
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    24b4:	5a 94       	dec	r5
    24b6:	51 10       	cpse	r5, r1
    24b8:	f8 cf       	rjmp	.-16     	; 0x24aa <vfprintf+0x6ac>
    24ba:	d8 cf       	rjmp	.-80     	; 0x246c <vfprintf+0x66e>
    24bc:	51 2c       	mov	r5, r1
    24be:	b7 01       	movw	r22, r14
    24c0:	80 2f       	mov	r24, r16
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    24c8:	d3 cf       	rjmp	.-90     	; 0x2470 <vfprintf+0x672>
    24ca:	0c e6       	ldi	r16, 0x6C	; 108
    24cc:	10 e0       	ldi	r17, 0x00	; 0
    24ce:	d5 cf       	rjmp	.-86     	; 0x247a <vfprintf+0x67c>
    24d0:	91 10       	cpse	r9, r1
    24d2:	80 52       	subi	r24, 0x20	; 32
    24d4:	b7 01       	movw	r22, r14
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	0e 94 4a 14 	call	0x2894	; 0x2894 <fputc>
    24dc:	0f 5f       	subi	r16, 0xFF	; 255
    24de:	1f 4f       	sbci	r17, 0xFF	; 255
    24e0:	cf cf       	rjmp	.-98     	; 0x2480 <vfprintf+0x682>
    24e2:	23 e0       	ldi	r18, 0x03	; 3
    24e4:	25 15       	cp	r18, r5
    24e6:	10 f4       	brcc	.+4      	; 0x24ec <vfprintf+0x6ee>
    24e8:	83 e0       	ldi	r24, 0x03	; 3
    24ea:	bd cf       	rjmp	.-134    	; 0x2466 <vfprintf+0x668>
    24ec:	51 2c       	mov	r5, r1
    24ee:	c0 cf       	rjmp	.-128    	; 0x2470 <vfprintf+0x672>
    24f0:	60 96       	adiw	r28, 0x10	; 16
    24f2:	e2 e1       	ldi	r30, 0x12	; 18
    24f4:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <__epilogue_restores__>

000024f8 <__divmodhi4>:
    24f8:	97 fb       	bst	r25, 7
    24fa:	07 2e       	mov	r0, r23
    24fc:	16 f4       	brtc	.+4      	; 0x2502 <__divmodhi4+0xa>
    24fe:	00 94       	com	r0
    2500:	07 d0       	rcall	.+14     	; 0x2510 <__divmodhi4_neg1>
    2502:	77 fd       	sbrc	r23, 7
    2504:	09 d0       	rcall	.+18     	; 0x2518 <__divmodhi4_neg2>
    2506:	0e 94 c7 12 	call	0x258e	; 0x258e <__udivmodhi4>
    250a:	07 fc       	sbrc	r0, 7
    250c:	05 d0       	rcall	.+10     	; 0x2518 <__divmodhi4_neg2>
    250e:	3e f4       	brtc	.+14     	; 0x251e <__divmodhi4_exit>

00002510 <__divmodhi4_neg1>:
    2510:	90 95       	com	r25
    2512:	81 95       	neg	r24
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	08 95       	ret

00002518 <__divmodhi4_neg2>:
    2518:	70 95       	com	r23
    251a:	61 95       	neg	r22
    251c:	7f 4f       	sbci	r23, 0xFF	; 255

0000251e <__divmodhi4_exit>:
    251e:	08 95       	ret

00002520 <__prologue_saves__>:
    2520:	2f 92       	push	r2
    2522:	3f 92       	push	r3
    2524:	4f 92       	push	r4
    2526:	5f 92       	push	r5
    2528:	6f 92       	push	r6
    252a:	7f 92       	push	r7
    252c:	8f 92       	push	r8
    252e:	9f 92       	push	r9
    2530:	af 92       	push	r10
    2532:	bf 92       	push	r11
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	ca 1b       	sub	r28, r26
    254a:	db 0b       	sbc	r29, r27
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	09 94       	ijmp

00002558 <__epilogue_restores__>:
    2558:	2a 88       	ldd	r2, Y+18	; 0x12
    255a:	39 88       	ldd	r3, Y+17	; 0x11
    255c:	48 88       	ldd	r4, Y+16	; 0x10
    255e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2560:	6e 84       	ldd	r6, Y+14	; 0x0e
    2562:	7d 84       	ldd	r7, Y+13	; 0x0d
    2564:	8c 84       	ldd	r8, Y+12	; 0x0c
    2566:	9b 84       	ldd	r9, Y+11	; 0x0b
    2568:	aa 84       	ldd	r10, Y+10	; 0x0a
    256a:	b9 84       	ldd	r11, Y+9	; 0x09
    256c:	c8 84       	ldd	r12, Y+8	; 0x08
    256e:	df 80       	ldd	r13, Y+7	; 0x07
    2570:	ee 80       	ldd	r14, Y+6	; 0x06
    2572:	fd 80       	ldd	r15, Y+5	; 0x05
    2574:	0c 81       	ldd	r16, Y+4	; 0x04
    2576:	1b 81       	ldd	r17, Y+3	; 0x03
    2578:	aa 81       	ldd	r26, Y+2	; 0x02
    257a:	b9 81       	ldd	r27, Y+1	; 0x01
    257c:	ce 0f       	add	r28, r30
    257e:	d1 1d       	adc	r29, r1
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	ed 01       	movw	r28, r26
    258c:	08 95       	ret

0000258e <__udivmodhi4>:
    258e:	aa 1b       	sub	r26, r26
    2590:	bb 1b       	sub	r27, r27
    2592:	51 e1       	ldi	r21, 0x11	; 17
    2594:	07 c0       	rjmp	.+14     	; 0x25a4 <__udivmodhi4_ep>

00002596 <__udivmodhi4_loop>:
    2596:	aa 1f       	adc	r26, r26
    2598:	bb 1f       	adc	r27, r27
    259a:	a6 17       	cp	r26, r22
    259c:	b7 07       	cpc	r27, r23
    259e:	10 f0       	brcs	.+4      	; 0x25a4 <__udivmodhi4_ep>
    25a0:	a6 1b       	sub	r26, r22
    25a2:	b7 0b       	sbc	r27, r23

000025a4 <__udivmodhi4_ep>:
    25a4:	88 1f       	adc	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	5a 95       	dec	r21
    25aa:	a9 f7       	brne	.-22     	; 0x2596 <__udivmodhi4_loop>
    25ac:	80 95       	com	r24
    25ae:	90 95       	com	r25
    25b0:	bc 01       	movw	r22, r24
    25b2:	cd 01       	movw	r24, r26
    25b4:	08 95       	ret

000025b6 <do_rand>:
    25b6:	8f 92       	push	r8
    25b8:	9f 92       	push	r9
    25ba:	af 92       	push	r10
    25bc:	bf 92       	push	r11
    25be:	cf 92       	push	r12
    25c0:	df 92       	push	r13
    25c2:	ef 92       	push	r14
    25c4:	ff 92       	push	r15
    25c6:	cf 93       	push	r28
    25c8:	df 93       	push	r29
    25ca:	ec 01       	movw	r28, r24
    25cc:	68 81       	ld	r22, Y
    25ce:	79 81       	ldd	r23, Y+1	; 0x01
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	9b 81       	ldd	r25, Y+3	; 0x03
    25d4:	61 15       	cp	r22, r1
    25d6:	71 05       	cpc	r23, r1
    25d8:	81 05       	cpc	r24, r1
    25da:	91 05       	cpc	r25, r1
    25dc:	21 f4       	brne	.+8      	; 0x25e6 <do_rand+0x30>
    25de:	64 e2       	ldi	r22, 0x24	; 36
    25e0:	79 ed       	ldi	r23, 0xD9	; 217
    25e2:	8b e5       	ldi	r24, 0x5B	; 91
    25e4:	97 e0       	ldi	r25, 0x07	; 7
    25e6:	2d e1       	ldi	r18, 0x1D	; 29
    25e8:	33 ef       	ldi	r19, 0xF3	; 243
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__divmodsi4>
    25f2:	49 01       	movw	r8, r18
    25f4:	5a 01       	movw	r10, r20
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	a7 ea       	ldi	r26, 0xA7	; 167
    25fc:	b1 e4       	ldi	r27, 0x41	; 65
    25fe:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__muluhisi3>
    2602:	6b 01       	movw	r12, r22
    2604:	7c 01       	movw	r14, r24
    2606:	ac ee       	ldi	r26, 0xEC	; 236
    2608:	b4 ef       	ldi	r27, 0xF4	; 244
    260a:	a5 01       	movw	r20, r10
    260c:	94 01       	movw	r18, r8
    260e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <__mulohisi3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	8c 0d       	add	r24, r12
    2618:	9d 1d       	adc	r25, r13
    261a:	ae 1d       	adc	r26, r14
    261c:	bf 1d       	adc	r27, r15
    261e:	b7 ff       	sbrs	r27, 7
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <do_rand+0x72>
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	a1 09       	sbc	r26, r1
    2626:	b0 48       	sbci	r27, 0x80	; 128
    2628:	88 83       	st	Y, r24
    262a:	99 83       	std	Y+1, r25	; 0x01
    262c:	aa 83       	std	Y+2, r26	; 0x02
    262e:	bb 83       	std	Y+3, r27	; 0x03
    2630:	9f 77       	andi	r25, 0x7F	; 127
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	ff 90       	pop	r15
    2638:	ef 90       	pop	r14
    263a:	df 90       	pop	r13
    263c:	cf 90       	pop	r12
    263e:	bf 90       	pop	r11
    2640:	af 90       	pop	r10
    2642:	9f 90       	pop	r9
    2644:	8f 90       	pop	r8
    2646:	08 95       	ret

00002648 <rand_r>:
    2648:	0e 94 db 12 	call	0x25b6	; 0x25b6 <do_rand>
    264c:	08 95       	ret

0000264e <rand>:
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	91 e0       	ldi	r25, 0x01	; 1
    2652:	0e 94 db 12 	call	0x25b6	; 0x25b6 <do_rand>
    2656:	08 95       	ret

00002658 <srand>:
    2658:	a0 e0       	ldi	r26, 0x00	; 0
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2660:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2664:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    2668:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    266c:	08 95       	ret

0000266e <__ftoa_engine>:
    266e:	28 30       	cpi	r18, 0x08	; 8
    2670:	08 f0       	brcs	.+2      	; 0x2674 <__ftoa_engine+0x6>
    2672:	27 e0       	ldi	r18, 0x07	; 7
    2674:	33 27       	eor	r19, r19
    2676:	da 01       	movw	r26, r20
    2678:	99 0f       	add	r25, r25
    267a:	31 1d       	adc	r19, r1
    267c:	87 fd       	sbrc	r24, 7
    267e:	91 60       	ori	r25, 0x01	; 1
    2680:	00 96       	adiw	r24, 0x00	; 0
    2682:	61 05       	cpc	r22, r1
    2684:	71 05       	cpc	r23, r1
    2686:	39 f4       	brne	.+14     	; 0x2696 <__ftoa_engine+0x28>
    2688:	32 60       	ori	r19, 0x02	; 2
    268a:	2e 5f       	subi	r18, 0xFE	; 254
    268c:	3d 93       	st	X+, r19
    268e:	30 e3       	ldi	r19, 0x30	; 48
    2690:	2a 95       	dec	r18
    2692:	e1 f7       	brne	.-8      	; 0x268c <__ftoa_engine+0x1e>
    2694:	08 95       	ret
    2696:	9f 3f       	cpi	r25, 0xFF	; 255
    2698:	30 f0       	brcs	.+12     	; 0x26a6 <__ftoa_engine+0x38>
    269a:	80 38       	cpi	r24, 0x80	; 128
    269c:	71 05       	cpc	r23, r1
    269e:	61 05       	cpc	r22, r1
    26a0:	09 f0       	breq	.+2      	; 0x26a4 <__ftoa_engine+0x36>
    26a2:	3c 5f       	subi	r19, 0xFC	; 252
    26a4:	3c 5f       	subi	r19, 0xFC	; 252
    26a6:	3d 93       	st	X+, r19
    26a8:	91 30       	cpi	r25, 0x01	; 1
    26aa:	08 f0       	brcs	.+2      	; 0x26ae <__ftoa_engine+0x40>
    26ac:	80 68       	ori	r24, 0x80	; 128
    26ae:	91 1d       	adc	r25, r1
    26b0:	df 93       	push	r29
    26b2:	cf 93       	push	r28
    26b4:	1f 93       	push	r17
    26b6:	0f 93       	push	r16
    26b8:	ff 92       	push	r15
    26ba:	ef 92       	push	r14
    26bc:	19 2f       	mov	r17, r25
    26be:	98 7f       	andi	r25, 0xF8	; 248
    26c0:	96 95       	lsr	r25
    26c2:	e9 2f       	mov	r30, r25
    26c4:	96 95       	lsr	r25
    26c6:	96 95       	lsr	r25
    26c8:	e9 0f       	add	r30, r25
    26ca:	ff 27       	eor	r31, r31
    26cc:	e6 53       	subi	r30, 0x36	; 54
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	99 27       	eor	r25, r25
    26d2:	33 27       	eor	r19, r19
    26d4:	ee 24       	eor	r14, r14
    26d6:	ff 24       	eor	r15, r15
    26d8:	a7 01       	movw	r20, r14
    26da:	e7 01       	movw	r28, r14
    26dc:	05 90       	lpm	r0, Z+
    26de:	08 94       	sec
    26e0:	07 94       	ror	r0
    26e2:	28 f4       	brcc	.+10     	; 0x26ee <__ftoa_engine+0x80>
    26e4:	36 0f       	add	r19, r22
    26e6:	e7 1e       	adc	r14, r23
    26e8:	f8 1e       	adc	r15, r24
    26ea:	49 1f       	adc	r20, r25
    26ec:	51 1d       	adc	r21, r1
    26ee:	66 0f       	add	r22, r22
    26f0:	77 1f       	adc	r23, r23
    26f2:	88 1f       	adc	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	06 94       	lsr	r0
    26f8:	a1 f7       	brne	.-24     	; 0x26e2 <__ftoa_engine+0x74>
    26fa:	05 90       	lpm	r0, Z+
    26fc:	07 94       	ror	r0
    26fe:	28 f4       	brcc	.+10     	; 0x270a <__ftoa_engine+0x9c>
    2700:	e7 0e       	add	r14, r23
    2702:	f8 1e       	adc	r15, r24
    2704:	49 1f       	adc	r20, r25
    2706:	56 1f       	adc	r21, r22
    2708:	c1 1d       	adc	r28, r1
    270a:	77 0f       	add	r23, r23
    270c:	88 1f       	adc	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	66 1f       	adc	r22, r22
    2712:	06 94       	lsr	r0
    2714:	a1 f7       	brne	.-24     	; 0x26fe <__ftoa_engine+0x90>
    2716:	05 90       	lpm	r0, Z+
    2718:	07 94       	ror	r0
    271a:	28 f4       	brcc	.+10     	; 0x2726 <__ftoa_engine+0xb8>
    271c:	f8 0e       	add	r15, r24
    271e:	49 1f       	adc	r20, r25
    2720:	56 1f       	adc	r21, r22
    2722:	c7 1f       	adc	r28, r23
    2724:	d1 1d       	adc	r29, r1
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	66 1f       	adc	r22, r22
    272c:	77 1f       	adc	r23, r23
    272e:	06 94       	lsr	r0
    2730:	a1 f7       	brne	.-24     	; 0x271a <__ftoa_engine+0xac>
    2732:	05 90       	lpm	r0, Z+
    2734:	07 94       	ror	r0
    2736:	20 f4       	brcc	.+8      	; 0x2740 <__ftoa_engine+0xd2>
    2738:	49 0f       	add	r20, r25
    273a:	56 1f       	adc	r21, r22
    273c:	c7 1f       	adc	r28, r23
    273e:	d8 1f       	adc	r29, r24
    2740:	99 0f       	add	r25, r25
    2742:	66 1f       	adc	r22, r22
    2744:	77 1f       	adc	r23, r23
    2746:	88 1f       	adc	r24, r24
    2748:	06 94       	lsr	r0
    274a:	a9 f7       	brne	.-22     	; 0x2736 <__ftoa_engine+0xc8>
    274c:	84 91       	lpm	r24, Z
    274e:	10 95       	com	r17
    2750:	17 70       	andi	r17, 0x07	; 7
    2752:	41 f0       	breq	.+16     	; 0x2764 <__ftoa_engine+0xf6>
    2754:	d6 95       	lsr	r29
    2756:	c7 95       	ror	r28
    2758:	57 95       	ror	r21
    275a:	47 95       	ror	r20
    275c:	f7 94       	ror	r15
    275e:	e7 94       	ror	r14
    2760:	1a 95       	dec	r17
    2762:	c1 f7       	brne	.-16     	; 0x2754 <__ftoa_engine+0xe6>
    2764:	e0 e7       	ldi	r30, 0x70	; 112
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	68 94       	set
    276a:	15 90       	lpm	r1, Z+
    276c:	15 91       	lpm	r17, Z+
    276e:	35 91       	lpm	r19, Z+
    2770:	65 91       	lpm	r22, Z+
    2772:	95 91       	lpm	r25, Z+
    2774:	05 90       	lpm	r0, Z+
    2776:	7f e2       	ldi	r23, 0x2F	; 47
    2778:	73 95       	inc	r23
    277a:	e1 18       	sub	r14, r1
    277c:	f1 0a       	sbc	r15, r17
    277e:	43 0b       	sbc	r20, r19
    2780:	56 0b       	sbc	r21, r22
    2782:	c9 0b       	sbc	r28, r25
    2784:	d0 09       	sbc	r29, r0
    2786:	c0 f7       	brcc	.-16     	; 0x2778 <__ftoa_engine+0x10a>
    2788:	e1 0c       	add	r14, r1
    278a:	f1 1e       	adc	r15, r17
    278c:	43 1f       	adc	r20, r19
    278e:	56 1f       	adc	r21, r22
    2790:	c9 1f       	adc	r28, r25
    2792:	d0 1d       	adc	r29, r0
    2794:	7e f4       	brtc	.+30     	; 0x27b4 <__ftoa_engine+0x146>
    2796:	70 33       	cpi	r23, 0x30	; 48
    2798:	11 f4       	brne	.+4      	; 0x279e <__ftoa_engine+0x130>
    279a:	8a 95       	dec	r24
    279c:	e6 cf       	rjmp	.-52     	; 0x276a <__ftoa_engine+0xfc>
    279e:	e8 94       	clt
    27a0:	01 50       	subi	r16, 0x01	; 1
    27a2:	30 f0       	brcs	.+12     	; 0x27b0 <__ftoa_engine+0x142>
    27a4:	08 0f       	add	r16, r24
    27a6:	0a f4       	brpl	.+2      	; 0x27aa <__ftoa_engine+0x13c>
    27a8:	00 27       	eor	r16, r16
    27aa:	02 17       	cp	r16, r18
    27ac:	08 f4       	brcc	.+2      	; 0x27b0 <__ftoa_engine+0x142>
    27ae:	20 2f       	mov	r18, r16
    27b0:	23 95       	inc	r18
    27b2:	02 2f       	mov	r16, r18
    27b4:	7a 33       	cpi	r23, 0x3A	; 58
    27b6:	28 f0       	brcs	.+10     	; 0x27c2 <__ftoa_engine+0x154>
    27b8:	79 e3       	ldi	r23, 0x39	; 57
    27ba:	7d 93       	st	X+, r23
    27bc:	2a 95       	dec	r18
    27be:	e9 f7       	brne	.-6      	; 0x27ba <__ftoa_engine+0x14c>
    27c0:	10 c0       	rjmp	.+32     	; 0x27e2 <__ftoa_engine+0x174>
    27c2:	7d 93       	st	X+, r23
    27c4:	2a 95       	dec	r18
    27c6:	89 f6       	brne	.-94     	; 0x276a <__ftoa_engine+0xfc>
    27c8:	06 94       	lsr	r0
    27ca:	97 95       	ror	r25
    27cc:	67 95       	ror	r22
    27ce:	37 95       	ror	r19
    27d0:	17 95       	ror	r17
    27d2:	17 94       	ror	r1
    27d4:	e1 18       	sub	r14, r1
    27d6:	f1 0a       	sbc	r15, r17
    27d8:	43 0b       	sbc	r20, r19
    27da:	56 0b       	sbc	r21, r22
    27dc:	c9 0b       	sbc	r28, r25
    27de:	d0 09       	sbc	r29, r0
    27e0:	98 f0       	brcs	.+38     	; 0x2808 <__ftoa_engine+0x19a>
    27e2:	23 95       	inc	r18
    27e4:	7e 91       	ld	r23, -X
    27e6:	73 95       	inc	r23
    27e8:	7a 33       	cpi	r23, 0x3A	; 58
    27ea:	08 f0       	brcs	.+2      	; 0x27ee <__ftoa_engine+0x180>
    27ec:	70 e3       	ldi	r23, 0x30	; 48
    27ee:	7c 93       	st	X, r23
    27f0:	20 13       	cpse	r18, r16
    27f2:	b8 f7       	brcc	.-18     	; 0x27e2 <__ftoa_engine+0x174>
    27f4:	7e 91       	ld	r23, -X
    27f6:	70 61       	ori	r23, 0x10	; 16
    27f8:	7d 93       	st	X+, r23
    27fa:	30 f0       	brcs	.+12     	; 0x2808 <__ftoa_engine+0x19a>
    27fc:	83 95       	inc	r24
    27fe:	71 e3       	ldi	r23, 0x31	; 49
    2800:	7d 93       	st	X+, r23
    2802:	70 e3       	ldi	r23, 0x30	; 48
    2804:	2a 95       	dec	r18
    2806:	e1 f7       	brne	.-8      	; 0x2800 <__ftoa_engine+0x192>
    2808:	11 24       	eor	r1, r1
    280a:	ef 90       	pop	r14
    280c:	ff 90       	pop	r15
    280e:	0f 91       	pop	r16
    2810:	1f 91       	pop	r17
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	99 27       	eor	r25, r25
    2818:	87 fd       	sbrc	r24, 7
    281a:	90 95       	com	r25
    281c:	08 95       	ret

0000281e <strnlen_P>:
    281e:	fc 01       	movw	r30, r24
    2820:	05 90       	lpm	r0, Z+
    2822:	61 50       	subi	r22, 0x01	; 1
    2824:	70 40       	sbci	r23, 0x00	; 0
    2826:	01 10       	cpse	r0, r1
    2828:	d8 f7       	brcc	.-10     	; 0x2820 <strnlen_P+0x2>
    282a:	80 95       	com	r24
    282c:	90 95       	com	r25
    282e:	8e 0f       	add	r24, r30
    2830:	9f 1f       	adc	r25, r31
    2832:	08 95       	ret

00002834 <strnlen>:
    2834:	fc 01       	movw	r30, r24
    2836:	61 50       	subi	r22, 0x01	; 1
    2838:	70 40       	sbci	r23, 0x00	; 0
    283a:	01 90       	ld	r0, Z+
    283c:	01 10       	cpse	r0, r1
    283e:	d8 f7       	brcc	.-10     	; 0x2836 <strnlen+0x2>
    2840:	80 95       	com	r24
    2842:	90 95       	com	r25
    2844:	8e 0f       	add	r24, r30
    2846:	9f 1f       	adc	r25, r31
    2848:	08 95       	ret

0000284a <__itoa_ncheck>:
    284a:	bb 27       	eor	r27, r27
    284c:	4a 30       	cpi	r20, 0x0A	; 10
    284e:	31 f4       	brne	.+12     	; 0x285c <__itoa_ncheck+0x12>
    2850:	99 23       	and	r25, r25
    2852:	22 f4       	brpl	.+8      	; 0x285c <__itoa_ncheck+0x12>
    2854:	bd e2       	ldi	r27, 0x2D	; 45
    2856:	90 95       	com	r25
    2858:	81 95       	neg	r24
    285a:	9f 4f       	sbci	r25, 0xFF	; 255
    285c:	0c 94 31 14 	jmp	0x2862	; 0x2862 <__utoa_common>

00002860 <__utoa_ncheck>:
    2860:	bb 27       	eor	r27, r27

00002862 <__utoa_common>:
    2862:	fb 01       	movw	r30, r22
    2864:	55 27       	eor	r21, r21
    2866:	aa 27       	eor	r26, r26
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	aa 1f       	adc	r26, r26
    286e:	a4 17       	cp	r26, r20
    2870:	10 f0       	brcs	.+4      	; 0x2876 <__utoa_common+0x14>
    2872:	a4 1b       	sub	r26, r20
    2874:	83 95       	inc	r24
    2876:	50 51       	subi	r21, 0x10	; 16
    2878:	b9 f7       	brne	.-18     	; 0x2868 <__utoa_common+0x6>
    287a:	a0 5d       	subi	r26, 0xD0	; 208
    287c:	aa 33       	cpi	r26, 0x3A	; 58
    287e:	08 f0       	brcs	.+2      	; 0x2882 <__utoa_common+0x20>
    2880:	a9 5d       	subi	r26, 0xD9	; 217
    2882:	a1 93       	st	Z+, r26
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	79 f7       	brne	.-34     	; 0x2866 <__utoa_common+0x4>
    2888:	b1 11       	cpse	r27, r1
    288a:	b1 93       	st	Z+, r27
    288c:	11 92       	st	Z+, r1
    288e:	cb 01       	movw	r24, r22
    2890:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <strrev>

00002894 <fputc>:
    2894:	0f 93       	push	r16
    2896:	1f 93       	push	r17
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	fb 01       	movw	r30, r22
    289e:	23 81       	ldd	r18, Z+3	; 0x03
    28a0:	21 fd       	sbrc	r18, 1
    28a2:	03 c0       	rjmp	.+6      	; 0x28aa <fputc+0x16>
    28a4:	8f ef       	ldi	r24, 0xFF	; 255
    28a6:	9f ef       	ldi	r25, 0xFF	; 255
    28a8:	2c c0       	rjmp	.+88     	; 0x2902 <fputc+0x6e>
    28aa:	22 ff       	sbrs	r18, 2
    28ac:	16 c0       	rjmp	.+44     	; 0x28da <fputc+0x46>
    28ae:	46 81       	ldd	r20, Z+6	; 0x06
    28b0:	57 81       	ldd	r21, Z+7	; 0x07
    28b2:	24 81       	ldd	r18, Z+4	; 0x04
    28b4:	35 81       	ldd	r19, Z+5	; 0x05
    28b6:	42 17       	cp	r20, r18
    28b8:	53 07       	cpc	r21, r19
    28ba:	44 f4       	brge	.+16     	; 0x28cc <fputc+0x38>
    28bc:	a0 81       	ld	r26, Z
    28be:	b1 81       	ldd	r27, Z+1	; 0x01
    28c0:	9d 01       	movw	r18, r26
    28c2:	2f 5f       	subi	r18, 0xFF	; 255
    28c4:	3f 4f       	sbci	r19, 0xFF	; 255
    28c6:	31 83       	std	Z+1, r19	; 0x01
    28c8:	20 83       	st	Z, r18
    28ca:	8c 93       	st	X, r24
    28cc:	26 81       	ldd	r18, Z+6	; 0x06
    28ce:	37 81       	ldd	r19, Z+7	; 0x07
    28d0:	2f 5f       	subi	r18, 0xFF	; 255
    28d2:	3f 4f       	sbci	r19, 0xFF	; 255
    28d4:	37 83       	std	Z+7, r19	; 0x07
    28d6:	26 83       	std	Z+6, r18	; 0x06
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <fputc+0x6e>
    28da:	8b 01       	movw	r16, r22
    28dc:	ec 01       	movw	r28, r24
    28de:	fb 01       	movw	r30, r22
    28e0:	00 84       	ldd	r0, Z+8	; 0x08
    28e2:	f1 85       	ldd	r31, Z+9	; 0x09
    28e4:	e0 2d       	mov	r30, r0
    28e6:	09 95       	icall
    28e8:	89 2b       	or	r24, r25
    28ea:	e1 f6       	brne	.-72     	; 0x28a4 <fputc+0x10>
    28ec:	d8 01       	movw	r26, r16
    28ee:	16 96       	adiw	r26, 0x06	; 6
    28f0:	8d 91       	ld	r24, X+
    28f2:	9c 91       	ld	r25, X
    28f4:	17 97       	sbiw	r26, 0x07	; 7
    28f6:	01 96       	adiw	r24, 0x01	; 1
    28f8:	17 96       	adiw	r26, 0x07	; 7
    28fa:	9c 93       	st	X, r25
    28fc:	8e 93       	st	-X, r24
    28fe:	16 97       	sbiw	r26, 0x06	; 6
    2900:	ce 01       	movw	r24, r28
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	08 95       	ret

0000290c <__ultoa_invert>:
    290c:	fa 01       	movw	r30, r20
    290e:	aa 27       	eor	r26, r26
    2910:	28 30       	cpi	r18, 0x08	; 8
    2912:	51 f1       	breq	.+84     	; 0x2968 <__ultoa_invert+0x5c>
    2914:	20 31       	cpi	r18, 0x10	; 16
    2916:	81 f1       	breq	.+96     	; 0x2978 <__ultoa_invert+0x6c>
    2918:	e8 94       	clt
    291a:	6f 93       	push	r22
    291c:	6e 7f       	andi	r22, 0xFE	; 254
    291e:	6e 5f       	subi	r22, 0xFE	; 254
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8f 4f       	sbci	r24, 0xFF	; 255
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	af 4f       	sbci	r26, 0xFF	; 255
    2928:	b1 e0       	ldi	r27, 0x01	; 1
    292a:	3e d0       	rcall	.+124    	; 0x29a8 <__ultoa_invert+0x9c>
    292c:	b4 e0       	ldi	r27, 0x04	; 4
    292e:	3c d0       	rcall	.+120    	; 0x29a8 <__ultoa_invert+0x9c>
    2930:	67 0f       	add	r22, r23
    2932:	78 1f       	adc	r23, r24
    2934:	89 1f       	adc	r24, r25
    2936:	9a 1f       	adc	r25, r26
    2938:	a1 1d       	adc	r26, r1
    293a:	68 0f       	add	r22, r24
    293c:	79 1f       	adc	r23, r25
    293e:	8a 1f       	adc	r24, r26
    2940:	91 1d       	adc	r25, r1
    2942:	a1 1d       	adc	r26, r1
    2944:	6a 0f       	add	r22, r26
    2946:	71 1d       	adc	r23, r1
    2948:	81 1d       	adc	r24, r1
    294a:	91 1d       	adc	r25, r1
    294c:	a1 1d       	adc	r26, r1
    294e:	20 d0       	rcall	.+64     	; 0x2990 <__ultoa_invert+0x84>
    2950:	09 f4       	brne	.+2      	; 0x2954 <__ultoa_invert+0x48>
    2952:	68 94       	set
    2954:	3f 91       	pop	r19
    2956:	2a e0       	ldi	r18, 0x0A	; 10
    2958:	26 9f       	mul	r18, r22
    295a:	11 24       	eor	r1, r1
    295c:	30 19       	sub	r19, r0
    295e:	30 5d       	subi	r19, 0xD0	; 208
    2960:	31 93       	st	Z+, r19
    2962:	de f6       	brtc	.-74     	; 0x291a <__ultoa_invert+0xe>
    2964:	cf 01       	movw	r24, r30
    2966:	08 95       	ret
    2968:	46 2f       	mov	r20, r22
    296a:	47 70       	andi	r20, 0x07	; 7
    296c:	40 5d       	subi	r20, 0xD0	; 208
    296e:	41 93       	st	Z+, r20
    2970:	b3 e0       	ldi	r27, 0x03	; 3
    2972:	0f d0       	rcall	.+30     	; 0x2992 <__ultoa_invert+0x86>
    2974:	c9 f7       	brne	.-14     	; 0x2968 <__ultoa_invert+0x5c>
    2976:	f6 cf       	rjmp	.-20     	; 0x2964 <__ultoa_invert+0x58>
    2978:	46 2f       	mov	r20, r22
    297a:	4f 70       	andi	r20, 0x0F	; 15
    297c:	40 5d       	subi	r20, 0xD0	; 208
    297e:	4a 33       	cpi	r20, 0x3A	; 58
    2980:	18 f0       	brcs	.+6      	; 0x2988 <__ultoa_invert+0x7c>
    2982:	49 5d       	subi	r20, 0xD9	; 217
    2984:	31 fd       	sbrc	r19, 1
    2986:	40 52       	subi	r20, 0x20	; 32
    2988:	41 93       	st	Z+, r20
    298a:	02 d0       	rcall	.+4      	; 0x2990 <__ultoa_invert+0x84>
    298c:	a9 f7       	brne	.-22     	; 0x2978 <__ultoa_invert+0x6c>
    298e:	ea cf       	rjmp	.-44     	; 0x2964 <__ultoa_invert+0x58>
    2990:	b4 e0       	ldi	r27, 0x04	; 4
    2992:	a6 95       	lsr	r26
    2994:	97 95       	ror	r25
    2996:	87 95       	ror	r24
    2998:	77 95       	ror	r23
    299a:	67 95       	ror	r22
    299c:	ba 95       	dec	r27
    299e:	c9 f7       	brne	.-14     	; 0x2992 <__ultoa_invert+0x86>
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	61 05       	cpc	r22, r1
    29a4:	71 05       	cpc	r23, r1
    29a6:	08 95       	ret
    29a8:	9b 01       	movw	r18, r22
    29aa:	ac 01       	movw	r20, r24
    29ac:	0a 2e       	mov	r0, r26
    29ae:	06 94       	lsr	r0
    29b0:	57 95       	ror	r21
    29b2:	47 95       	ror	r20
    29b4:	37 95       	ror	r19
    29b6:	27 95       	ror	r18
    29b8:	ba 95       	dec	r27
    29ba:	c9 f7       	brne	.-14     	; 0x29ae <__ultoa_invert+0xa2>
    29bc:	62 0f       	add	r22, r18
    29be:	73 1f       	adc	r23, r19
    29c0:	84 1f       	adc	r24, r20
    29c2:	95 1f       	adc	r25, r21
    29c4:	a0 1d       	adc	r26, r0
    29c6:	08 95       	ret

000029c8 <strrev>:
    29c8:	dc 01       	movw	r26, r24
    29ca:	fc 01       	movw	r30, r24
    29cc:	67 2f       	mov	r22, r23
    29ce:	71 91       	ld	r23, Z+
    29d0:	77 23       	and	r23, r23
    29d2:	e1 f7       	brne	.-8      	; 0x29cc <strrev+0x4>
    29d4:	32 97       	sbiw	r30, 0x02	; 2
    29d6:	04 c0       	rjmp	.+8      	; 0x29e0 <strrev+0x18>
    29d8:	7c 91       	ld	r23, X
    29da:	6d 93       	st	X+, r22
    29dc:	70 83       	st	Z, r23
    29de:	62 91       	ld	r22, -Z
    29e0:	ae 17       	cp	r26, r30
    29e2:	bf 07       	cpc	r27, r31
    29e4:	c8 f3       	brcs	.-14     	; 0x29d8 <strrev+0x10>
    29e6:	08 95       	ret

000029e8 <__divmodsi4>:
    29e8:	05 2e       	mov	r0, r21
    29ea:	97 fb       	bst	r25, 7
    29ec:	1e f4       	brtc	.+6      	; 0x29f4 <__divmodsi4+0xc>
    29ee:	00 94       	com	r0
    29f0:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__negsi2>
    29f4:	57 fd       	sbrc	r21, 7
    29f6:	07 d0       	rcall	.+14     	; 0x2a06 <__divmodsi4_neg2>
    29f8:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <__udivmodsi4>
    29fc:	07 fc       	sbrc	r0, 7
    29fe:	03 d0       	rcall	.+6      	; 0x2a06 <__divmodsi4_neg2>
    2a00:	4e f4       	brtc	.+18     	; 0x2a14 <__divmodsi4_exit>
    2a02:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__negsi2>

00002a06 <__divmodsi4_neg2>:
    2a06:	50 95       	com	r21
    2a08:	40 95       	com	r20
    2a0a:	30 95       	com	r19
    2a0c:	21 95       	neg	r18
    2a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a10:	4f 4f       	sbci	r20, 0xFF	; 255
    2a12:	5f 4f       	sbci	r21, 0xFF	; 255

00002a14 <__divmodsi4_exit>:
    2a14:	08 95       	ret

00002a16 <__negsi2>:
    2a16:	90 95       	com	r25
    2a18:	80 95       	com	r24
    2a1a:	70 95       	com	r23
    2a1c:	61 95       	neg	r22
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	8f 4f       	sbci	r24, 0xFF	; 255
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	08 95       	ret

00002a26 <__muluhisi3>:
    2a26:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__umulhisi3>
    2a2a:	a5 9f       	mul	r26, r21
    2a2c:	90 0d       	add	r25, r0
    2a2e:	b4 9f       	mul	r27, r20
    2a30:	90 0d       	add	r25, r0
    2a32:	a4 9f       	mul	r26, r20
    2a34:	80 0d       	add	r24, r0
    2a36:	91 1d       	adc	r25, r1
    2a38:	11 24       	eor	r1, r1
    2a3a:	08 95       	ret

00002a3c <__mulshisi3>:
    2a3c:	b7 ff       	sbrs	r27, 7
    2a3e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <__muluhisi3>

00002a42 <__mulohisi3>:
    2a42:	0e 94 13 15 	call	0x2a26	; 0x2a26 <__muluhisi3>
    2a46:	82 1b       	sub	r24, r18
    2a48:	93 0b       	sbc	r25, r19
    2a4a:	08 95       	ret

00002a4c <__udivmodsi4>:
    2a4c:	a1 e2       	ldi	r26, 0x21	; 33
    2a4e:	1a 2e       	mov	r1, r26
    2a50:	aa 1b       	sub	r26, r26
    2a52:	bb 1b       	sub	r27, r27
    2a54:	fd 01       	movw	r30, r26
    2a56:	0d c0       	rjmp	.+26     	; 0x2a72 <__udivmodsi4_ep>

00002a58 <__udivmodsi4_loop>:
    2a58:	aa 1f       	adc	r26, r26
    2a5a:	bb 1f       	adc	r27, r27
    2a5c:	ee 1f       	adc	r30, r30
    2a5e:	ff 1f       	adc	r31, r31
    2a60:	a2 17       	cp	r26, r18
    2a62:	b3 07       	cpc	r27, r19
    2a64:	e4 07       	cpc	r30, r20
    2a66:	f5 07       	cpc	r31, r21
    2a68:	20 f0       	brcs	.+8      	; 0x2a72 <__udivmodsi4_ep>
    2a6a:	a2 1b       	sub	r26, r18
    2a6c:	b3 0b       	sbc	r27, r19
    2a6e:	e4 0b       	sbc	r30, r20
    2a70:	f5 0b       	sbc	r31, r21

00002a72 <__udivmodsi4_ep>:
    2a72:	66 1f       	adc	r22, r22
    2a74:	77 1f       	adc	r23, r23
    2a76:	88 1f       	adc	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	1a 94       	dec	r1
    2a7c:	69 f7       	brne	.-38     	; 0x2a58 <__udivmodsi4_loop>
    2a7e:	60 95       	com	r22
    2a80:	70 95       	com	r23
    2a82:	80 95       	com	r24
    2a84:	90 95       	com	r25
    2a86:	9b 01       	movw	r18, r22
    2a88:	ac 01       	movw	r20, r24
    2a8a:	bd 01       	movw	r22, r26
    2a8c:	cf 01       	movw	r24, r30
    2a8e:	08 95       	ret

00002a90 <__umulhisi3>:
    2a90:	a2 9f       	mul	r26, r18
    2a92:	b0 01       	movw	r22, r0
    2a94:	b3 9f       	mul	r27, r19
    2a96:	c0 01       	movw	r24, r0
    2a98:	a3 9f       	mul	r26, r19
    2a9a:	70 0d       	add	r23, r0
    2a9c:	81 1d       	adc	r24, r1
    2a9e:	11 24       	eor	r1, r1
    2aa0:	91 1d       	adc	r25, r1
    2aa2:	b2 9f       	mul	r27, r18
    2aa4:	70 0d       	add	r23, r0
    2aa6:	81 1d       	adc	r24, r1
    2aa8:	11 24       	eor	r1, r1
    2aaa:	91 1d       	adc	r25, r1
    2aac:	08 95       	ret

00002aae <_exit>:
    2aae:	f8 94       	cli

00002ab0 <__stop_program>:
    2ab0:	ff cf       	rjmp	.-2      	; 0x2ab0 <__stop_program>
